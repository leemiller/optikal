{"version":3,"sources":["app/app.js","app/bus.js","app/config.js","app/defaults.js","app/scripts/collections/fretted-strings.js","app/scripts/collections/notes.js","app/scripts/controllers/color-wheel.js","app/scripts/controllers/fretted-string.js","app/scripts/controllers/layout.js","app/scripts/models/fretted-string.js","app/scripts/models/note.js","app/scripts/views/color-wheel.js","app/scripts/views/constellation.js","app/scripts/views/instruments/fretted.js","app/scripts/views/konva.js","app/scripts/views/layout.js","app/scripts/views/selector.js","app/scripts/views/templates/item-selector.hbs","app/scripts/views/templates/layout.hbs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApnFA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAllUA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnEA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA","file":"www\\javascripts\\app.js","sourcesContent":["var LayoutController = require('scripts/controllers/layout');\r\nvar region = new Backbone.Marionette.Region({\r\n    el: '#main'\r\n});\r\nvar layout = new LayoutController({\r\n    region: region\r\n});\r\nlayout.show();","var EventBus = new Backbone.Wreqr.EventAggregator();\r\nvar ReqresBus = new Backbone.Wreqr.RequestResponse();\r\nmodule.exports = {\r\n    Event: EventBus,\r\n    Reqres: ReqresBus\r\n};","var Notes = require('scripts/collections/notes');\r\nvar notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'];\r\nvar allChromaticScales = {};\r\n_.each(notes, function(tonic) {\r\n    allChromaticScales[tonic] = new Notes(tonic);\r\n});\r\n\r\nmodule.exports = {\r\n    notes: notes,\r\n    chromaticScales: allChromaticScales,\r\n    scales: {\r\n        Acoustic: [0, 2, 4, 5, 6, 7, 9, 10],\r\n        'Natural Minor': [0, 2,3, 5, 7, 8, 10],\r\n        Algerian: [0, 2, 3, 6, 7, 8, 11],\r\n        Altered: [0, 1, 3, 4, 6, 8, 10],\r\n        Augmented: [0, 3, 4, 7, 9, 11],\r\n        'Bebop Dominant': [0, 2, 4, 5, 7, 9, 10, 11],\r\n        Blues: [0, 3, 5, 6, 7, 10],\r\n        Chromatic: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\r\n        'Double Harmonic': [0, 1, 4, 5, 7, 8, 11],\r\n        Enigmatic: [0, 1, 4, 6, 8, 10, 11],\r\n        Gypsy: [0, 2, 3, 6, 7, 8, 10],\r\n        'Half Diminshed': [0, 2, 3, 5, 6, 8, 10],\r\n        'Harmonic Major': [0, 2, 4, 5, 7, 8, 11],\r\n        'Harmonc Minor': [0, 2, 3, 5, 7, 8, 11],\r\n        Hirjoshi: [0, 2, 3, 7, 8],\r\n        'Hungarian Minor': [0, 2, 3, 6, 7, 8, 11],\r\n        Insen: [0, 1, 5, 7, 10],\r\n        Major: [0, 2, 4, 5, 7, 9, 11],\r\n        Istrian: [0, 1, 3, 4, 6, 7],\r\n        Iwato: [0, 1, 10, 5, 6],\r\n        'Major Pentatonic Scale': [0, 9, 2, 4, 7]\r\n    },\r\n    instruments: {\r\n        Bass: {\r\n            type: 'fretted-string',\r\n            frets: 20,\r\n            strings: ['G', 'D', 'A', 'E'],\r\n            lengthPerFret: 60,\r\n            stringHeight: 40,\r\n            padding: 40,\r\n            nutWidth: 15,\r\n            fretWidth: 6,\r\n            fretMarkers: [1, 3, 5, 7, 9, 12, 15, 17, 19],\r\n            fretboardColor: '#f2e9cc'\r\n        },\r\n        Guitar: {\r\n            type: 'fretted-string',\r\n            frets: 22,\r\n            strings: ['E', 'B', 'G', 'D', 'A', 'E'],\r\n            lengthPerFret: 50,\r\n            stringHeight: 25,\r\n            padding: 30,\r\n            nutWidth: 15,\r\n            fretWidth: 4,\r\n            fretMarkers: [3, 5, 7, 9, 12, 15, 17, 19, 21],\r\n            fretboardColor: '#f2e9cc'\r\n        },\r\n        Uke: {\r\n            type: 'fretted-string',\r\n            frets: 17,\r\n            strings: ['G', 'C', 'A', 'E'],\r\n            lengthPerFret: 60,\r\n            stringHeight: 30,\r\n            padding: 30,\r\n            nutWidth: 10,\r\n            fretWidth: 5,\r\n            fretMarkers: [5, 7, 10, 12, 15],\r\n            fretboardColor: '#f2e9cc'\r\n        }\r\n    }\r\n};","module.exports = {\r\n    tonic: 'C',\r\n    scale: 'Major',\r\n    instrument: 'Bass'\r\n};","var FrettedStringModel = require('../models/fretted-string');\r\nvar defaults = require('defaults');\r\nvar config = require('config');\r\n\r\nvar FrettedStringCollection = Backbone.Collection.extend({\r\n    model: FrettedStringModel,\r\n    url: '/fretted-strings',\r\n    settings: null,\r\n    fretDistanceMap: null,\r\n    displayWidth: 0,\r\n    displayHeight: 0,\r\n    \r\n    initialize: function(models, options) {\r\n        this.options = options || {};\r\n        this.settings = options.settings;\r\n\r\n        this._setSettings();\r\n\r\n        _.each(this.settings.strings, function(tonic) {\r\n            this.create({\r\n                tonic: tonic,\r\n                frets: this.settings.frets\r\n            });\r\n        }, this);\r\n    },\r\n\r\n    getFrets: function() {\r\n        return this.options.settings.frets;\r\n    },\r\n\r\n    _setSettings: function() {\r\n        var strings = this.settings.strings;\r\n        var frets = this.settings.frets;\r\n        var scaleLength = this.settings.lengthPerFret * frets;\r\n        var distance = 0;\r\n        var fretDistanceMap = {};\r\n        for (var fret = 1; fret <= frets; fret++) {\r\n            var location = scaleLength - distance;\r\n            var scaleFactor = location / 17.817;\r\n            distance += scaleFactor;\r\n            fretDistanceMap[fret] = {\r\n                distance: distance,\r\n                width: scaleFactor\r\n            };\r\n        }\r\n        var endPadding = (2 * this.settings.padding);\r\n        var totalLength = distance + endPadding;\r\n\r\n        this.settings.displayWidth = distance + endPadding;\r\n        this.settings.fretboardWidth = distance;\r\n        this.settings.fretDistanceMap = fretDistanceMap;\r\n        this.settings.fretboardHeight = strings.length * this.settings.stringHeight\r\n        this.settings.displayHeight = this.settings.fretboardHeight + endPadding;\r\n\r\n    },  \r\n\r\n    sync: function() {\r\n\r\n    }\r\n});\r\n\r\nvar defaultInstrument = config.instruments[defaults.instrument];\r\n\r\nmodule.exports = function(settings) {\r\n    settings = settings || defaultInstrument;\r\n    return new FrettedStringCollection(null, {\r\n        settings: settings\r\n    });\r\n};","var NoteModel = require('../models/note');\r\nvar defaults = require('defaults');\r\n\r\nvar baseNotes = [\r\n    {name: 'C', color: '#ff0000'},\r\n    {name: 'C#', color: '#ff6600'},\r\n    {name: 'D', color:'#ff9400'},\r\n    {name: 'D#', color: '#ffc500'},\r\n    {name: 'E', color: '#ffff00'},\r\n    {name: 'F', color: '#8cc700'},\r\n    {name: 'F#', color: '#0fad00'},\r\n    {name: 'G', color: '#00a3c7'},\r\n    {name: 'G#', color: '#0064b5'},\r\n    {name: 'A', color: '#0010a5'},\r\n    {name: 'A#', color: '#6300a5'},\r\n    {name: 'B', color: '#c5007c'}\r\n];\r\n\r\nvar NotesCollection = Backbone.Collection.extend({\r\n    model: NoteModel,\r\n    url: '/notes',\r\n    noteCache: null,\r\n    \r\n    initialize: function(models, options) {\r\n        this.options = options || {};\r\n        this.noteCache = [];\r\n        var tonic = this.options.tonic;\r\n\r\n        var notes = this._getNotesFrom(tonic);\r\n\r\n        _.each(notes, function(note) {\r\n            this.create(note);\r\n            this.noteCache.push(note.name);\r\n        }, this);\r\n\r\n    },\r\n\r\n    getTonic: function() {\r\n        return this.first().get('name');\r\n    },\r\n\r\n    getNotes: function() {\r\n        return this.noteCache.join(' ');\r\n    },\r\n\r\n    getNotesArray: function() {\r\n        return this.noteCache;\r\n    },\r\n\r\n    _getNotesFrom: function(tonic) {\r\n        var tonicIndex;\r\n        // copy the notes\r\n        var notes = [];\r\n        _.each(baseNotes, function(baseNote, index) {\r\n            if (baseNote.name === tonic) {\r\n                tonicIndex = index;\r\n            }\r\n            notes.push({\r\n                name: baseNote.name,\r\n                color: baseNote.color\r\n            });\r\n        });\r\n\r\n        var notesFromTonic = notes.splice(tonicIndex, notes.length - tonicIndex);\r\n        notesFromTonic = notesFromTonic.concat(notes);\r\n        return notesFromTonic;\r\n    },\r\n\r\n    sync: function() {\r\n\r\n    }\r\n});\r\n\r\nmodule.exports = function(tonic) {\r\n    var tonic = tonic || defaults.tonic;\r\n    return new NotesCollection(null, {tonic: tonic});\r\n};\r\n","var ColorWheelView = require('scripts/views/color-wheel');\r\nvar ConstellationView = require('../views/constellation');\r\nvar config = require('config');\r\nvar defaults = require('defaults');\r\nvar Bus = require('bus');\r\n\r\nmodule.exports = Backbone.Marionette.Controller.extend({\r\n    baseLayer: null,\r\n    mouseoverLayer: null,\r\n    constellationLayer: null,\r\n    stage: null,\r\n    wheel: null,\r\n    constellation: null,\r\n    _currentScale: defaults.scale,\r\n    _currentTonic: defaults.tonic,\r\n\r\n    initialize: function(options) {\r\n        this.options = options || {};\r\n\r\n        this.stage = new Konva.Stage({\r\n            container: this.options.container,\r\n            width: 500,\r\n            height: 500\r\n        });\r\n\r\n        this.baseLayer = new Konva.Layer();\r\n        this.mouseoverLayer = new Konva.Layer();\r\n        this.constellationLayer = new Konva.Layer();\r\n        this.stage.add(this.baseLayer, this.mouseoverLayer, this.constellationLayer);\r\n\r\n        Bus.Event.on('change:tonic', this._changeTonic, this);\r\n        Bus.Event.on('change:scale', this._changeScale, this);\r\n\r\n        Bus.Reqres.setHandler('current:tonic', function() {\r\n            return this._currentTonic;\r\n        }, this);\r\n        Bus.Reqres.setHandler('current:scale', function() {\r\n            return this._currentScale;\r\n        }, this);\r\n    },\r\n\r\n    _changeScale: function(newScale) {\r\n        this._currentScale = newScale;\r\n        this._clearPreviousConstellation();\r\n        var scalePositions = config.scales[newScale];\r\n        this.constellation = new ConstellationView({\r\n            stage: this.stage,\r\n            baseLayer: this.constellationLayer,\r\n            collection: scalePositions\r\n        });\r\n    },\r\n\r\n    _clearPreviousConstellation: function() {\r\n        if (_.isNull(this.constellation)) return;\r\n        this.constellation.off();\r\n        this.constellation.destroy();\r\n        this.constellationLayer.destroyChildren();\r\n        this.stage.draw();\r\n    },\r\n\r\n    _changeTonic: function(newTonic) {\r\n        this._currentTonic = newTonic;\r\n        this._clearPreviousWheel();\r\n        this._showColorWheel(newTonic);\r\n    },\r\n\r\n    _clearPreviousWheel: function() {\r\n        if (_.isNull(this.wheel)) return;\r\n        this.wheel.off();\r\n        this.wheel.destroy();\r\n        this.baseLayer.destroyChildren();\r\n        this.mouseoverLayer.destroyChildren();\r\n        this.stage.draw();\r\n    },\r\n\r\n    _showColorWheel: function(tonic) {\r\n        this.wheel = new ColorWheelView({\r\n            stage: this.stage,\r\n            baseLayer: this.baseLayer,\r\n            mouseoverLayer: this.mouseoverLayer, \r\n            collection: config.chromaticScales[tonic]\r\n        });\r\n    }\r\n});","var FrettedStringView = require('../views/instruments/fretted');\r\nvar FrettedStrings = require('scripts/collections/fretted-strings');\r\nvar config = require('config');\r\nvar Bus = require('bus');\r\n\r\nmodule.exports = Backbone.Marionette.Controller.extend({\r\n    baseLayer: null,\r\n    mouseoverLayer: null,\r\n    stage: null,\r\n    frettedString: null,\r\n\r\n    initialize: function(options) {\r\n        this.options = options || {};\r\n\r\n        Bus.Event.on('change:instrument', this._changeInstrument, this);\r\n        Bus.Event.on('change:scale', this._changeScale, this);\r\n        Bus.Event.on('change:tonic', function() {\r\n            this.frettedString._changeScale(Bus.Reqres.request('current:scale'));\r\n        }, this);\r\n    },\r\n\r\n    _changeScale: function(newScale) {\r\n        this.frettedString._changeScale(newScale);\r\n    },\r\n\r\n    _showInstrument: function(newInstrument) {\r\n        var stringSettings = config.instruments[newInstrument];\r\n        var strings = new FrettedStrings(stringSettings);\r\n        var settings = {\r\n            height: strings.settings.displayHeight,\r\n            width: strings.settings.displayWidth\r\n        };\r\n\r\n        this._initializeStageAndLayers(settings);\r\n\r\n        this.frettedString = new FrettedStringView({\r\n            collection: strings,\r\n            stage: this.stage,\r\n            baseLayer: this.baseLayer,\r\n            mouseoverLayer: this.mouseoverLayer,\r\n        });\r\n    },\r\n\r\n    _initializeStageAndLayers: function(settings) {\r\n        this.stage = new Konva.Stage({\r\n            container: this.options.container,\r\n            width: settings.width,\r\n            height: settings.height\r\n        });\r\n        this.baseLayer = new Konva.Layer();\r\n        this.mouseoverLayer = new Konva.Layer();\r\n        this.stage.add(this.baseLayer, this.mouseoverLayer);\r\n    },\r\n\r\n    _changeInstrument: function(newInstrument) {\r\n        this._clearPreviousInstrument();\r\n        this._showInstrument(newInstrument);\r\n\r\n        this.frettedString._changeScale(Bus.Reqres.request('current:scale'));\r\n    },\r\n\r\n    _clearPreviousInstrument: function() {\r\n        if (_.isNull(this.frettedString)) return;\r\n        this.frettedString.off();\r\n        this.frettedString.destroy();\r\n        this.baseLayer.destroyChildren();\r\n        this.mouseoverLayer.destroyChildren();\r\n        this.baseLayer.destroy();\r\n        this.mouseoverLayer.destroy();\r\n        this.stage.destroy();\r\n        this.stage = null;\r\n    }\r\n})","var LayoutView = require('../views/layout');\r\nvar SelectorView = require('../views/selector');\r\nvar ColorWheelController = require('./color-wheel');\r\nvar FrettedStringController = require('./fretted-string');\r\nvar config = require('config');\r\nvar Bus = require('bus');\r\n\r\nmodule.exports = Backbone.Marionette.Controller.extend({\r\n    initialize: function(options) {\r\n        this.options = options || {};\r\n    },\r\n\r\n    show: function() {\r\n        var layoutView = new LayoutView();\r\n        this.options.region.show(layoutView);\r\n\r\n        var selectorView = new SelectorView();\r\n        \r\n        var wheelContainer = $(layoutView.getRegion('colorWheel').el)[0];\r\n        var colorWheel = new ColorWheelController({\r\n            container: wheelContainer\r\n        });\r\n\r\n        var instrumentContainer = $(layoutView.getRegion('instrument').el)[0];\r\n        var instrument = new FrettedStringController({\r\n            container: instrumentContainer\r\n        });\r\n\r\n        layoutView.getRegion('selector').show(selectorView);\r\n    }\r\n})","var config = require('config');\r\nvar defaults = require('defaults');\r\n\r\nmodule.exports = Backbone.Model.extend({\r\n    _notes: null,\r\n\r\n    defaults: {\r\n        tonic: defaults.tonic,\r\n        frets: config.instruments[defaults.instrument].frets\r\n    },\r\n\r\n    initialize: function(options) {\r\n        var chromaticScale = config.chromaticScales[this.get('tonic')];\r\n        var notes = [];\r\n        var numberOfNotesInScale = chromaticScale.length;\r\n        var frets = this.get('frets') + 1;\r\n        _(frets).range().map(function(fret) {\r\n            var scaleIndex = fret >= numberOfNotesInScale ? fret % numberOfNotesInScale : fret;\r\n            notes.push(chromaticScale.at(scaleIndex));\r\n        });\r\n\r\n        this._notes = notes;\r\n        this.set('notes', notes);\r\n        this.set('noteNames', _.map(notes, function(note) {\r\n            return note.get('name');\r\n        }));\r\n    },\r\n\r\n    sync: function() {\r\n        // no need to save, no need for sync!\r\n    }\r\n});","module.exports = Backbone.Model.extend({\r\n    defaults: {\r\n        name: undefined,\r\n        color: undefined\r\n    },\r\n\r\n    sync: function() {\r\n        // no need to save, no need for sync!\r\n    }\r\n});","var eachSectionDegrees = 360 / 12;\r\nvar startRotation = -90 - (eachSectionDegrees / 2);\r\n\r\nvar KonvaView = require('./konva');\r\nvar Bus = require('bus');\r\n\r\nmodule.exports = KonvaView.extend({\r\n    wedgeGroup: null,\r\n    labelGroup: null,\r\n    currentTween: null,\r\n\r\n    events: {\r\n        'mouseover .note-wedge': '_scaleUpWedge',\r\n        'mouseout .note-wedge': '_resetWedge',\r\n        'click .note-wedge': '_changeTonic'\r\n    },\r\n\r\n    initialize: function(options) {\r\n        options = options || {};\r\n        this.baseLayer = options.baseLayer;\r\n        this.mouseoverLayer = options.mouseoverLayer;\r\n        this.stage = options.stage;\r\n        this.options = options;\r\n\r\n        this.render();\r\n    },\r\n\r\n    _changeTonic: function(e) {\r\n        var wedge = e.target;\r\n        var newTonic = wedge.getAttr('id').split('-')[1];\r\n        Bus.Event.trigger('change:tonic', newTonic);\r\n    },\r\n\r\n    _scaleUpWedge: function(e) {\r\n        var wedge = e.target;\r\n\r\n        Bus.Event.trigger('note:highlighted', wedge.getAttr('note'));\r\n\r\n        wedge.moveTo(this.mouseoverLayer);\r\n        \r\n        var scale = 1.15;\r\n        var newAngle = eachSectionDegrees * scale;\r\n        var newRotation = wedge.getAttr('startRotation') - ((eachSectionDegrees * scale) / 2) + (eachSectionDegrees /2);\r\n\r\n        this.currentTween = new Konva.Tween({\r\n            node: wedge,\r\n            duration: 0.5,\r\n            easing: Konva.Easings.ElasticEaseOut,\r\n            scaleX: scale,\r\n            scaleY: scale,\r\n            angle: newAngle,\r\n            rotation: newRotation\r\n        });\r\n        this.currentTween.play();\r\n        this.stage.draw();\r\n    },\r\n\r\n    _addToGroup: function() {\r\n        this.wedgeGroup = new Konva.Group();\r\n        this.labelGroup = new Konva.Group();\r\n        this.collection.each(function(note, index) {\r\n            this._addWedge(note, index);\r\n            this._addLabel(note, index);\r\n        }, this);\r\n        this.group.add(this.wedgeGroup);\r\n        this.group.add(this.labelGroup);\r\n    },\r\n\r\n    _addLabel: function(note, index) {\r\n        var startRot = -90;\r\n        var rotation = startRot + (eachSectionDegrees * index);\r\n        var pos = this.getPositionFromAngle(250, 250, rotation, 200);\r\n        var label = new Konva.Text({\r\n            x: pos.x,\r\n            y: pos.y,\r\n            text: note.get('name'),\r\n            id: 'label-' + note.get('name'),\r\n            fontSize: 24,\r\n            fill: 'black'\r\n        });\r\n        label.setOffset({\r\n            x: label.getWidth() / 2,\r\n            y: label.getHeight() / 2\r\n        });\r\n        this.labelGroup.add(label);\r\n    },\r\n\r\n    _addWedge: function(note, index) {\r\n        var rotation = startRotation + (eachSectionDegrees * index);\r\n        var wedge = new Konva.Wedge({\r\n            x: 250,\r\n            y: 250,\r\n            radius: 150,\r\n            angle: eachSectionDegrees,\r\n            name: 'note-wedge',\r\n            id: 'note-' + note.get('name'),\r\n            fill: note.get('color'),\r\n            note: note.get('name'),\r\n            rotation: rotation,\r\n            startRotation: rotation,\r\n            scale: {\r\n                x: 1,\r\n                y: 1\r\n            },\r\n            startScale: 1\r\n        });\r\n        this.wedgeGroup.add(wedge);\r\n    },\r\n\r\n    _resetWedge: function(e) {\r\n        var wedge = e.target;\r\n        Bus.Event.trigger('note:unhighlighted', wedge.getAttr('note'));\r\n        wedge.moveTo(this.baseLayer);\r\n        if(this.currentTween) {\r\n            this.currentTween.pause();\r\n        }\r\n\r\n        wedge.setAttrs({\r\n            scaleY: 1,\r\n            scaleX: 1,\r\n            angle: eachSectionDegrees,\r\n            rotation: wedge.getAttr('startRotation')\r\n        });\r\n        this.stage.draw();\r\n    },\r\n\r\n    onDestroy: function() {\r\n        this.wedgeGroup.destroyChildren();\r\n        this.labelGroup.destroyChildren();\r\n    }\r\n}); ","var eachSectionDegrees = 360 / 12;\r\nvar startRotation = -90;\r\n\r\nvar KonvaView = require('./konva');\r\n\r\nmodule.exports = KonvaView.extend({\r\n    labelGroup: null,\r\n    linesGroup: null,\r\n\r\n    initialize: function(options) {\r\n        options = options || {};\r\n        this.baseLayer = options.baseLayer;\r\n        this.stage = options.stage;\r\n        this.options = options;\r\n        \r\n        this.render();\r\n    },\r\n\r\n    _addToGroup: function() {\r\n        this.labelGroup = new Konva.Group();\r\n        this.linesGroup = new Konva.Group();\r\n\r\n        var endPoints = [];\r\n        var labelPoints = [];\r\n        _.each(this.collection, function(noteNumber) {\r\n            var rotation = startRotation + (eachSectionDegrees * noteNumber);\r\n            var endPoint = this.getPositionFromAngle(250, 250, rotation, 150);\r\n            endPoints.push(endPoint);\r\n\r\n            var labelPoint = this.getPositionFromAngle(250, 250, rotation, 162);\r\n            labelPoints.push(labelPoint);\r\n        }, this);\r\n        this._addLines(endPoints);\r\n        this._addLabels(labelPoints);\r\n\r\n        this.group.add(this.linesGroup);\r\n        this.group.add(this.labelGroup);\r\n    },\r\n\r\n    _addLabels: function(labelPoints) {\r\n        _.each(labelPoints, function(labelPoint, index) {\r\n            var label = new Konva.Text({\r\n                x: labelPoint.x,\r\n                y: labelPoint.y,\r\n                text: index+1,\r\n                id: 'number-label-' + (index+1),\r\n                fontSize: 16,\r\n                fill: 'white',\r\n                shadowColor: 'black',\r\n                shadowBlur: 4\r\n            });\r\n            label.setOffset({\r\n                x: label.getWidth() / 2,\r\n                y: label.getHeight() / 2\r\n            });\r\n            this.labelGroup.add(label);\r\n        }, this);\r\n        \r\n    },\r\n\r\n    _addLines: function(endPoints) {\r\n        var endPoints = _.map(this.collection, function(step) {\r\n            var rotation = startRotation + (eachSectionDegrees * step);\r\n            var endPoint = this.getPositionFromAngle(250, 250, rotation, 150);\r\n            return endPoint;\r\n        }, this);\r\n        var nonTonicPoints = _.rest(endPoints);\r\n        _.each(nonTonicPoints, function(endPoint) {\r\n            var attributes = this._getLineAttributes(endPoint);\r\n            var line = new Konva.Line(attributes);\r\n            line.setListening(false);\r\n            this.group.add(line);\r\n        }, this);\r\n        var tonicPoint = _.first(endPoints);\r\n        var arrowAttributes = this._getLineAttributes(tonicPoint);\r\n        arrowAttributes = _.extend(arrowAttributes, {\r\n            pointerLength: 12,\r\n            pointerWidth: 8,\r\n            radius: 10,\r\n        });\r\n        var arrow = new Konva.Arrow(arrowAttributes);\r\n        arrow.setListening(false);\r\n        this.linesGroup.add(arrow);\r\n    },\r\n\r\n    _getLineAttributes: function(endPoint) {\r\n        return {\r\n            points: [250, 250, endPoint.x, endPoint.y],\r\n            fill: 'white',\r\n            stroke: 'white',\r\n            strokeWidth: 2,\r\n            shadowColor: 'black',\r\n            shadowBlur: 3,\r\n            shadowOffset: {\r\n                x: 0,\r\n                y: 0\r\n            }  \r\n        };\r\n    },\r\n\r\n    onDestroy: function() {\r\n        this.linesGroup.destroyChildren();\r\n        this.labelGroup.destroyChildren();\r\n        this.linesGroup.destroy();\r\n        this.labelGroup.destroy();\r\n    }\r\n}); ","var KonvaView = require('../konva');\r\nvar Bus = require('bus');\r\nvar defaults = require('defaults');\r\nvar config = require('config');\r\n\r\nmodule.exports = KonvaView.extend({\r\n    currentTweens: null,\r\n\r\n\r\n    events: {\r\n    },\r\n\r\n    initialize: function(options) {\r\n        options = options || {};\r\n        this.baseLayer = options.baseLayer;\r\n        this.mouseoverLayer = options.mouseoverLayer;\r\n        this.stage = options.stage;\r\n        this.options = options;\r\n\r\n        this.currentTweens = [];\r\n\r\n        _.chain(this.mouseoverNoteGroups).values().each(function(mouseoverNoteLayer) {\r\n            this.mouseoverLayer.add(mouseoverNoteLayer);\r\n        }, this);\r\n\r\n        this.render();\r\n\r\n        Bus.Event.on('note:highlighted', this._highlightSelectedNotes, this);\r\n\r\n        Bus.Event.on('note:unhighlighted', this._unhighlightNotes, this);\r\n\r\n        Bus.Event.on('change:scale', this._changeScale, this);\r\n    },\r\n\r\n    _changeScale: function(newScale) {\r\n        this.noteGroup.children.each(function(noteNode) {\r\n            noteNode.setAttrs({\r\n                opacity: 0.1,\r\n                initialOpacity: 0.1\r\n            });\r\n        });\r\n        var positions = config.scales[newScale];\r\n        var currentTonic = Bus.Reqres.request('current:tonic');\r\n        var scale = config.chromaticScales[currentTonic];\r\n        var nodes = [];\r\n        var nodesToFind = _.map(positions, function(position) {\r\n            return '.note-' + scale.at(position).get('name');\r\n        }).join(',');\r\n        var notes = this.noteGroup.find(nodesToFind);\r\n        notes.each(function(noteNode) {\r\n            noteNode.setAttrs({\r\n                opacity: .75,\r\n                initialOpacity: .75\r\n            });\r\n        });\r\n        this.stage.draw();\r\n    },\r\n\r\n    _unhighlightNotes: function(note) {\r\n        _.each(this.currentTweens, function(tween) {\r\n            tween.destroy();\r\n        });\r\n        this.mouseoverNoteGroups[note].hide();\r\n        this.stage.draw();\r\n    },\r\n\r\n    _highlightSelectedNotes: function(note) {\r\n        _.each(this.currentTweens, function(tween) {\r\n            tween.destroy();\r\n        });\r\n\r\n        this.mouseoverNoteGroups[note].show();\r\n        this.stage.draw();\r\n    },\r\n\r\n    _drawFretboard: function(settings) {\r\n        var fretboard = new Konva.Rect({\r\n            x: settings.padding,\r\n            y: settings.padding,\r\n            width: settings.fretboardWidth,\r\n            height: settings.fretboardHeight,\r\n            fill: settings.fretboardColor\r\n        });\r\n        this.fretGroup.add(fretboard);\r\n\r\n        var fretboardBinding = new Konva.Rect({\r\n            x: settings.padding + (settings.fretWidth / 2),\r\n            y: settings.padding + settings.fretboardHeight,\r\n            width: settings.fretboardWidth,\r\n            height: settings.padding / 2,\r\n            fill: 'black'\r\n        });\r\n        this.fretGroup.add(fretboardBinding);\r\n\r\n        var topOfLastFret = {\r\n            x: settings.displayWidth - settings.padding,\r\n            y: settings.padding\r\n        };\r\n        var firstControlPoint = {\r\n            x: settings.displayWidth,\r\n            y: settings.padding\r\n        };\r\n        var secondControlPoint = {\r\n            x: settings.displayWidth,\r\n            y: settings.padding + settings.fretboardHeight\r\n        };\r\n        var bottomOfLastFret = {\r\n            x: settings.displayWidth - settings.padding,\r\n            y: settings.fretboardHeight + settings.padding\r\n        }\r\n        var fretboardEnd = new Konva.Shape({\r\n            drawFunc: function(context) {\r\n                context.beginPath();\r\n                context.moveTo(topOfLastFret.x, topOfLastFret.y);\r\n                context.bezierCurveTo(\r\n                    firstControlPoint.x, \r\n                    firstControlPoint.y, \r\n                    secondControlPoint.x, \r\n                    secondControlPoint.y, \r\n                    bottomOfLastFret.x, \r\n                    bottomOfLastFret.y\r\n                );\r\n                context.closePath();\r\n                context.fillStrokeShape(this);\r\n            },\r\n            fill: settings.fretboardColor\r\n        });\r\n\r\n        this.fretGroup.add(fretboardEnd);\r\n    },\r\n\r\n    _drawFretMarkers: function(settings) {\r\n        _.each(settings.fretMarkers, function(fretMarkerLocation) {\r\n            var fret = settings.fretDistanceMap[fretMarkerLocation];\r\n            var fretStart = (fret.distance - fret.width) + settings.padding;\r\n\r\n            var fretMarker = new Konva.Rect({\r\n                x: fretStart  + (fret.width / 4),\r\n                y: settings.padding + 20,\r\n                height: settings.fretboardHeight - 40,\r\n                width: fret.width / 2,\r\n                fill: 'black'\r\n            });\r\n            this.fretGroup.add(fretMarker);\r\n\r\n            var labelStartPosition = {\r\n                x: fretStart + (fret.width / 4),\r\n                y: settings.padding + settings.fretboardHeight + (settings.padding / 8)\r\n            };\r\n\r\n            var rectangleAttributes = {\r\n                x: labelStartPosition.x,\r\n                y: labelStartPosition.y,\r\n                width: fret.width / 2,\r\n                height: settings.padding / 4,\r\n                fill: 'white'\r\n            };\r\n\r\n            var label;\r\n            // for octive labeling, \r\n            if (fretMarkerLocation % 12 === 0) {\r\n                // make it smaller,\r\n                rectangleAttributes.width = (fret.width / 2) / 3;\r\n                label = new Konva.Rect(rectangleAttributes);\r\n                this.fretGroup.add(label);\r\n                // add another one after\r\n                rectangleAttributes.x = rectangleAttributes.x + (fret.width / 3);\r\n                label = new Konva.Rect(rectangleAttributes);\r\n                this.fretGroup.add(label);\r\n            } else {\r\n                label = new Konva.Rect(rectangleAttributes);\r\n                this.fretGroup.add(label);\r\n            }\r\n        }, this);\r\n    },\r\n\r\n    _drawFrets: function(settings) {\r\n        var fretNumbers = _.range(1, this.collection.getFrets() + 1);\r\n\r\n        _.each(fretNumbers, function(fretNumber) {\r\n            var distanceFromNut = this.collection.settings.fretDistanceMap[fretNumber];\r\n            var fret = new Konva.Rect({\r\n                x: (settings.padding + distanceFromNut.distance) - (settings.fretWidth / 2),\r\n                y: settings.padding,\r\n                width: settings.fretWidth,\r\n                height: settings.fretboardHeight,\r\n                fill: 'silver'\r\n            });\r\n            this.fretGroup.add(fret);\r\n        }, this);\r\n    },\r\n\r\n    _drawNut: function(settings) {\r\n        var nut = new Konva.Rect({\r\n            x: settings.padding - settings.nutWidth,\r\n            y: settings.padding,\r\n            // pad out the right side a bit\r\n            width: settings.nutWidth + (settings.fretWidth / 2),\r\n            height: settings.fretboardHeight,\r\n            fill: 'black'\r\n        });\r\n        this.fretGroup.add(nut);\r\n    },\r\n\r\n    _drawNotes: function(string, index, settings) {\r\n        var rootNote = _.first(string.get('notes'));\r\n        var rootNoteName = 'note-' + rootNote.get('name');\r\n        var nutNoteAttributes = {\r\n            x: 0,\r\n            y: settings.stringHeight * index + settings.padding,\r\n            width: settings.padding - settings.nutWidth,\r\n            height: settings.stringHeight,\r\n            fill: rootNote.get('color'),\r\n            name: rootNoteName,\r\n            opacity: 0.1\r\n        };\r\n        var nutNoteColor = new Konva.Rect(nutNoteAttributes);\r\n        this.noteGroup.add(nutNoteColor);\r\n\r\n        nutNoteAttributes.opacity = 1;\r\n        var nutNoteMouseoverColor = new Konva.Rect(nutNoteAttributes);\r\n        this.mouseoverNoteGroups[rootNote.get('name')].add(nutNoteMouseoverColor);\r\n\r\n        var frets = _.range(0, string.get('frets'));\r\n        _.each(frets, function(fretNumber) {\r\n            // frets are 1 based, 0 is the open string\r\n            fretNumber = fretNumber + 1;\r\n            var note = string.get('notes')[fretNumber];\r\n            var fret = this.collection.settings.fretDistanceMap[fretNumber];\r\n            var colorStartPoint = {\r\n                x: (settings.padding + fret.distance) - fret.width + (settings.fretWidth / 2),\r\n                y: settings.stringHeight * index + settings.padding\r\n            };\r\n            var rectangleAttributes = {\r\n                x: colorStartPoint.x,\r\n                y: colorStartPoint.y,\r\n                width: fret.width - settings.fretWidth,\r\n                height: settings.stringHeight,\r\n                fill: note.get('color'),\r\n                name: 'note-' + note.get('name'),\r\n                opacity: 0.1\r\n            };\r\n            var color = new Konva.Rect(rectangleAttributes);\r\n            this.noteGroup.add(color);\r\n\r\n            rectangleAttributes.opacity = 1;\r\n            rectangleAttributes.shadowEnabled = true;\r\n            rectangleAttributes.shadowBlur = 10;\r\n            rectangleAttributes.shadowColor = note.get('color');\r\n            var mouseoverColor = new Konva.Rect(rectangleAttributes);\r\n            this.mouseoverNoteGroups[note.get('name')].add(mouseoverColor);\r\n        }, this);\r\n\r\n    },\r\n\r\n    _drawString: function(string, index, settings) {\r\n        var rootNote = _.first(string.get('notes'));\r\n        var stringYPosition = (settings.stringHeight / 2) - (settings.fretWidth / 2) + (settings.stringHeight * index) + settings.padding;\r\n        var fretboardString = new Konva.Rect({\r\n            x: settings.padding,\r\n            y: stringYPosition,\r\n            width: this.collection.settings.displayWidth,\r\n            height: settings.fretWidth,\r\n            fill: rootNote.get('color'),\r\n            shadowEnabled: true,\r\n            shadowColor: 'black',\r\n            shadowBlur: 8\r\n        });\r\n        this.stringGroup.add(fretboardString);\r\n        var stringOverNut = new Konva.Rect({\r\n            x: 0,\r\n            y: stringYPosition,\r\n            width: settings.padding,\r\n            height: settings.fretWidth,\r\n            fill: rootNote.get('color'),\r\n            name: 'note-' + rootNote.get('name')\r\n        });\r\n        this.stringGroup.add(stringOverNut);\r\n    },\r\n\r\n    _addToGroup: function() {\r\n        this.fretGroup = new Konva.Group();\r\n        this.noteGroup = new Konva.Group();\r\n        this.stringGroup = new Konva.Group();\r\n\r\n        this.mouseoverNoteGroups = {};\r\n        _.each(config.notes, function(note) {\r\n            this.mouseoverNoteGroups[note] = new Konva.Group();\r\n            this.mouseoverNoteGroups[note].hide();\r\n        }, this);\r\n\r\n        var settings = this.collection.settings;\r\n\r\n        this._drawFretboard(settings);\r\n        this._drawFretMarkers(settings);\r\n        this._drawFrets(settings);\r\n        this._drawNut(settings);\r\n        this.collection.each(function(string, index) {\r\n            this._drawNotes(string, index, settings);\r\n            this._drawString(string, index, settings);\r\n        }, this);\r\n\r\n        this.group.add(this.fretGroup);\r\n        this.group.add(this.noteGroup);\r\n        this.group.add(this.stringGroup);\r\n    },\r\n\r\n    onDestroy: function() {\r\n        this.fretGroup.destroyChildren();\r\n        this.noteGroup.destroyChildren();\r\n        this.stringGroup.destroyChildren();\r\n\r\n        _.chain(this.mouseoverNoteGroups).values().each(function(mouseoverNoteGroup) {\r\n            mouseoverNoteGroup.destroyChildren();\r\n            mouseoverNoteGroup.destroy();\r\n        });\r\n\r\n        Bus.Event.off('note:highlighted', this._highlightSelectedNotes, this);\r\n        Bus.Event.off('note:unhighlighted', this._unhighlightNotes, this);\r\n        Bus.Event.off('change:scale', this._changeScale, this);\r\n\r\n    }\r\n}); ","module.exports = Backbone.KonvaView.extend({\r\n    group: null,\r\n    baseLayer: null,\r\n\r\n    el: function() {\r\n        this.group = new Konva.Group();\r\n        this._addToGroup();\r\n\r\n        return this.group;\r\n    },\r\n\r\n    render: function() {\r\n        this.baseLayer.add(this.el);\r\n\r\n        this.stage.draw();\r\n    },\r\n\r\n    destroy: function() {\r\n        this.undelegateEvents();\r\n        this.onDestroy();\r\n        this.group.destroyChildren();\r\n        this.group.destroy();\r\n    },\r\n\r\n    onDestroy: function() {\r\n\r\n    },\r\n\r\n    getPositionFromAngle: function(x, y, angle, length) {\r\n        var radians = angle * (Math.PI / 180);\r\n        return { \r\n            x: x + length * Math.cos(radians), \r\n            y: y + length * Math.sin(radians) \r\n        };\r\n    },\r\n\r\n    _addToGroup: function() {\r\n\r\n    }\r\n})","var template = require('./templates/layout');\r\nmodule.exports = Backbone.Marionette.LayoutView.extend({\r\n    tagName: 'div',\r\n    className: 'layout',\r\n    template: template,\r\n    regions: {\r\n        colorWheel: '#color-wheel-container',\r\n        instrument: '#instrument-container',\r\n        selector: '#selector'\r\n    }\r\n});","var template = require('./templates/item-selector');\r\nvar config = require('config');\r\nvar defaults = require('defaults');\r\nvar Bus = require('bus');\r\nmodule.exports = Backbone.Marionette.ItemView.extend({\r\n    tagName: 'div',\r\n    className: 'selector-container',\r\n    template: template,\r\n\r\n    ui: {\r\n        tonicSelect: 'select.tonic',\r\n        scaleSelect: 'select.scale',\r\n        instrumentSelect: 'select.instrument'\r\n    },\r\n\r\n    events: {\r\n        'change @ui.tonicSelect': 'changeTonic',\r\n        'change @ui.scaleSelect': 'changeScale',\r\n        'change @ui.instrumentSelect': 'changeInstrument'\r\n    },\r\n\r\n    initialize: function() {\r\n        Bus.Event.on('change:tonic', this._updateTonic, this);\r\n        Bus.Event.on('change:scale', this._updateScale, this);\r\n    },\r\n\r\n    changeInstrument: function(event) {\r\n        var newInstrument = $(event.currentTarget).val();\r\n        Bus.Event.trigger('change:instrument', newInstrument);\r\n    },\r\n\r\n    changeScale: function(event) {\r\n        var newScale = $(event.currentTarget).val();\r\n        Bus.Event.trigger('change:scale', newScale);\r\n    },\r\n\r\n    changeTonic: function(event) {\r\n        var newTonic = $(event.currentTarget).val();\r\n        Bus.Event.trigger('change:tonic', newTonic);\r\n    },\r\n\r\n    onRender: function() {\r\n        Bus.Event.trigger('change:instrument', defaults.instrument);\r\n        Bus.Event.trigger('change:scale', defaults.scale);\r\n        Bus.Event.trigger('change:tonic', defaults.tonic);\r\n    },\r\n\r\n    serializeData: function() {\r\n        return {\r\n            notes: config.notes,\r\n            scales: _.keys(config.scales),\r\n            instruments: _.keys(config.instruments)\r\n        };\r\n    },\r\n\r\n    _updateTonic: function(newTonic) {\r\n        this.ui.tonicSelect.val(newTonic);\r\n    },\r\n\r\n    _updateScale: function(newScale) {\r\n        this.ui.scaleSelect.val(newScale);\r\n    },\r\n\r\n    onDestroy: function() {\r\n        Bus.Event.off('change:tonic', this._updateTonic, this);\r\n        Bus.Event.off('change:scale', this._updateScale, this);\r\n    }\r\n});","var __templateData = Handlebars.template({\"1\":function(depth0,helpers,partials,data) {\n  var lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return \"    <option value=\\\"\"\n    + escapeExpression(lambda(depth0, depth0))\n    + \"\\\">\"\n    + escapeExpression(lambda(depth0, depth0))\n    + \"</option>\\r\\n\";\n},\"compiler\":[6,\">= 2.0.0-beta.1\"],\"main\":function(depth0,helpers,partials,data) {\n  var stack1, buffer = \"<select class=\\\"tonic\\\">\\r\\n\";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.notes : depth0), {\"name\":\"each\",\"hash\":{},\"fn\":this.program(1, data),\"inverse\":this.noop,\"data\":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += \"</select>\\r\\n\\r\\n<select class=\\\"scale\\\">\\r\\n\";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.scales : depth0), {\"name\":\"each\",\"hash\":{},\"fn\":this.program(1, data),\"inverse\":this.noop,\"data\":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += \"</select>\\r\\n\\r\\n<select class=\\\"instrument\\\">\\r\\n\";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.instruments : depth0), {\"name\":\"each\",\"hash\":{},\"fn\":this.program(1, data),\"inverse\":this.noop,\"data\":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + \"</select>\";\n},\"useData\":true});\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var __templateData = Handlebars.template({\"compiler\":[6,\">= 2.0.0-beta.1\"],\"main\":function(depth0,helpers,partials,data) {\n  return \"<div id=\\\"selector\\\"></div>\\r\\n<div id=\\\"color-wheel-container\\\"></div>\\r\\n<div id=\\\"instrument-container\\\"></div>\";\n  },\"useData\":true});\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}"]}