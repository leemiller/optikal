{"version":3,"sources":["test/vendor/scripts/chai-1.1.0.js","test/vendor/scripts/mocha-2.1.0.js"],"names":[],"mappingsvfile":"www\\test\\javascripts\\test-vendor.js","sourcesContent":["!function (name, definition) {\r\n  if (typeof define == 'function' && typeof define.amd  == 'object') define(definition);\r\n  else this[name] = definition();\r\n}('chai', function () {\r\n\r\n// CommonJS require()\r\n\r\nfunction require(p){\r\n    var path = require.resolve(p)\r\n      , mod = require.modules[path];\r\n    if (!mod) throw new Error('failed to require \"' + p + '\"');\r\n    if (!mod.exports) {\r\n      mod.exports = {};\r\n      mod.call(mod.exports, mod, mod.exports, require.relative(path));\r\n    }\r\n    return mod.exports;\r\n  }\r\n\r\nrequire.modules = {};\r\n\r\nrequire.resolve = function (path){\r\n    var orig = path\r\n      , reg = path + '.js'\r\n      , index = path + '/index.js';\r\n    return require.modules[reg] && reg\r\n      || require.modules[index] && index\r\n      || orig;\r\n  };\r\n\r\nrequire.register = function (path, fn){\r\n    require.modules[path] = fn;\r\n  };\r\n\r\nrequire.relative = function (parent) {\r\n    return function(p){\r\n      if ('.' != p[0]) return require(p);\r\n\r\n      var path = parent.split('/')\r\n        , segs = p.split('/');\r\n      path.pop();\r\n\r\n      for (var i = 0; i < segs.length; i++) {\r\n        var seg = segs[i];\r\n        if ('..' == seg) path.pop();\r\n        else if ('.' != seg) path.push(seg);\r\n      }\r\n\r\n      return require(path.join('/'));\r\n    };\r\n  };\r\n\r\n\r\nrequire.register(\"chai.js\", function(module, exports, require){\r\n/*!\r\n * chai\r\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\nvar used = []\r\n  , exports = module.exports = {};\r\n\r\n/*!\r\n * Chai version\r\n */\r\n\r\nexports.version = '1.1.0';\r\n\r\n/*!\r\n * Primary `Assertion` prototype\r\n */\r\n\r\nexports.Assertion = require('./chai/assertion');\r\n\r\n/*!\r\n * Assertion Error\r\n */\r\n\r\nexports.AssertionError = require('./chai/browser/error');\r\n\r\n/*!\r\n * Utils for plugins (not exported)\r\n */\r\n\r\nvar util = require('./chai/utils');\r\n\r\n/**\r\n * # .use(function)\r\n *\r\n * Provides a way to extend the internals of Chai\r\n *\r\n * @param {Function}\r\n * @returns {this} for chaining\r\n * @api public\r\n */\r\n\r\nexports.use = function (fn) {\r\n  if (!~used.indexOf(fn)) {\r\n    fn(this, util);\r\n    used.push(fn);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * Core Assertions\r\n */\r\n\r\nvar core = require('./chai/core/assertions');\r\nexports.use(core);\r\n\r\n/*!\r\n * Expect interface\r\n */\r\n\r\nvar expect = require('./chai/interface/expect');\r\nexports.use(expect);\r\n\r\n/*!\r\n * Should interface\r\n */\r\n\r\nvar should = require('./chai/interface/should');\r\nexports.use(should);\r\n\r\n/*!\r\n * Assert interface\r\n */\r\n\r\nvar assert = require('./chai/interface/assert');\r\nexports.use(assert);\r\n\r\n}); // module: chai.js\r\n\r\nrequire.register(\"chai/assertion.js\", function(module, exports, require){\r\n/*!\r\n * chai\r\n * http://chaijs.com\r\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/*!\r\n * Module dependencies.\r\n */\r\n\r\nvar AssertionError = require('./browser/error')\r\n  , util = require('./utils')\r\n  , flag = util.flag;\r\n\r\n/*!\r\n * Module export.\r\n */\r\n\r\nmodule.exports = Assertion;\r\n\r\n\r\n/*!\r\n * Assertion Constructor\r\n *\r\n * Creates object for chaining.\r\n *\r\n * @api private\r\n */\r\n\r\nfunction Assertion (obj, msg, stack) {\r\n  flag(this, 'ssfi', stack || arguments.callee);\r\n  flag(this, 'object', obj);\r\n  flag(this, 'message', msg);\r\n}\r\n\r\n/*!\r\n  * ### Assertion.includeStack\r\n  *\r\n  * User configurable property, influences whether stack trace\r\n  * is included in Assertion error message. Default of false\r\n  * suppresses stack trace in the error message\r\n  *\r\n  *     Assertion.includeStack = true;  // enable stack on error\r\n  *\r\n  * @api public\r\n  */\r\n\r\nAssertion.includeStack = false;\r\n\r\nAssertion.addProperty = function (name, fn) {\r\n  util.addProperty(this.prototype, name, fn);\r\n};\r\n\r\nAssertion.addMethod = function (name, fn) {\r\n  util.addMethod(this.prototype, name, fn);\r\n};\r\n\r\nAssertion.addChainableMethod = function (name, fn, chainingBehavior) {\r\n  util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\r\n};\r\n\r\nAssertion.overwriteProperty = function (name, fn) {\r\n  util.overwriteProperty(this.prototype, name, fn);\r\n};\r\n\r\nAssertion.overwriteMethod = function (name, fn) {\r\n  util.overwriteMethod(this.prototype, name, fn);\r\n};\r\n\r\n/*!\r\n * ### .assert(expression, message, negateMessage, expected, actual)\r\n *\r\n * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\r\n *\r\n * @name assert\r\n * @param {Philosophical} expression to be tested\r\n * @param {String} message to display if fails\r\n * @param {String} negatedMessage to display if negated expression fails\r\n * @param {Mixed} expected value (remember to check for negation)\r\n * @param {Mixed} actual (optional) will default to `this.obj`\r\n * @api private\r\n */\r\n\r\nAssertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual) {\r\n  var msg = util.getMessage(this, arguments)\r\n    , actual = util.getActual(this, arguments)\r\n    , ok = util.test(this, arguments);\r\n\r\n  if (!ok) {\r\n    throw new AssertionError({\r\n        message: msg\r\n      , actual: actual\r\n      , expected: expected\r\n      , stackStartFunction: (Assertion.includeStack) ? this.assert : flag(this, 'ssfi')\r\n    });\r\n  }\r\n};\r\n\r\n/*!\r\n * ### ._obj\r\n *\r\n * Quick reference to stored `actual` value for plugin developers.\r\n *\r\n * @api private\r\n */\r\n\r\nObject.defineProperty(Assertion.prototype, '_obj',\r\n  { get: function () {\r\n      return flag(this, 'object');\r\n    }\r\n  , set: function (val) {\r\n      flag(this, 'object', val);\r\n    }\r\n});\r\n\r\n}); // module: chai/assertion.js\r\n\r\nrequire.register(\"chai/browser/error.js\", function(module, exports, require){\r\n/*!\r\n * chai\r\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\nmodule.exports = AssertionError;\r\n\r\nfunction AssertionError (options) {\r\n  options = options || {};\r\n  this.message = options.message;\r\n  this.actual = options.actual;\r\n  this.expected = options.expected;\r\n  this.operator = options.operator;\r\n\r\n  if (options.stackStartFunction && Error.captureStackTrace) {\r\n    var stackStartFunction = options.stackStartFunction;\r\n    Error.captureStackTrace(this, stackStartFunction);\r\n  }\r\n}\r\n\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = 'AssertionError';\r\nAssertionError.prototype.constructor = AssertionError;\r\n\r\nAssertionError.prototype.toString = function() {\r\n  return this.message;\r\n};\r\n\r\n}); // module: chai/browser/error.js\r\n\r\nrequire.register(\"chai/core/assertions.js\", function(module, exports, require){\r\n/*!\r\n * chai\r\n * http://chaijs.com\r\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\nmodule.exports = function (chai, _) {\r\n  var Assertion = chai.Assertion\r\n    , toString = Object.prototype.toString\r\n    , flag = _.flag;\r\n\r\n  /**\r\n   * ### Language Chains\r\n   *\r\n   * The following are provide as chainable getters to\r\n   * improve the readability of your assertions. They\r\n   * do not provide an testing capability unless they\r\n   * have been overwritten by a plugin.\r\n   *\r\n   * **Chains**\r\n   *\r\n   * - to\r\n   * - be\r\n   * - been\r\n   * - is\r\n   * - that\r\n   * - and\r\n   * - have\r\n   * - with\r\n   *\r\n   * @name language chains\r\n   * @api public\r\n   */\r\n\r\n  [ 'to', 'be', 'been'\r\n  , 'is', 'and', 'have'\r\n  , 'with', 'that' ].forEach(function (chain) {\r\n    Assertion.addProperty(chain, function () {\r\n      return this;\r\n    });\r\n  });\r\n\r\n  /**\r\n   * ### .not\r\n   *\r\n   * Negates any of assertions following in the chain.\r\n   *\r\n   *     expect(foo).to.not.equal('bar');\r\n   *     expect(goodFn).to.not.throw(Error);\r\n   *     expect({ foo: 'baz' }).to.have.property('foo')\r\n   *       .and.not.equal('bar');\r\n   *\r\n   * @name not\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addProperty('not', function () {\r\n    flag(this, 'negate', true);\r\n  });\r\n\r\n  /**\r\n   * ### .deep\r\n   *\r\n   * Sets the `deep` flag, later used by the `equal` and\r\n   * `property` assertions.\r\n   *\r\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\r\n   *     expect({ foo: { bar: { baz: 'quux' } } })\r\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\r\n   *\r\n   * @name deep\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addProperty('deep', function () {\r\n    flag(this, 'deep', true);\r\n  });\r\n\r\n  /**\r\n   * ### .a(type)\r\n   *\r\n   * The `a` and `an` assertions are aliases that can be\r\n   * used either as language chains or to assert a value's\r\n   * type (as revealed by `Object.prototype.toString`).\r\n   *\r\n   *     // typeof\r\n   *     expect('test').to.be.a('string');\r\n   *     expect({ foo: 'bar' }).to.be.an('object');\r\n   *     expect(null).to.be.a('null');\r\n   *     expect(undefined).to.be.an('undefined');\r\n   *\r\n   *     // language chain\r\n   *     expect(foo).to.be.an.instanceof(Foo);\r\n   *\r\n   * @name a\r\n   * @alias an\r\n   * @param {String} type\r\n   * @api public\r\n   */\r\n\r\n  function an(type) {\r\n    var obj = flag(this, 'object')\r\n      , klassStart = type.charAt(0).toUpperCase()\r\n      , klass = klassStart + type.slice(1)\r\n      , article = ~[ 'A', 'E', 'I', 'O', 'U' ].indexOf(klassStart) ? 'an ' : 'a ';\r\n\r\n    this.assert(\r\n        '[object ' + klass + ']' === toString.call(obj)\r\n      , 'expected #{this} to be ' + article + type\r\n      , 'expected #{this} not to be ' + article + type\r\n    );\r\n  }\r\n\r\n  Assertion.addChainableMethod('an', an);\r\n  Assertion.addChainableMethod('a', an);\r\n\r\n  /**\r\n   * ### .include(value)\r\n   *\r\n   * The `include` and `contain` assertions can be used as either property\r\n   * based language chains or as methods to assert the inclusion of an object\r\n   * in an array or a substring in a string. When used as language chains,\r\n   * they toggle the `contain` flag for the `keys` assertion.\r\n   *\r\n   *     expect([1,2,3]).to.include(2);\r\n   *     expect('foobar').to.contain('foo');\r\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\r\n   *\r\n   * @name include\r\n   * @alias contain\r\n   * @param {Object|String|Number} obj\r\n   * @api public\r\n   */\r\n\r\n  function includeChainingBehavior () {\r\n    flag(this, 'contains', true);\r\n  }\r\n\r\n  function include (val) {\r\n    var obj = flag(this, 'object')\r\n    this.assert(\r\n        ~obj.indexOf(val)\r\n      , 'expected #{this} to include ' + _.inspect(val)\r\n      , 'expected #{this} to not include ' + _.inspect(val));\r\n  }\r\n\r\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\r\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\r\n\r\n  /**\r\n   * ### .ok\r\n   *\r\n   * Asserts that the target is truthy.\r\n   *\r\n   *     expect('everthing').to.be.ok;\r\n   *     expect(1).to.be.ok;\r\n   *     expect(false).to.not.be.ok;\r\n   *     expect(undefined).to.not.be.ok;\r\n   *     expect(null).to.not.be.ok;\r\n   *\r\n   * @name ok\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addProperty('ok', function () {\r\n    this.assert(\r\n        flag(this, 'object')\r\n      , 'expected #{this} to be truthy'\r\n      , 'expected #{this} to be falsy');\r\n  });\r\n\r\n  /**\r\n   * ### .true\r\n   *\r\n   * Asserts that the target is `true`.\r\n   *\r\n   *     expect(true).to.be.true;\r\n   *     expect(1).to.not.be.true;\r\n   *\r\n   * @name true\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addProperty('true', function () {\r\n    this.assert(\r\n        true === flag(this, 'object')\r\n      , 'expected #{this} to be true'\r\n      , 'expected #{this} to be false'\r\n      , this.negate ? false : true\r\n    );\r\n  });\r\n\r\n  /**\r\n   * ### .false\r\n   *\r\n   * Asserts that the target is `false`.\r\n   *\r\n   *     expect(false).to.be.false;\r\n   *     expect(0).to.not.be.false;\r\n   *\r\n   * @name false\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addProperty('false', function () {\r\n    this.assert(\r\n        false === flag(this, 'object')\r\n      , 'expected #{this} to be false'\r\n      , 'expected #{this} to be true'\r\n      , this.negate ? true : false\r\n    );\r\n  });\r\n\r\n  /**\r\n   * ### .null\r\n   *\r\n   * Asserts that the target is `null`.\r\n   *\r\n   *     expect(null).to.be.null;\r\n   *     expect(undefined).not.to.be.null;\r\n   *\r\n   * @name null\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addProperty('null', function () {\r\n    this.assert(\r\n        null === flag(this, 'object')\r\n      , 'expected #{this} to be null'\r\n      , 'expected #{this} not to be null'\r\n    );\r\n  });\r\n\r\n  /**\r\n   * ### .undefined\r\n   *\r\n   * Asserts that the target is `undefined`.\r\n   *\r\n   *      expect(undefined).to.be.undefined;\r\n   *      expect(null).to.not.be.undefined;\r\n   *\r\n   * @name undefined\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addProperty('undefined', function () {\r\n    this.assert(\r\n        undefined === flag(this, 'object')\r\n      , 'expected #{this} to be undefined'\r\n      , 'expected #{this} not to be undefined'\r\n    );\r\n  });\r\n\r\n  /**\r\n   * ### .exist\r\n   *\r\n   * Asserts that the target is neither `null` nor `undefined`.\r\n   *\r\n   *     var foo = 'hi'\r\n   *       , bar = null\r\n   *       , baz;\r\n   *\r\n   *     expect(foo).to.exist;\r\n   *     expect(bar).to.not.exist;\r\n   *     expect(baz).to.not.exist;\r\n   *\r\n   * @name exist\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addProperty('exist', function () {\r\n    this.assert(\r\n        null != flag(this, 'object')\r\n      , 'expected #{this} to exist'\r\n      , 'expected #{this} to not exist'\r\n    );\r\n  });\r\n\r\n\r\n  /**\r\n   * ### .empty\r\n   *\r\n   * Asserts that the target's length is `0`. For arrays, it checks\r\n   * the `length` property. For objects, it gets the count of\r\n   * enumerable keys.\r\n   *\r\n   *     expect([]).to.be.empty;\r\n   *     expect('').to.be.empty;\r\n   *     expect({}).to.be.empty;\r\n   *\r\n   * @name empty\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addProperty('empty', function () {\r\n    var obj = flag(this, 'object')\r\n      , expected = obj;\r\n\r\n    if (Array.isArray(obj) || 'string' === typeof object) {\r\n      expected = obj.length;\r\n    } else if (typeof obj === 'object') {\r\n      expected = Object.keys(obj).length;\r\n    }\r\n\r\n    this.assert(\r\n        !expected\r\n      , 'expected #{this} to be empty'\r\n      , 'expected #{this} not to be empty'\r\n    );\r\n  });\r\n\r\n  /**\r\n   * ### .arguments\r\n   *\r\n   * Asserts that the target is an arguments object.\r\n   *\r\n   *     function test () {\r\n   *       expect(arguments).to.be.arguments;\r\n   *     }\r\n   *\r\n   * @name arguments\r\n   * @alias Arguments\r\n   * @api public\r\n   */\r\n\r\n  function checkArguments () {\r\n    var obj = flag(this, 'object')\r\n      , type = Object.prototype.toString.call(obj);\r\n    this.assert(\r\n        '[object Arguments]' === type\r\n      , 'expected #{this} to be arguments but got ' + type\r\n      , 'expected #{this} to not be arguments'\r\n    );\r\n  }\r\n\r\n  Assertion.addProperty('arguments', checkArguments);\r\n  Assertion.addProperty('Arguments', checkArguments);\r\n\r\n  /**\r\n   * ### .equal(value)\r\n   *\r\n   * Asserts that the target is strictly equal (`===`) to `value`.\r\n   * Alternately, if the `deep` flag is set, asserts that\r\n   * the target is deeply equal to `value`.\r\n   *\r\n   *     expect('hello').to.equal('hello');\r\n   *     expect(42).to.equal(42);\r\n   *     expect(1).to.not.equal(true);\r\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\r\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\r\n   *\r\n   * @name equal\r\n   * @alias eq\r\n   * @alias deep.equal\r\n   * @param {Mixed} value\r\n   * @api public\r\n   */\r\n\r\n  function assertEqual (val) {\r\n    var obj = flag(this, 'object');\r\n    if (flag(this, 'deep')) {\r\n      return this.eql(val);\r\n    } else {\r\n      this.assert(\r\n          val === obj\r\n        , 'expected #{this} to equal #{exp}'\r\n        , 'expected #{this} to not equal #{exp}'\r\n        , val\r\n      );\r\n    }\r\n  }\r\n\r\n  Assertion.addMethod('equal', assertEqual);\r\n  Assertion.addMethod('eq', assertEqual);\r\n\r\n  /**\r\n   * ### .eql(value)\r\n   *\r\n   * Asserts that the target is deeply equal to `value`.\r\n   *\r\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\r\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\r\n   *\r\n   * @name eql\r\n   * @param {Mixed} value\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addMethod('eql', function (obj) {\r\n    this.assert(\r\n        _.eql(obj, flag(this, 'object'))\r\n      , 'expected #{this} to deeply equal #{exp}'\r\n      , 'expected #{this} to not deeply equal #{exp}'\r\n      , obj\r\n    );\r\n  });\r\n\r\n  /**\r\n   * ### .above(value)\r\n   *\r\n   * Asserts that the target is greater than `value`.\r\n   *\r\n   *     expect(10).to.be.above(5);\r\n   *\r\n   * Can also be used in conjunction with `length` to\r\n   * assert a minimum length. The benefit being a\r\n   * more informative error message than if the length\r\n   * was supplied directly.\r\n   *\r\n   *     expect('foo').to.have.length.above(2);\r\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\r\n   *\r\n   * @name above\r\n   * @alias gt\r\n   * @alias greaterThan\r\n   * @param {Number} value\r\n   * @api public\r\n   */\r\n\r\n  function assertAbove (n) {\r\n    var obj = flag(this, 'object');\r\n    if (flag(this, 'doLength')) {\r\n      new Assertion(obj).to.have.property('length');\r\n      var len = obj.length;\r\n      this.assert(\r\n          len > n\r\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\r\n        , 'expected #{this} to not have a length above #{exp}'\r\n        , n\r\n        , len\r\n      );\r\n    } else {\r\n      this.assert(\r\n          obj > n\r\n        , 'expected #{this} to be above ' + n\r\n        , 'expected #{this} to be below ' + n\r\n      );\r\n    }\r\n  }\r\n\r\n  Assertion.addMethod('above', assertAbove);\r\n  Assertion.addMethod('gt', assertAbove);\r\n  Assertion.addMethod('greaterThan', assertAbove);\r\n\r\n  /**\r\n   * ### .below(value)\r\n   *\r\n   * Asserts that the target is less than `value`.\r\n   *\r\n   *     expect(5).to.be.below(10);\r\n   *\r\n   * Can also be used in conjunction with `length` to\r\n   * assert a maximum length. The benefit being a\r\n   * more informative error message than if the length\r\n   * was supplied directly.\r\n   *\r\n   *     expect('foo').to.have.length.below(4);\r\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\r\n   *\r\n   * @name below\r\n   * @alias lt\r\n   * @alias lessThan\r\n   * @param {Number} value\r\n   * @api public\r\n   */\r\n\r\n  function assertBelow (n) {\r\n    var obj = flag(this, 'object');\r\n    if (flag(this, 'doLength')) {\r\n      new Assertion(obj).to.have.property('length');\r\n      var len = obj.length;\r\n      this.assert(\r\n          len < n\r\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\r\n        , 'expected #{this} to not have a length below #{exp}'\r\n        , n\r\n        , len\r\n      );\r\n    } else {\r\n      this.assert(\r\n          obj < n\r\n        , 'expected #{this} to be below ' + n\r\n        , 'expected #{this} to be above ' + n\r\n      );\r\n    }\r\n  }\r\n\r\n  Assertion.addMethod('below', assertBelow);\r\n  Assertion.addMethod('lt', assertBelow);\r\n  Assertion.addMethod('lessThan', assertBelow);\r\n\r\n  /**\r\n   * ### .within(start, finish)\r\n   *\r\n   * Asserts that the target is within a range.\r\n   *\r\n   *     expect(7).to.be.within(5,10);\r\n   *\r\n   * Can also be used in conjunction with `length` to\r\n   * assert a length range. The benefit being a\r\n   * more informative error message than if the length\r\n   * was supplied directly.\r\n   *\r\n   *     expect('foo').to.have.length.within(2,4);\r\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\r\n   *\r\n   * @name within\r\n   * @param {Number} start lowerbound inclusive\r\n   * @param {Number} finish upperbound inclusive\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addMethod('within', function (start, finish) {\r\n    var obj = flag(this, 'object')\r\n      , range = start + '..' + finish;\r\n    if (flag(this, 'doLength')) {\r\n      new Assertion(obj).to.have.property('length');\r\n      var len = obj.length;\r\n      this.assert(\r\n          len >= start && len <= finish\r\n        , 'expected #{this} to have a length within ' + range\r\n        , 'expected #{this} to not have a length within ' + range\r\n      );\r\n    } else {\r\n      this.assert(\r\n          obj >= start && obj <= finish\r\n        , 'expected #{this} to be within ' + range\r\n        , 'expected #{this} to not be within ' + range\r\n      );\r\n    }\r\n  });\r\n\r\n  /**\r\n   * ### .instanceof(constructor)\r\n   *\r\n   * Asserts that the target is an instance of `constructor`.\r\n   *\r\n   *     var Tea = function (name) { this.name = name; }\r\n   *       , Chai = new Tea('chai');\r\n   *\r\n   *     expect(Chai).to.be.an.instanceof(Tea);\r\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\r\n   *\r\n   * @name instanceof\r\n   * @param {Constructor} constructor\r\n   * @alias instanceOf\r\n   * @api public\r\n   */\r\n\r\n  function assertInstanceOf (constructor) {\r\n    var name = _.getName(constructor);\r\n    this.assert(\r\n        flag(this, 'object') instanceof constructor\r\n      , 'expected #{this} to be an instance of ' + name\r\n      , 'expected #{this} to not be an instance of ' + name\r\n    );\r\n  };\r\n\r\n  Assertion.addMethod('instanceof', assertInstanceOf);\r\n  Assertion.addMethod('instanceOf', assertInstanceOf);\r\n\r\n  /**\r\n   * ### .property(name, [value])\r\n   *\r\n   * Asserts that the target has a property `name`, optionally asserting that\r\n   * the value of that property is strictly equal to  `value`.\r\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\r\n   * references into objects and arrays.\r\n   *\r\n   *     // simple referencing\r\n   *     var obj = { foo: 'bar' };\r\n   *     expect(obj).to.have.property('foo');\r\n   *     expect(obj).to.have.property('foo', 'bar');\r\n   *\r\n   *     // deep referencing\r\n   *     var deepObj = {\r\n   *         green: { tea: 'matcha' }\r\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\r\n   *     };\r\n\r\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\r\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\r\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\r\n   *\r\n   * You can also use an array as the starting point of a `deep.property`\r\n   * assertion, or traverse nested arrays.\r\n   *\r\n   *     var arr = [\r\n   *         [ 'chai', 'matcha', 'konacha' ]\r\n   *       , [ { tea: 'chai' }\r\n   *         , { tea: 'matcha' }\r\n   *         , { tea: 'konacha' } ]\r\n   *     ];\r\n   *\r\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\r\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\r\n   *\r\n   * Furthermore, `property` changes the subject of the assertion\r\n   * to be the value of that property from the original object. This\r\n   * permits for further chainable assertions on that property.\r\n   *\r\n   *     expect(obj).to.have.property('foo')\r\n   *       .that.is.a('string');\r\n   *     expect(deepObj).to.have.property('green')\r\n   *       .that.is.an('object')\r\n   *       .that.deep.equals({ tea: 'matcha' });\r\n   *     expect(deepObj).to.have.property('teas')\r\n   *       .that.is.an('array')\r\n   *       .with.deep.property('[2]')\r\n   *         .that.deep.equals({ tea: 'konacha' });\r\n   *\r\n   * @name property\r\n   * @alias deep.property\r\n   * @param {String} name\r\n   * @param {Mixed} value (optional)\r\n   * @returns value of property for chaining\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addMethod('property', function (name, val) {\r\n    var obj = flag(this, 'object')\r\n      , value = flag(this, 'deep') ? _.getPathValue(name, obj) : obj[name]\r\n      , descriptor = flag(this, 'deep') ? 'deep property ' : 'property '\r\n      , negate = flag(this, 'negate');\r\n\r\n    if (negate && undefined !== val) {\r\n      if (undefined === value) {\r\n        throw new Error(_.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\r\n      }\r\n    } else {\r\n      this.assert(\r\n          undefined !== value\r\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\r\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\r\n    }\r\n\r\n    if (undefined !== val) {\r\n      this.assert(\r\n          val === value\r\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\r\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\r\n        , val\r\n        , value\r\n      );\r\n    }\r\n\r\n    flag(this, 'object', value);\r\n  });\r\n\r\n\r\n  /**\r\n   * ### .ownProperty(name)\r\n   *\r\n   * Asserts that the target has an own property `name`.\r\n   *\r\n   *     expect('test').to.have.ownProperty('length');\r\n   *\r\n   * @name ownProperty\r\n   * @alias haveOwnProperty\r\n   * @param {String} name\r\n   * @api public\r\n   */\r\n\r\n  function assertOwnProperty (name) {\r\n    var obj = flag(this, 'object');\r\n    this.assert(\r\n        obj.hasOwnProperty(name)\r\n      , 'expected #{this} to have own property ' + _.inspect(name)\r\n      , 'expected #{this} to not have own property ' + _.inspect(name)\r\n    );\r\n  }\r\n\r\n  Assertion.addMethod('ownProperty', assertOwnProperty);\r\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\r\n\r\n  /**\r\n   * ### .length(value)\r\n   *\r\n   * Asserts that the target's `length` property has\r\n   * the expected value.\r\n   *\r\n   *     expect([ 1, 2, 3]).to.have.length(3);\r\n   *     expect('foobar').to.have.length(6);\r\n   *\r\n   * Can also be used as a chain precursor to a value\r\n   * comparison for the length property.\r\n   *\r\n   *     expect('foo').to.have.length.above(2);\r\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\r\n   *     expect('foo').to.have.length.below(4);\r\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\r\n   *     expect('foo').to.have.length.within(2,4);\r\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\r\n   *\r\n   * @name length\r\n   * @alias lengthOf\r\n   * @param {Number} length\r\n   * @api public\r\n   */\r\n\r\n  function assertLengthChain () {\r\n    flag(this, 'doLength', true);\r\n  }\r\n\r\n  function assertLength (n) {\r\n    var obj = flag(this, 'object');\r\n    new Assertion(obj).to.have.property('length');\r\n    var len = obj.length;\r\n\r\n    this.assert(\r\n        len == n\r\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\r\n      , 'expected #{this} to not have a length of #{act}'\r\n      , n\r\n      , len\r\n    );\r\n  }\r\n\r\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\r\n  Assertion.addMethod('lengthOf', assertLength, assertLengthChain);\r\n\r\n  /**\r\n   * ### .match(regexp)\r\n   *\r\n   * Asserts that the target matches a regular expression.\r\n   *\r\n   *     expect('foobar').to.match(/^foo/);\r\n   *\r\n   * @name match\r\n   * @param {RegExp} RegularExpression\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addMethod('match', function (re) {\r\n    var obj = flag(this, 'object');\r\n    this.assert(\r\n        re.exec(obj)\r\n      , 'expected #{this} to match ' + re\r\n      , 'expected #{this} not to match ' + re\r\n    );\r\n  });\r\n\r\n  /**\r\n   * ### .string(string)\r\n   *\r\n   * Asserts that the string target contains another string.\r\n   *\r\n   *     expect('foobar').to.have.string('bar');\r\n   *\r\n   * @name string\r\n   * @param {String} string\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addMethod('string', function (str) {\r\n    var obj = flag(this, 'object');\r\n    new Assertion(obj).is.a('string');\r\n\r\n    this.assert(\r\n        ~obj.indexOf(str)\r\n      , 'expected #{this} to contain ' + _.inspect(str)\r\n      , 'expected #{this} to not contain ' + _.inspect(str)\r\n    );\r\n  });\r\n\r\n\r\n  /**\r\n   * ### .keys(key1, [key2], [...])\r\n   *\r\n   * Asserts that the target has exactly the given keys, or\r\n   * asserts the inclusion of some keys when using the\r\n   * `include` or `contain` modifiers.\r\n   *\r\n   *     expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);\r\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');\r\n   *\r\n   * @name keys\r\n   * @alias key\r\n   * @param {String...|Array} keys\r\n   * @api public\r\n   */\r\n\r\n  function assertKeys (keys) {\r\n    var obj = flag(this, 'object')\r\n      , str\r\n      , ok = true;\r\n\r\n    keys = keys instanceof Array\r\n      ? keys\r\n      : Array.prototype.slice.call(arguments);\r\n\r\n    if (!keys.length) throw new Error('keys required');\r\n\r\n    var actual = Object.keys(obj)\r\n      , len = keys.length;\r\n\r\n    // Inclusion\r\n    ok = keys.every(function(key){\r\n      return ~actual.indexOf(key);\r\n    });\r\n\r\n    // Strict\r\n    if (!flag(this, 'negate') && !flag(this, 'contains')) {\r\n      ok = ok && keys.length == actual.length;\r\n    }\r\n\r\n    // Key string\r\n    if (len > 1) {\r\n      keys = keys.map(function(key){\r\n        return _.inspect(key);\r\n      });\r\n      var last = keys.pop();\r\n      str = keys.join(', ') + ', and ' + last;\r\n    } else {\r\n      str = _.inspect(keys[0]);\r\n    }\r\n\r\n    // Form\r\n    str = (len > 1 ? 'keys ' : 'key ') + str;\r\n\r\n    // Have / include\r\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\r\n\r\n    // Assertion\r\n    this.assert(\r\n        ok\r\n      , 'expected #{this} to ' + str\r\n      , 'expected #{this} to not ' + str\r\n    );\r\n  }\r\n\r\n  Assertion.addMethod('keys', assertKeys);\r\n  Assertion.addMethod('key', assertKeys);\r\n\r\n  /**\r\n   * ### .throw(constructor)\r\n   *\r\n   * Asserts that the function target will throw a specific error, or specific type of error\r\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\r\n   * for the error's message.\r\n   *\r\n   *     var err = new ReferenceError('This is a bad function.');\r\n   *     var fn = function () { throw err; }\r\n   *     expect(fn).to.throw(ReferenceError);\r\n   *     expect(fn).to.throw(Error);\r\n   *     expect(fn).to.throw(/bad function/);\r\n   *     expect(fn).to.not.throw('good function');\r\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\r\n   *     expect(fn).to.throw(err);\r\n   *     expect(fn).to.not.throw(new RangeError('Out of range.'));\r\n   *\r\n   * Please note that when a throw expectation is negated, it will check each\r\n   * parameter independently, starting with error constructor type. The appropriate way\r\n   * to check for the existence of a type of error but for a message that does not match\r\n   * is to use `and`.\r\n   *\r\n   *     expect(fn).to.throw(ReferenceError)\r\n   *        .and.not.throw(/good function/);\r\n   *\r\n   * @name throw\r\n   * @alias throws\r\n   * @alias Throw\r\n   * @param {ErrorConstructor} constructor\r\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\r\n   * @api public\r\n   */\r\n\r\n  function assertThrows (constructor, msg) {\r\n    var obj = flag(this, 'object');\r\n    new Assertion(obj).is.a('function');\r\n\r\n    var thrown = false\r\n      , desiredError = null\r\n      , name = null;\r\n\r\n    if (arguments.length === 0) {\r\n      msg = null;\r\n      constructor = null;\r\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\r\n      msg = constructor;\r\n      constructor = null;\r\n    } else if (constructor && constructor instanceof Error) {\r\n      desiredError = constructor;\r\n      constructor = null;\r\n      msg = null;\r\n    } else if (typeof constructor === 'function') {\r\n      name = (new constructor()).name;\r\n    } else {\r\n      constructor = null;\r\n    }\r\n\r\n    try {\r\n      obj();\r\n    } catch (err) {\r\n      // first, check desired error\r\n      if (desiredError) {\r\n        this.assert(\r\n            err === desiredError\r\n          , 'expected #{this} to throw ' + _.inspect(desiredError) + ' but ' + _.inspect(err) + ' was thrown'\r\n          , 'expected #{this} to not throw ' + _.inspect(desiredError)\r\n        );\r\n        return this;\r\n      }\r\n      // next, check constructor\r\n      if (constructor) {\r\n        this.assert(\r\n            err instanceof constructor\r\n          , 'expected #{this} to throw ' + name + ' but a ' + err.name + ' was thrown'\r\n          , 'expected #{this} to not throw ' + name );\r\n        if (!msg) return this;\r\n      }\r\n      // next, check message\r\n      if (err.message && msg && msg instanceof RegExp) {\r\n        this.assert(\r\n            msg.exec(err.message)\r\n          , 'expected #{this} to throw error matching ' + msg + ' but got ' + _.inspect(err.message)\r\n          , 'expected #{this} to throw error not matching ' + msg\r\n        );\r\n        return this;\r\n      } else if (err.message && msg && 'string' === typeof msg) {\r\n        this.assert(\r\n            ~err.message.indexOf(msg)\r\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\r\n          , 'expected #{this} to throw error not including #{act}'\r\n          , msg\r\n          , err.message\r\n        );\r\n        return this;\r\n      } else {\r\n        thrown = true;\r\n      }\r\n    }\r\n\r\n    var expectedThrown = name ? name : desiredError ? _.inspect(desiredError) : 'an error';\r\n\r\n    this.assert(\r\n        thrown === true\r\n      , 'expected #{this} to throw ' + expectedThrown\r\n      , 'expected #{this} to not throw ' + expectedThrown\r\n    );\r\n  };\r\n\r\n  Assertion.addMethod('throw', assertThrows);\r\n  Assertion.addMethod('throws', assertThrows);\r\n  Assertion.addMethod('Throw', assertThrows);\r\n\r\n  /**\r\n   * ### .respondTo(method)\r\n   *\r\n   * Asserts that the object or class target will respond to a method.\r\n   *\r\n   *     Klass.prototype.bar = function(){};\r\n   *     expect(Klass).to.respondTo('bar');\r\n   *     expect(obj).to.respondTo('bar');\r\n   *\r\n   * To check if a constructor will respond to a static function,\r\n   * set the `itself` flag.\r\n   *\r\n   *    Klass.baz = function(){};\r\n   *    expect(Klass).itself.to.respondTo('baz');\r\n   *\r\n   * @name respondTo\r\n   * @param {String} method\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addMethod('respondTo', function (method) {\r\n    var obj = flag(this, 'object')\r\n      , itself = flag(this, 'itself')\r\n      , context = ('function' === typeof obj && !itself)\r\n        ? obj.prototype[method]\r\n        : obj[method];\r\n\r\n    this.assert(\r\n        'function' === typeof context\r\n      , 'expected #{this} to respond to ' + _.inspect(method)\r\n      , 'expected #{this} to not respond to ' + _.inspect(method)\r\n    );\r\n  });\r\n\r\n  /**\r\n   * ### .itself\r\n   *\r\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\r\n   *\r\n   *    function Foo() {}\r\n   *    Foo.bar = function() {}\r\n   *    Foo.prototype.baz = function() {}\r\n   *\r\n   *    expect(Foo).itself.to.respondTo('bar');\r\n   *    expect(Foo).itself.not.to.respondTo('baz');\r\n   *\r\n   * @name itself\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addProperty('itself', function () {\r\n    flag(this, 'itself', true);\r\n  });\r\n\r\n  /**\r\n   * ### .satisfy(method)\r\n   *\r\n   * Asserts that the target passes a given truth test.\r\n   *\r\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\r\n   *\r\n   * @name satisfy\r\n   * @param {Function} matcher\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addMethod('satisfy', function (matcher) {\r\n    var obj = flag(this, 'object');\r\n    this.assert(\r\n        matcher(obj)\r\n      , 'expected #{this} to satisfy ' + _.inspect(matcher)\r\n      , 'expected #{this} to not satisfy' + _.inspect(matcher)\r\n      , this.negate ? false : true\r\n      , matcher(obj)\r\n    );\r\n  });\r\n\r\n  /**\r\n   * ### .closeTo(expected, delta)\r\n   *\r\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\r\n   *\r\n   *     expect(1.5).to.be.closeTo(1, 0.5);\r\n   *\r\n   * @name closeTo\r\n   * @param {Number} expected\r\n   * @param {Number} delta\r\n   * @api public\r\n   */\r\n\r\n  Assertion.addMethod('closeTo', function (expected, delta) {\r\n    var obj = flag(this, 'object');\r\n    this.assert(\r\n        Math.abs(obj - expected) <= delta\r\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\r\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\r\n    );\r\n  });\r\n\r\n};\r\n\r\n}); // module: chai/core/assertions.js\r\n\r\nrequire.register(\"chai/interface/assert.js\", function(module, exports, require){\r\n/*!\r\n * chai\r\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n\r\nmodule.exports = function (chai, util) {\r\n\r\n  /*!\r\n   * Chai dependencies.\r\n   */\r\n\r\n  var Assertion = chai.Assertion\r\n    , flag = util.flag;\r\n\r\n  /*!\r\n   * Module export.\r\n   */\r\n\r\n  /**\r\n   * ### assert(expression, message)\r\n   *\r\n   * Write your own test expressions.\r\n   *\r\n   *     assert('foo' !== 'bar', 'foo is not bar');\r\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\r\n   *\r\n   * @param {Mixed} expression to test for truthiness\r\n   * @param {String} message to display on error\r\n   * @name assert\r\n   * @api public\r\n   */\r\n\r\n  var assert = chai.assert = function (express, errmsg) {\r\n    var test = new Assertion(null);\r\n    test.assert(\r\n        express\r\n      , errmsg\r\n      , '[ negation message unavailable ]'\r\n    );\r\n  };\r\n\r\n  /**\r\n   * ### .fail(actual, expected, [message], [operator])\r\n   *\r\n   * Throw a failure. Node.js `assert` module-compatible.\r\n   *\r\n   * @name fail\r\n   * @param {Mixed} actual\r\n   * @param {Mixed} expected\r\n   * @param {String} message\r\n   * @param {String} operator\r\n   * @api public\r\n   */\r\n\r\n  assert.fail = function (actual, expected, message, operator) {\r\n    throw new chai.AssertionError({\r\n        actual: actual\r\n      , expected: expected\r\n      , message: message\r\n      , operator: operator\r\n      , stackStartFunction: assert.fail\r\n    });\r\n  };\r\n\r\n  /**\r\n   * ### .ok(object, [message])\r\n   *\r\n   * Asserts that `object` is truthy.\r\n   *\r\n   *     assert.ok('everything', 'everything is ok');\r\n   *     assert.ok(false, 'this will fail');\r\n   *\r\n   * @name ok\r\n   * @param {Mixed} object to test\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.ok = function (val, msg) {\r\n    new Assertion(val, msg).is.ok;\r\n  };\r\n\r\n  /**\r\n   * ### .equal(actual, expected, [message])\r\n   *\r\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\r\n   *\r\n   *     assert.equal(3, '3', '== coerces values to strings');\r\n   *\r\n   * @name equal\r\n   * @param {Mixed} actual\r\n   * @param {Mixed} expected\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.equal = function (act, exp, msg) {\r\n    var test = new Assertion(act, msg);\r\n\r\n    test.assert(\r\n        exp == flag(test, 'object')\r\n      , 'expected #{this} to equal #{exp}'\r\n      , 'expected #{this} to not equal #{act}'\r\n      , exp\r\n      , act\r\n    );\r\n  };\r\n\r\n  /**\r\n   * ### .notEqual(actual, expected, [message])\r\n   *\r\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\r\n   *\r\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\r\n   *\r\n   * @name notEqual\r\n   * @param {Mixed} actual\r\n   * @param {Mixed} expected\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.notEqual = function (act, exp, msg) {\r\n    var test = new Assertion(act, msg);\r\n\r\n    test.assert(\r\n        exp != flag(test, 'object')\r\n      , 'expected #{this} to not equal #{exp}'\r\n      , 'expected #{this} to equal #{act}'\r\n      , exp\r\n      , act\r\n    );\r\n  };\r\n\r\n  /**\r\n   * ### .strictEqual(actual, expected, [message])\r\n   *\r\n   * Asserts strict equality (`===`) of `actual` and `expected`.\r\n   *\r\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\r\n   *\r\n   * @name strictEqual\r\n   * @param {Mixed} actual\r\n   * @param {Mixed} expected\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.strictEqual = function (act, exp, msg) {\r\n    new Assertion(act, msg).to.equal(exp);\r\n  };\r\n\r\n  /**\r\n   * ### .notStrictEqual(actual, expected, [message])\r\n   *\r\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\r\n   *\r\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\r\n   *\r\n   * @name notStrictEqual\r\n   * @param {Mixed} actual\r\n   * @param {Mixed} expected\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.notStrictEqual = function (act, exp, msg) {\r\n    new Assertion(act, msg).to.not.equal(exp);\r\n  };\r\n\r\n  /**\r\n   * ### .deepEqual(actual, expected, [message])\r\n   *\r\n   * Asserts that `actual` is deeply equal to `expected`.\r\n   *\r\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\r\n   *\r\n   * @name deepEqual\r\n   * @param {Mixed} actual\r\n   * @param {Mixed} expected\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.deepEqual = function (act, exp, msg) {\r\n    new Assertion(act, msg).to.eql(exp);\r\n  };\r\n\r\n  /**\r\n   * ### .notDeepEqual(actual, expected, [message])\r\n   *\r\n   * Assert that `actual` is not deeply equal to `expected`.\r\n   *\r\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\r\n   *\r\n   * @name notDeepEqual\r\n   * @param {Mixed} actual\r\n   * @param {Mixed} expected\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.notDeepEqual = function (act, exp, msg) {\r\n    new Assertion(act, msg).to.not.eql(exp);\r\n  };\r\n\r\n  /**\r\n   * ### .isTrue(value, [message])\r\n   *\r\n   * Asserts that `value` is true.\r\n   *\r\n   *     var teaServed = true;\r\n   *     assert.isTrue(teaServed, 'the tea has been served');\r\n   *\r\n   * @name isTrue\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isTrue = function (val, msg) {\r\n    new Assertion(val, msg).is['true'];\r\n  };\r\n\r\n  /**\r\n   * ### .isFalse(value, [message])\r\n   *\r\n   * Asserts that `value` is false.\r\n   *\r\n   *     var teaServed = false;\r\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\r\n   *\r\n   * @name isFalse\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isFalse = function (val, msg) {\r\n    new Assertion(val, msg).is['false'];\r\n  };\r\n\r\n  /**\r\n   * ### .isNull(value, [message])\r\n   *\r\n   * Asserts that `value` is null.\r\n   *\r\n   *     assert.isNull(err, 'there was no error');\r\n   *\r\n   * @name isNull\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isNull = function (val, msg) {\r\n    new Assertion(val, msg).to.equal(null);\r\n  };\r\n\r\n  /**\r\n   * ### .isNotNull(value, [message])\r\n   *\r\n   * Asserts that `value` is not null.\r\n   *\r\n   *     var tea = 'tasty chai';\r\n   *     assert.isNotNull(tea, 'great, time for tea!');\r\n   *\r\n   * @name isNotNull\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isNotNull = function (val, msg) {\r\n    new Assertion(val, msg).to.not.equal(null);\r\n  };\r\n\r\n  /**\r\n   * ### .isUndefined(value, [message])\r\n   *\r\n   * Asserts that `value` is `undefined`.\r\n   *\r\n   *     var tea;\r\n   *     assert.isUndefined(tea, 'no tea defined');\r\n   *\r\n   * @name isUndefined\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isUndefined = function (val, msg) {\r\n    new Assertion(val, msg).to.equal(undefined);\r\n  };\r\n\r\n  /**\r\n   * ### .isDefined(value, [message])\r\n   *\r\n   * Asserts that `value` is not `undefined`.\r\n   *\r\n   *     var tea = 'cup of chai';\r\n   *     assert.isDefined(tea, 'tea has been defined');\r\n   *\r\n   * @name isUndefined\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isDefined = function (val, msg) {\r\n    new Assertion(val, msg).to.not.equal(undefined);\r\n  };\r\n\r\n  /**\r\n   * ### .isFunction(value, [message])\r\n   *\r\n   * Asserts that `value` is a function.\r\n   *\r\n   *     function serveTea() { return 'cup of tea'; };\r\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\r\n   *\r\n   * @name isFunction\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isFunction = function (val, msg) {\r\n    new Assertion(val, msg).to.be.a('function');\r\n  };\r\n\r\n  /**\r\n   * ### .isNotFunction(value, [message])\r\n   *\r\n   * Asserts that `value` is _not_ a function.\r\n   *\r\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\r\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\r\n   *\r\n   * @name isNotFunction\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isNotFunction = function (val, msg) {\r\n    new Assertion(val, msg).to.not.be.a('function');\r\n  };\r\n\r\n  /**\r\n   * ### .isObject(value, [message])\r\n   *\r\n   * Asserts that `value` is an object (as revealed by\r\n   * `Object.prototype.toString`).\r\n   *\r\n   *     var selection = { name: 'Chai', serve: 'with spices' };\r\n   *     assert.isObject(selection, 'tea selection is an object');\r\n   *\r\n   * @name isObject\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isObject = function (val, msg) {\r\n    new Assertion(val, msg).to.be.a('object');\r\n  };\r\n\r\n  /**\r\n   * ### .isNotObject(value, [message])\r\n   *\r\n   * Asserts that `value` is _not_ an object.\r\n   *\r\n   *     var selection = 'chai'\r\n   *     assert.isObject(selection, 'tea selection is not an object');\r\n   *     assert.isObject(null, 'null is not an object');\r\n   *\r\n   * @name isNotObject\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isNotObject = function (val, msg) {\r\n    new Assertion(val, msg).to.not.be.a('object');\r\n  };\r\n\r\n  /**\r\n   * ### .isArray(value, [message])\r\n   *\r\n   * Asserts that `value` is an array.\r\n   *\r\n   *     var menu = [ 'green', 'chai', 'oolong' ];\r\n   *     assert.isArray(menu, 'what kind of tea do we want?');\r\n   *\r\n   * @name isArray\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isArray = function (val, msg) {\r\n    new Assertion(val, msg).to.be.an('array');\r\n  };\r\n\r\n  /**\r\n   * ### .isNotArray(value, [message])\r\n   *\r\n   * Asserts that `value` is _not_ an array.\r\n   *\r\n   *     var menu = 'green|chai|oolong';\r\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\r\n   *\r\n   * @name isNotArray\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isNotArray = function (val, msg) {\r\n    new Assertion(val, msg).to.not.be.an('array');\r\n  };\r\n\r\n  /**\r\n   * ### .isString(value, [message])\r\n   *\r\n   * Asserts that `value` is a string.\r\n   *\r\n   *     var teaOrder = 'chai';\r\n   *     assert.isString(teaOrder, 'order placed');\r\n   *\r\n   * @name isString\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isString = function (val, msg) {\r\n    new Assertion(val, msg).to.be.a('string');\r\n  };\r\n\r\n  /**\r\n   * ### .isNotString(value, [message])\r\n   *\r\n   * Asserts that `value` is _not_ a string.\r\n   *\r\n   *     var teaOrder = 4;\r\n   *     assert.isNotString(teaOrder, 'order placed');\r\n   *\r\n   * @name isNotString\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isNotString = function (val, msg) {\r\n    new Assertion(val, msg).to.not.be.a('string');\r\n  };\r\n\r\n  /**\r\n   * ### .isNumber(value, [message])\r\n   *\r\n   * Asserts that `value` is a number.\r\n   *\r\n   *     var cups = 2;\r\n   *     assert.isNumber(cups, 'how many cups');\r\n   *\r\n   * @name isNumber\r\n   * @param {Number} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isNumber = function (val, msg) {\r\n    new Assertion(val, msg).to.be.a('number');\r\n  };\r\n\r\n  /**\r\n   * ### .isNotNumber(value, [message])\r\n   *\r\n   * Asserts that `value` is _not_ a number.\r\n   *\r\n   *     var cups = '2 cups please';\r\n   *     assert.isNotNumber(cups, 'how many cups');\r\n   *\r\n   * @name isNotNumber\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isNotNumber = function (val, msg) {\r\n    new Assertion(val, msg).to.not.be.a('number');\r\n  };\r\n\r\n  /**\r\n   * ### .isBoolean(value, [message])\r\n   *\r\n   * Asserts that `value` is a boolean.\r\n   *\r\n   *     var teaReady = true\r\n   *       , teaServed = false;\r\n   *\r\n   *     assert.isBoolean(teaReady, 'is the tea ready');\r\n   *     assert.isBoolean(teaServed, 'has tea been served');\r\n   *\r\n   * @name isBoolean\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isBoolean = function (val, msg) {\r\n    new Assertion(val, msg).to.be.a('boolean');\r\n  };\r\n\r\n  /**\r\n   * ### .isNotBoolean(value, [message])\r\n   *\r\n   * Asserts that `value` is _not_ a boolean.\r\n   *\r\n   *     var teaReady = 'yep'\r\n   *       , teaServed = 'nope';\r\n   *\r\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\r\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\r\n   *\r\n   * @name isNotBoolean\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.isNotBoolean = function (val, msg) {\r\n    new Assertion(val, msg).to.not.be.a('boolean');\r\n  };\r\n\r\n  /**\r\n   * ### .typeOf(value, name, [message])\r\n   *\r\n   * Asserts that `value`'s type is `name`, as determined by\r\n   * `Object.prototype.toString`.\r\n   *\r\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\r\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\r\n   *     assert.typeOf('tea', 'string', 'we have a string');\r\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\r\n   *     assert.typeOf(null, 'null', 'we have a null');\r\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\r\n   *\r\n   * @name typeOf\r\n   * @param {Mixed} value\r\n   * @param {String} name\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.typeOf = function (val, type, msg) {\r\n    new Assertion(val, msg).to.be.a(type);\r\n  };\r\n\r\n  /**\r\n   * ### .notTypeOf(value, name, [message])\r\n   *\r\n   * Asserts that `value`'s type is _not_ `name`, as determined by\r\n   * `Object.prototype.toString`.\r\n   *\r\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\r\n   *\r\n   * @name notTypeOf\r\n   * @param {Mixed} value\r\n   * @param {String} typeof name\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.notTypeOf = function (val, type, msg) {\r\n    new Assertion(val, msg).to.not.be.a(type);\r\n  };\r\n\r\n  /**\r\n   * ### .instanceOf(object, constructor, [message])\r\n   *\r\n   * Asserts that `value` is an instance of `constructor`.\r\n   *\r\n   *     var Tea = function (name) { this.name = name; }\r\n   *       , chai = new Tea('chai');\r\n   *\r\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\r\n   *\r\n   * @name instanceOf\r\n   * @param {Object} object\r\n   * @param {Constructor} constructor\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.instanceOf = function (val, type, msg) {\r\n    new Assertion(val, msg).to.be.instanceOf(type);\r\n  };\r\n\r\n  /**\r\n   * ### .notInstanceOf(object, constructor, [message])\r\n   *\r\n   * Asserts `value` is not an instance of `constructor`.\r\n   *\r\n   *     var Tea = function (name) { this.name = name; }\r\n   *       , chai = new String('chai');\r\n   *\r\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\r\n   *\r\n   * @name notInstanceOf\r\n   * @param {Object} object\r\n   * @param {Constructor} constructor\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.notInstanceOf = function (val, type, msg) {\r\n    new Assertion(val, msg).to.not.be.instanceOf(type);\r\n  };\r\n\r\n  /**\r\n   * ### .include(haystack, needle, [message])\r\n   *\r\n   * Asserts that `haystack` includes `needle`. Works\r\n   * for strings and arrays.\r\n   *\r\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\r\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\r\n   *\r\n   * @name include\r\n   * @param {Array|String} haystack\r\n   * @param {Mixed} needle\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.include = function (exp, inc, msg) {\r\n    var obj = new Assertion(exp, msg);\r\n\r\n    if (Array.isArray(exp)) {\r\n      obj.to.include(inc);\r\n    } else if ('string' === typeof exp) {\r\n      obj.to.contain.string(inc);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ### .match(value, regexp, [message])\r\n   *\r\n   * Asserts that `value` matches the regular expression `regexp`.\r\n   *\r\n   *     assert.match('foobar', /^foo/, 'regexp matches');\r\n   *\r\n   * @name match\r\n   * @param {Mixed} value\r\n   * @param {RegExp} regexp\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.match = function (exp, re, msg) {\r\n    new Assertion(exp, msg).to.match(re);\r\n  };\r\n\r\n  /**\r\n   * ### .notMatch(value, regexp, [message])\r\n   *\r\n   * Asserts that `value` does not match the regular expression `regexp`.\r\n   *\r\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\r\n   *\r\n   * @name notMatch\r\n   * @param {Mixed} value\r\n   * @param {RegExp} regexp\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.notMatch = function (exp, re, msg) {\r\n    new Assertion(exp, msg).to.not.match(re);\r\n  };\r\n\r\n  /**\r\n   * ### .property(object, property, [message])\r\n   *\r\n   * Asserts that `object` has a property named by `property`.\r\n   *\r\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\r\n   *\r\n   * @name property\r\n   * @param {Object} object\r\n   * @param {String} property\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.property = function (obj, prop, msg) {\r\n    new Assertion(obj, msg).to.have.property(prop);\r\n  };\r\n\r\n  /**\r\n   * ### .notProperty(object, property, [message])\r\n   *\r\n   * Asserts that `object` does _not_ have a property named by `property`.\r\n   *\r\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\r\n   *\r\n   * @name notProperty\r\n   * @param {Object} object\r\n   * @param {String} property\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.notProperty = function (obj, prop, msg) {\r\n    new Assertion(obj, msg).to.not.have.property(prop);\r\n  };\r\n\r\n  /**\r\n   * ### .deepProperty(object, property, [message])\r\n   *\r\n   * Asserts that `object` has a property named by `property`, which can be a\r\n   * string using dot- and bracket-notation for deep reference.\r\n   *\r\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\r\n   *\r\n   * @name deepProperty\r\n   * @param {Object} object\r\n   * @param {String} property\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.deepProperty = function (obj, prop, msg) {\r\n    new Assertion(obj, msg).to.have.deep.property(prop);\r\n  };\r\n\r\n  /**\r\n   * ### .notDeepProperty(object, property, [message])\r\n   *\r\n   * Asserts that `object` does _not_ have a property named by `property`, which\r\n   * can be a string using dot- and bracket-notation for deep reference.\r\n   *\r\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\r\n   *\r\n   * @name notDeepProperty\r\n   * @param {Object} object\r\n   * @param {String} property\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.notDeepProperty = function (obj, prop, msg) {\r\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\r\n  };\r\n\r\n  /**\r\n   * ### .propertyVal(object, property, value, [message])\r\n   *\r\n   * Asserts that `object` has a property named by `property` with value given\r\n   * by `value`.\r\n   *\r\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\r\n   *\r\n   * @name propertyVal\r\n   * @param {Object} object\r\n   * @param {String} property\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.propertyVal = function (obj, prop, val, msg) {\r\n    new Assertion(obj, msg).to.have.property(prop, val);\r\n  };\r\n\r\n  /**\r\n   * ### .propertyNotVal(object, property, value, [message])\r\n   *\r\n   * Asserts that `object` has a property named by `property`, but with a value\r\n   * different from that given by `value`.\r\n   *\r\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\r\n   *\r\n   * @name propertyNotVal\r\n   * @param {Object} object\r\n   * @param {String} property\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.propertyNotVal = function (obj, prop, val, msg) {\r\n    new Assertion(obj, msg).to.not.have.property(prop, val);\r\n  };\r\n\r\n  /**\r\n   * ### .deepPropertyVal(object, property, value, [message])\r\n   *\r\n   * Asserts that `object` has a property named by `property` with value given\r\n   * by `value`. `property` can use dot- and bracket-notation for deep\r\n   * reference.\r\n   *\r\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\r\n   *\r\n   * @name deepPropertyVal\r\n   * @param {Object} object\r\n   * @param {String} property\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\r\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\r\n  };\r\n\r\n  /**\r\n   * ### .deepPropertyNotVal(object, property, value, [message])\r\n   *\r\n   * Asserts that `object` has a property named by `property`, but with a value\r\n   * different from that given by `value`. `property` can use dot- and\r\n   * bracket-notation for deep reference.\r\n   *\r\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\r\n   *\r\n   * @name deepPropertyNotVal\r\n   * @param {Object} object\r\n   * @param {String} property\r\n   * @param {Mixed} value\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\r\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\r\n  };\r\n\r\n  /**\r\n   * ### .lengthOf(object, length, [message])\r\n   *\r\n   * Asserts that `object` has a `length` property with the expected value.\r\n   *\r\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\r\n   *     assert.lengthOf('foobar', 5, 'string has length of 6');\r\n   *\r\n   * @name lengthOf\r\n   * @param {Mixed} object\r\n   * @param {Number} length\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.lengthOf = function (exp, len, msg) {\r\n    new Assertion(exp, msg).to.have.length(len);\r\n  };\r\n\r\n  /**\r\n   * ### .throws(function, [constructor/regexp], [message])\r\n   *\r\n   * Asserts that `function` will throw an error that is an instance of\r\n   * `constructor`, or alternately that it will throw an error with message\r\n   * matching `regexp`.\r\n   *\r\n   *     assert.throw(fn, ReferenceError, 'function throws a reference error');\r\n   *\r\n   * @name throws\r\n   * @alias throw\r\n   * @alias Throw\r\n   * @param {Function} function\r\n   * @param {ErrorConstructor} constructor\r\n   * @param {RegExp} regexp\r\n   * @param {String} message\r\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\r\n   * @api public\r\n   */\r\n\r\n  assert.Throw = function (fn, type, msg) {\r\n    if ('string' === typeof type) {\r\n      msg = type;\r\n      type = null;\r\n    }\r\n\r\n    new Assertion(fn, msg).to.Throw(type);\r\n  };\r\n\r\n  /**\r\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\r\n   *\r\n   * Asserts that `function` will _not_ throw an error that is an instance of\r\n   * `constructor`, or alternately that it will not throw an error with message\r\n   * matching `regexp`.\r\n   *\r\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\r\n   *\r\n   * @name doesNotThrow\r\n   * @param {Function} function\r\n   * @param {ErrorConstructor} constructor\r\n   * @param {RegExp} regexp\r\n   * @param {String} message\r\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\r\n   * @api public\r\n   */\r\n\r\n  assert.doesNotThrow = function (fn, type, msg) {\r\n    if ('string' === typeof type) {\r\n      msg = type;\r\n      type = null;\r\n    }\r\n\r\n    new Assertion(fn, msg).to.not.Throw(type);\r\n  };\r\n\r\n  /**\r\n   * ### .operator(val1, operator, val2, [message])\r\n   *\r\n   * Compares two values using `operator`.\r\n   *\r\n   *     assert.operator(1, '<', 2, 'everything is ok');\r\n   *     assert.operator(1, '>', 2, 'this will fail');\r\n   *\r\n   * @name operator\r\n   * @param {Mixed} val1\r\n   * @param {String} operator\r\n   * @param {Mixed} val2\r\n   * @param {String} message\r\n   * @api public\r\n   */\r\n\r\n  assert.operator = function (val, operator, val2, msg) {\r\n    if (!~['==', '===', '>', '>=', '<', '<=', '!=', '!=='].indexOf(operator)) {\r\n      throw new Error('Invalid operator \"' + operator + '\"');\r\n    }\r\n    var test = new Assertion(eval(val + operator + val2), msg);\r\n    test.assert(\r\n        true === flag(test, 'object')\r\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\r\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\r\n  };\r\n\r\n  /*!\r\n   * Undocumented / untested\r\n   */\r\n\r\n  assert.ifError = function (val, msg) {\r\n    new Assertion(val, msg).to.not.be.ok;\r\n  };\r\n\r\n  /*!\r\n   * Aliases.\r\n   */\r\n\r\n  (function alias(name, as){\r\n    assert[as] = assert[name];\r\n    return alias;\r\n  })\r\n  ('Throw', 'throw')\r\n  ('Throw', 'throws');\r\n};\r\n\r\n}); // module: chai/interface/assert.js\r\n\r\nrequire.register(\"chai/interface/expect.js\", function(module, exports, require){\r\n/*!\r\n * chai\r\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\nmodule.exports = function (chai, util) {\r\n  chai.expect = function (val, message) {\r\n    return new chai.Assertion(val, message);\r\n  };\r\n};\r\n\r\n\r\n}); // module: chai/interface/expect.js\r\n\r\nrequire.register(\"chai/interface/should.js\", function(module, exports, require){\r\n/*!\r\n * chai\r\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\nmodule.exports = function (chai, util) {\r\n  var Assertion = chai.Assertion;\r\n\r\n  function loadShould () {\r\n    // modify Object.prototype to have `should`\r\n    Object.defineProperty(Object.prototype, 'should',\r\n      { set: function () {}\r\n      , get: function(){\r\n          if (this instanceof String || this instanceof Number) {\r\n            return new Assertion(this.constructor(this));\r\n          } else if (this instanceof Boolean) {\r\n            return new Assertion(this == true);\r\n          }\r\n          return new Assertion(this);\r\n        }\r\n      , configurable: true\r\n    });\r\n\r\n    var should = {};\r\n\r\n    should.equal = function (val1, val2) {\r\n      new Assertion(val1).to.equal(val2);\r\n    };\r\n\r\n    should.Throw = function (fn, errt, errs) {\r\n      new Assertion(fn).to.Throw(errt, errs);\r\n    };\r\n\r\n    should.exist = function (val) {\r\n      new Assertion(val).to.exist;\r\n    }\r\n\r\n    // negation\r\n    should.not = {}\r\n\r\n    should.not.equal = function (val1, val2) {\r\n      new Assertion(val1).to.not.equal(val2);\r\n    };\r\n\r\n    should.not.Throw = function (fn, errt, errs) {\r\n      new Assertion(fn).to.not.Throw(errt, errs);\r\n    };\r\n\r\n    should.not.exist = function (val) {\r\n      new Assertion(val).to.not.exist;\r\n    }\r\n\r\n    should['throw'] = should['Throw'];\r\n    should.not['throw'] = should.not['Throw'];\r\n\r\n    return should;\r\n  };\r\n\r\n  chai.should = loadShould;\r\n  chai.Should = loadShould;\r\n};\r\n\r\n}); // module: chai/interface/should.js\r\n\r\nrequire.register(\"chai/utils/addChainableMethod.js\", function(module, exports, require){\r\n/*!\r\n * Chai - addChainingMethod utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/*!\r\n * Module dependencies\r\n */\r\n\r\nvar transferFlags = require('./transferFlags');\r\n\r\n/**\r\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\r\n *\r\n * Adds a method to an object, such that the method can also be chained.\r\n *\r\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\r\n *       var obj = utils.flag(this, 'object');\r\n *       new chai.Assertion(obj).to.be.equal(str);\r\n *     });\r\n *\r\n * Can also be accessed directly from `chai.Assertion`.\r\n *\r\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\r\n *\r\n * The result can then be used as both a method assertion, executing both `method` and\r\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\r\n *\r\n *     expect(fooStr).to.be.foo('bar');\r\n *     expect(fooStr).to.be.foo.equal('foo');\r\n *\r\n * @param {Object} ctx object to which the method is added\r\n * @param {String} name of method to add\r\n * @param {Function} method function to be used for `name`, when called\r\n * @param {Function} chainingBehavior function to be called every time the property is accessed\r\n * @name addChainableMethod\r\n * @api public\r\n */\r\n\r\nmodule.exports = function (ctx, name, method, chainingBehavior) {\r\n  if (typeof chainingBehavior !== 'function')\r\n    chainingBehavior = function () { };\r\n\r\n  Object.defineProperty(ctx, name,\r\n    { get: function () {\r\n        chainingBehavior.call(this);\r\n\r\n        var assert = function () {\r\n          var result = method.apply(this, arguments);\r\n          return result === undefined ? this : result;\r\n        };\r\n\r\n        // Re-enumerate every time to better accomodate plugins.\r\n        var asserterNames = Object.getOwnPropertyNames(ctx);\r\n        asserterNames.forEach(function (asserterName) {\r\n          var pd = Object.getOwnPropertyDescriptor(ctx, asserterName)\r\n            , functionProtoPD = Object.getOwnPropertyDescriptor(Function.prototype, asserterName);\r\n          // Avoid trying to overwrite things that we can't, like `length` and `arguments`.\r\n          if (functionProtoPD && !functionProtoPD.configurable) return;\r\n          if (asserterName === 'arguments') return; // @see chaijs/chai/issues/69\r\n          Object.defineProperty(assert, asserterName, pd);\r\n        });\r\n\r\n        transferFlags(this, assert);\r\n        return assert;\r\n      }\r\n    , configurable: true\r\n  });\r\n};\r\n\r\n}); // module: chai/utils/addChainableMethod.js\r\n\r\nrequire.register(\"chai/utils/addMethod.js\", function(module, exports, require){\r\n/*!\r\n * Chai - addMethod utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * ### addMethod (ctx, name, method)\r\n *\r\n * Adds a method to the prototype of an object.\r\n *\r\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\r\n *       var obj = utils.flag(this, 'object');\r\n *       new chai.Assertion(obj).to.be.equal(str);\r\n *     });\r\n *\r\n * Can also be accessed directly from `chai.Assertion`.\r\n *\r\n *     chai.Assertion.addMethod('foo', fn);\r\n *\r\n * Then can be used as any other assertion.\r\n *\r\n *     expect(fooStr).to.be.foo('bar');\r\n *\r\n * @param {Object} ctx object to which the method is added\r\n * @param {String} name of method to add\r\n * @param {Function} method function to be used for name\r\n * @name addMethod\r\n * @api public\r\n */\r\n\r\nmodule.exports = function (ctx, name, method) {\r\n  ctx[name] = function () {\r\n    var result = method.apply(this, arguments);\r\n    return result === undefined ? this : result;\r\n  };\r\n};\r\n\r\n}); // module: chai/utils/addMethod.js\r\n\r\nrequire.register(\"chai/utils/addProperty.js\", function(module, exports, require){\r\n/*!\r\n * Chai - addProperty utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * ### addProperty (ctx, name, getter)\r\n *\r\n * Adds a property to the prototype of an object.\r\n *\r\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\r\n *       var obj = utils.flag(this, 'object');\r\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\r\n *     });\r\n *\r\n * Can also be accessed directly from `chai.Assertion`.\r\n *\r\n *     chai.Assertion.addProperty('foo', fn);\r\n *\r\n * Then can be used as any other assertion.\r\n *\r\n *     expect(myFoo).to.be.foo;\r\n *\r\n * @param {Object} ctx object to which the property is added\r\n * @param {String} name of property to add\r\n * @param {Function} getter function to be used for name\r\n * @name addProperty\r\n * @api public\r\n */\r\n\r\nmodule.exports = function (ctx, name, getter) {\r\n  Object.defineProperty(ctx, name,\r\n    { get: function () {\r\n        var result = getter.call(this);\r\n        return result === undefined ? this : result;\r\n      }\r\n    , configurable: true\r\n  });\r\n};\r\n\r\n}); // module: chai/utils/addProperty.js\r\n\r\nrequire.register(\"chai/utils/eql.js\", function(module, exports, require){\r\n// This is directly from Node.js assert\r\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/assert.js\r\n\r\n\r\nmodule.exports = _deepEqual;\r\n\r\n// For browser implementation\r\nif (!Buffer) {\r\n  var Buffer = {\r\n    isBuffer: function () {\r\n      return false;\r\n    }\r\n  };\r\n}\r\n\r\nfunction _deepEqual(actual, expected) {\r\n  // 7.1. All identical values are equivalent, as determined by ===.\r\n  if (actual === expected) {\r\n    return true;\r\n\r\n  } else if (Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {\r\n    if (actual.length != expected.length) return false;\r\n\r\n    for (var i = 0; i < actual.length; i++) {\r\n      if (actual[i] !== expected[i]) return false;\r\n    }\r\n\r\n    return true;\r\n\r\n  // 7.2. If the expected value is a Date object, the actual value is\r\n  // equivalent if it is also a Date object that refers to the same time.\r\n  } else if (actual instanceof Date && expected instanceof Date) {\r\n    return actual.getTime() === expected.getTime();\r\n\r\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\r\n  // equivalence is determined by ==.\r\n  } else if (typeof actual != 'object' && typeof expected != 'object') {\r\n    return actual === expected;\r\n\r\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\r\n  // determined by having the same number of owned properties (as verified\r\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\r\n  // (although not necessarily the same order), equivalent values for every\r\n  // corresponding key, and an identical 'prototype' property. Note: this\r\n  // accounts for both named and indexed properties on Arrays.\r\n  } else {\r\n    return objEquiv(actual, expected);\r\n  }\r\n}\r\n\r\nfunction isUndefinedOrNull(value) {\r\n  return value === null || value === undefined;\r\n}\r\n\r\nfunction isArguments(object) {\r\n  return Object.prototype.toString.call(object) == '[object Arguments]';\r\n}\r\n\r\nfunction objEquiv(a, b) {\r\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\r\n    return false;\r\n  // an identical 'prototype' property.\r\n  if (a.prototype !== b.prototype) return false;\r\n  //~~~I've managed to break Object.keys through screwy arguments passing.\r\n  //   Converting to array solves the problem.\r\n  if (isArguments(a)) {\r\n    if (!isArguments(b)) {\r\n      return false;\r\n    }\r\n    a = pSlice.call(a);\r\n    b = pSlice.call(b);\r\n    return _deepEqual(a, b);\r\n  }\r\n  try {\r\n    var ka = Object.keys(a),\r\n        kb = Object.keys(b),\r\n        key, i;\r\n  } catch (e) {//happens when one is a string literal and the other isn't\r\n    return false;\r\n  }\r\n  // having the same number of owned properties (keys incorporates\r\n  // hasOwnProperty)\r\n  if (ka.length != kb.length)\r\n    return false;\r\n  //the same set of keys (although not necessarily the same order),\r\n  ka.sort();\r\n  kb.sort();\r\n  //~~~cheap key test\r\n  for (i = ka.length - 1; i >= 0; i--) {\r\n    if (ka[i] != kb[i])\r\n      return false;\r\n  }\r\n  //equivalent values for every corresponding key, and\r\n  //~~~possibly expensive deep test\r\n  for (i = ka.length - 1; i >= 0; i--) {\r\n    key = ka[i];\r\n    if (!_deepEqual(a[key], b[key])) return false;\r\n  }\r\n  return true;\r\n}\r\n}); // module: chai/utils/eql.js\r\n\r\nrequire.register(\"chai/utils/flag.js\", function(module, exports, require){\r\n/*!\r\n * Chai - flag utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * ### flag(object ,key, [value])\r\n *\r\n * Get or set a flag value on an object. If a\r\n * value is provided it will be set, else it will\r\n * return the currently set value or `undefined` if\r\n * the value is not set.\r\n *\r\n *     utils.flag(this, 'foo', 'bar'); // setter\r\n *     utils.flag(this, 'foo'); // getter, returns `bar`\r\n *\r\n * @param {Object} object (constructed Assertion\r\n * @param {String} key\r\n * @param {Mixed} value (optional)\r\n * @name flag\r\n * @api private\r\n */\r\n\r\nmodule.exports = function (obj, key, value) {\r\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\r\n  if (arguments.length === 3) {\r\n    flags[key] = value;\r\n  } else {\r\n    return flags[key];\r\n  }\r\n};\r\n\r\n}); // module: chai/utils/flag.js\r\n\r\nrequire.register(\"chai/utils/getActual.js\", function(module, exports, require){\r\n/*!\r\n * Chai - getActual utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * # getActual(object, [actual])\r\n *\r\n * Returns the `actual` value for an Assertion\r\n *\r\n * @param {Object} object (constructed Assertion)\r\n * @param {Arguments} chai.Assertion.prototype.assert arguments\r\n */\r\n\r\nmodule.exports = function (obj, args) {\r\n  var actual = args[4];\r\n  return 'undefined' !== actual ? actual : obj.obj;\r\n};\r\n\r\n}); // module: chai/utils/getActual.js\r\n\r\nrequire.register(\"chai/utils/getMessage.js\", function(module, exports, require){\r\n/*!\r\n * Chai - message composition utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/*!\r\n * Module dependancies\r\n */\r\n\r\nvar flag = require('./flag')\r\n  , getActual = require('./getActual')\r\n  , inspect = require('./inspect');\r\n\r\n/**\r\n * # getMessage(object, message, negateMessage)\r\n *\r\n * Construct the error message based on flags\r\n * and template tags. Template tags will return\r\n * a stringified inspection of the object referenced.\r\n *\r\n * Messsage template tags:\r\n * - `#{this}` current asserted object\r\n * - `#{act}` actual value\r\n * - `#{exp}` expected value\r\n *\r\n * @param {Object} object (constructed Assertion)\r\n * @param {Arguments} chai.Assertion.prototype.assert arguments\r\n */\r\n\r\nmodule.exports = function (obj, args) {\r\n  var negate = flag(obj, 'negate')\r\n    , val = flag(obj, 'object')\r\n    , expected = args[3]\r\n    , actual = getActual(obj, args)\r\n    , msg = negate ? args[2] : args[1]\r\n    , flagMsg = flag(obj, 'message');\r\n\r\n  msg = msg || '';\r\n  msg = msg\r\n    .replace(/#{this}/g, inspect(val))\r\n    .replace(/#{act}/g, inspect(actual))\r\n    .replace(/#{exp}/g, inspect(expected));\r\n\r\n  return flagMsg ? flagMsg + ': ' + msg : msg;\r\n};\r\n\r\n}); // module: chai/utils/getMessage.js\r\n\r\nrequire.register(\"chai/utils/getName.js\", function(module, exports, require){\r\n/*!\r\n * Chai - getName utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * # getName(func)\r\n *\r\n * Gets the name of a function, in a cross-browser way.\r\n *\r\n * @param {Function} a function (usually a constructor)\r\n */\r\n\r\nmodule.exports = function (func) {\r\n  if (func.name) return func.name;\r\n\r\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\r\n  return match && match[1] ? match[1] : \"\";\r\n};\r\n\r\n}); // module: chai/utils/getName.js\r\n\r\nrequire.register(\"chai/utils/getPathValue.js\", function(module, exports, require){\r\n/*!\r\n * Chai - getPathValue utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * @see https://github.com/logicalparadox/filtr\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * ### .getPathValue(path, object)\r\n *\r\n * This allows the retrieval of values in an\r\n * object given a string path.\r\n *\r\n *     var obj = {\r\n *         prop1: {\r\n *             arr: ['a', 'b', 'c']\r\n *           , str: 'Hello'\r\n *         }\r\n *       , prop2: {\r\n *             arr: [ { nested: 'Universe' } ]\r\n *           , str: 'Hello again!'\r\n *         }\r\n *     }\r\n *\r\n * The following would be the results.\r\n *\r\n *     getPathValue('prop1.str', obj); // Hello\r\n *     getPathValue('prop1.att[2]', obj); // b\r\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\r\n *\r\n * @param {String} path\r\n * @param {Object} object\r\n * @returns {Object} value or `undefined`\r\n * @name getPathValue\r\n * @api public\r\n */\r\n\r\nvar getPathValue = module.exports = function (path, obj) {\r\n  var parsed = parsePath(path);\r\n  return _getPathValue(parsed, obj);\r\n};\r\n\r\n/*!\r\n * ## parsePath(path)\r\n *\r\n * Helper function used to parse string object\r\n * paths. Use in conjunction with `_getPathValue`.\r\n *\r\n *      var parsed = parsePath('myobject.property.subprop');\r\n *\r\n * ### Paths:\r\n *\r\n * * Can be as near infinitely deep and nested\r\n * * Arrays are also valid using the formal `myobject.document[3].property`.\r\n *\r\n * @param {String} path\r\n * @returns {Object} parsed\r\n * @api private\r\n */\r\n\r\nfunction parsePath (path) {\r\n  var str = path.replace(/\\[/g, '.[')\r\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\r\n  return parts.map(function (value) {\r\n    var re = /\\[(\\d+)\\]$/\r\n      , mArr = re.exec(value)\r\n    if (mArr) return { i: parseFloat(mArr[1]) };\r\n    else return { p: value };\r\n  });\r\n};\r\n\r\n/*!\r\n * ## _getPathValue(parsed, obj)\r\n *\r\n * Helper companion function for `.parsePath` that returns\r\n * the value located at the parsed address.\r\n *\r\n *      var value = getPathValue(parsed, obj);\r\n *\r\n * @param {Object} parsed definition from `parsePath`.\r\n * @param {Object} object to search against\r\n * @returns {Object|Undefined} value\r\n * @api private\r\n */\r\n\r\nfunction _getPathValue (parsed, obj) {\r\n  var tmp = obj\r\n    , res;\r\n  for (var i = 0, l = parsed.length; i < l; i++) {\r\n    var part = parsed[i];\r\n    if (tmp) {\r\n      if ('undefined' !== typeof part.p)\r\n        tmp = tmp[part.p];\r\n      else if ('undefined' !== typeof part.i)\r\n        tmp = tmp[part.i];\r\n      if (i == (l - 1)) res = tmp;\r\n    } else {\r\n      res = undefined;\r\n    }\r\n  }\r\n  return res;\r\n};\r\n\r\n}); // module: chai/utils/getPathValue.js\r\n\r\nrequire.register(\"chai/utils/index.js\", function(module, exports, require){\r\n/*!\r\n * chai\r\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/*!\r\n * Main exports\r\n */\r\n\r\nvar exports = module.exports = {};\r\n\r\n/*!\r\n * test utility\r\n */\r\n\r\nexports.test = require('./test');\r\n\r\n/*!\r\n * message utility\r\n */\r\n\r\nexports.getMessage = require('./getMessage');\r\n\r\n/*!\r\n * actual utility\r\n */\r\n\r\nexports.getActual = require('./getActual');\r\n\r\n/*!\r\n * Inspect util\r\n */\r\n\r\nexports.inspect = require('./inspect');\r\n\r\n/*!\r\n * Flag utility\r\n */\r\n\r\nexports.flag = require('./flag');\r\n\r\n/*!\r\n * Flag transferring utility\r\n */\r\n\r\nexports.transferFlags = require('./transferFlags');\r\n\r\n/*!\r\n * Deep equal utility\r\n */\r\n\r\nexports.eql = require('./eql');\r\n\r\n/*!\r\n * Deep path value\r\n */\r\n\r\nexports.getPathValue = require('./getPathValue');\r\n\r\n/*!\r\n * Function name\r\n */\r\n\r\nexports.getName = require('./getName');\r\n\r\n/*!\r\n * add Property\r\n */\r\n\r\nexports.addProperty = require('./addProperty');\r\n\r\n/*!\r\n * add Method\r\n */\r\n\r\nexports.addMethod = require('./addMethod');\r\n\r\n/*!\r\n * overwrite Property\r\n */\r\n\r\nexports.overwriteProperty = require('./overwriteProperty');\r\n\r\n/*!\r\n * overwrite Method\r\n */\r\n\r\nexports.overwriteMethod = require('./overwriteMethod');\r\n\r\n/*!\r\n * Add a chainable method\r\n */\r\n\r\nexports.addChainableMethod = require('./addChainableMethod');\r\n\r\n\r\n}); // module: chai/utils/index.js\r\n\r\nrequire.register(\"chai/utils/inspect.js\", function(module, exports, require){\r\n// This is (almost) directly from Node.js utils\r\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\r\n\r\nvar getName = require('./getName');\r\n\r\nmodule.exports = inspect;\r\n\r\n/**\r\n * Echos the value of a value. Trys to print the value out\r\n * in the best way possible given the different types.\r\n *\r\n * @param {Object} obj The object to print out.\r\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\r\n *    properties of objects.\r\n * @param {Number} depth Depth in which to descend in object. Default is 2.\r\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\r\n *    output. Default is false (no coloring).\r\n */\r\nfunction inspect(obj, showHidden, depth, colors) {\r\n  var ctx = {\r\n    showHidden: showHidden,\r\n    seen: [],\r\n    stylize: function (str) { return str; }\r\n  };\r\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\r\n}\r\n\r\nfunction formatValue(ctx, value, recurseTimes) {\r\n  // Provide a hook for user-specified inspect functions.\r\n  // Check that value is an object with an inspect function on it\r\n  if (value && typeof value.inspect === 'function' &&\r\n      // Filter out the util module, it's inspect function is special\r\n      value.inspect !== exports.inspect &&\r\n      // Also filter out any prototype objects using the circular check.\r\n      !(value.constructor && value.constructor.prototype === value)) {\r\n    return value.inspect(recurseTimes);\r\n  }\r\n\r\n  // Primitive types cannot have properties\r\n  var primitive = formatPrimitive(ctx, value);\r\n  if (primitive) {\r\n    return primitive;\r\n  }\r\n\r\n  // Look up the keys of the object.\r\n  var visibleKeys = Object.keys(value);\r\n  var keys = ctx.showHidden ? Object.getOwnPropertyNames(value) : visibleKeys;\r\n\r\n  // Some type of object without properties can be shortcutted.\r\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\r\n  // a `stack` plus `description` property; ignore those for consistency.\r\n  if (keys.length === 0 || (isError(value) && (\r\n      (keys.length === 1 && keys[0] === 'stack') ||\r\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\r\n     ))) {\r\n    if (typeof value === 'function') {\r\n      var name = getName(value);\r\n      var nameSuffix = name ? ': ' + name : '';\r\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\r\n    }\r\n    if (isRegExp(value)) {\r\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\r\n    }\r\n    if (isDate(value)) {\r\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\r\n    }\r\n    if (isError(value)) {\r\n      return formatError(value);\r\n    }\r\n  }\r\n\r\n  var base = '', array = false, braces = ['{', '}'];\r\n\r\n  // Make Array say that they are Array\r\n  if (isArray(value)) {\r\n    array = true;\r\n    braces = ['[', ']'];\r\n  }\r\n\r\n  // Make functions say that they are functions\r\n  if (typeof value === 'function') {\r\n    var name = getName(value);\r\n    var nameSuffix = name ? ': ' + name : '';\r\n    base = ' [Function' + nameSuffix + ']';\r\n  }\r\n\r\n  // Make RegExps say that they are RegExps\r\n  if (isRegExp(value)) {\r\n    base = ' ' + RegExp.prototype.toString.call(value);\r\n  }\r\n\r\n  // Make dates with properties first say the date\r\n  if (isDate(value)) {\r\n    base = ' ' + Date.prototype.toUTCString.call(value);\r\n  }\r\n\r\n  // Make error with message first say the error\r\n  if (isError(value)) {\r\n    return formatError(value);\r\n  }\r\n\r\n  if (keys.length === 0 && (!array || value.length == 0)) {\r\n    return braces[0] + base + braces[1];\r\n  }\r\n\r\n  if (recurseTimes < 0) {\r\n    if (isRegExp(value)) {\r\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\r\n    } else {\r\n      return ctx.stylize('[Object]', 'special');\r\n    }\r\n  }\r\n\r\n  ctx.seen.push(value);\r\n\r\n  var output;\r\n  if (array) {\r\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\r\n  } else {\r\n    output = keys.map(function(key) {\r\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\r\n    });\r\n  }\r\n\r\n  ctx.seen.pop();\r\n\r\n  return reduceToSingleString(output, base, braces);\r\n}\r\n\r\n\r\nfunction formatPrimitive(ctx, value) {\r\n  switch (typeof value) {\r\n    case 'undefined':\r\n      return ctx.stylize('undefined', 'undefined');\r\n\r\n    case 'string':\r\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\r\n                                               .replace(/'/g, \"\\\\'\")\r\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\r\n      return ctx.stylize(simple, 'string');\r\n\r\n    case 'number':\r\n      return ctx.stylize('' + value, 'number');\r\n\r\n    case 'boolean':\r\n      return ctx.stylize('' + value, 'boolean');\r\n  }\r\n  // For some reason typeof null is \"object\", so special case here.\r\n  if (value === null) {\r\n    return ctx.stylize('null', 'null');\r\n  }\r\n}\r\n\r\n\r\nfunction formatError(value) {\r\n  return '[' + Error.prototype.toString.call(value) + ']';\r\n}\r\n\r\n\r\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\r\n  var output = [];\r\n  for (var i = 0, l = value.length; i < l; ++i) {\r\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\r\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\r\n          String(i), true));\r\n    } else {\r\n      output.push('');\r\n    }\r\n  }\r\n  keys.forEach(function(key) {\r\n    if (!key.match(/^\\d+$/)) {\r\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\r\n          key, true));\r\n    }\r\n  });\r\n  return output;\r\n}\r\n\r\n\r\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\r\n  var name, str;\r\n  if (value.__lookupGetter__) {\r\n    if (value.__lookupGetter__(key)) {\r\n      if (value.__lookupSetter__(key)) {\r\n        str = ctx.stylize('[Getter/Setter]', 'special');\r\n      } else {\r\n        str = ctx.stylize('[Getter]', 'special');\r\n      }\r\n    } else {\r\n      if (value.__lookupSetter__(key)) {\r\n        str = ctx.stylize('[Setter]', 'special');\r\n      }\r\n    }\r\n  }\r\n  if (visibleKeys.indexOf(key) < 0) {\r\n    name = '[' + key + ']';\r\n  }\r\n  if (!str) {\r\n    if (ctx.seen.indexOf(value[key]) < 0) {\r\n      if (recurseTimes === null) {\r\n        str = formatValue(ctx, value[key], null);\r\n      } else {\r\n        str = formatValue(ctx, value[key], recurseTimes - 1);\r\n      }\r\n      if (str.indexOf('\\n') > -1) {\r\n        if (array) {\r\n          str = str.split('\\n').map(function(line) {\r\n            return '  ' + line;\r\n          }).join('\\n').substr(2);\r\n        } else {\r\n          str = '\\n' + str.split('\\n').map(function(line) {\r\n            return '   ' + line;\r\n          }).join('\\n');\r\n        }\r\n      }\r\n    } else {\r\n      str = ctx.stylize('[Circular]', 'special');\r\n    }\r\n  }\r\n  if (typeof name === 'undefined') {\r\n    if (array && key.match(/^\\d+$/)) {\r\n      return str;\r\n    }\r\n    name = JSON.stringify('' + key);\r\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\r\n      name = name.substr(1, name.length - 2);\r\n      name = ctx.stylize(name, 'name');\r\n    } else {\r\n      name = name.replace(/'/g, \"\\\\'\")\r\n                 .replace(/\\\\\"/g, '\"')\r\n                 .replace(/(^\"|\"$)/g, \"'\");\r\n      name = ctx.stylize(name, 'string');\r\n    }\r\n  }\r\n\r\n  return name + ': ' + str;\r\n}\r\n\r\n\r\nfunction reduceToSingleString(output, base, braces) {\r\n  var numLinesEst = 0;\r\n  var length = output.reduce(function(prev, cur) {\r\n    numLinesEst++;\r\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\r\n    return prev + cur.length + 1;\r\n  }, 0);\r\n\r\n  if (length > 60) {\r\n    return braces[0] +\r\n           (base === '' ? '' : base + '\\n ') +\r\n           ' ' +\r\n           output.join(',\\n  ') +\r\n           ' ' +\r\n           braces[1];\r\n  }\r\n\r\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\r\n}\r\n\r\nfunction isArray(ar) {\r\n  return Array.isArray(ar) ||\r\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\r\n}\r\n\r\nfunction isRegExp(re) {\r\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\r\n}\r\n\r\nfunction isDate(d) {\r\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\r\n}\r\n\r\nfunction isError(e) {\r\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\r\n}\r\n\r\nfunction objectToString(o) {\r\n  return Object.prototype.toString.call(o);\r\n}\r\n\r\n}); // module: chai/utils/inspect.js\r\n\r\nrequire.register(\"chai/utils/overwriteMethod.js\", function(module, exports, require){\r\n/*!\r\n * Chai - overwriteMethod utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * ### overwriteMethod (ctx, name, fn)\r\n *\r\n * Overwites an already existing method and provides\r\n * access to previous function. Must return function\r\n * to be used for name.\r\n *\r\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\r\n *       return function (str) {\r\n *         var obj = utils.flag(this, 'object');\r\n *         if (obj instanceof Foo) {\r\n *           new chai.Assertion(obj.value).to.equal(str);\r\n *         } else {\r\n *           _super.apply(this, arguments);\r\n *         }\r\n *       }\r\n *     });\r\n *\r\n * Can also be accessed directly from `chai.Assertion`.\r\n *\r\n *     chai.Assertion.overwriteMethod('foo', fn);\r\n *\r\n * Then can be used as any other assertion.\r\n *\r\n *     expect(myFoo).to.equal('bar');\r\n *\r\n * @param {Object} ctx object whose method is to be overwritten\r\n * @param {String} name of method to overwrite\r\n * @param {Function} method function that returns a function to be used for name\r\n * @name overwriteMethod\r\n * @api public\r\n */\r\n\r\nmodule.exports = function (ctx, name, method) {\r\n  var _method = ctx[name]\r\n    , _super = function () { return this; };\r\n\r\n  if (_method && 'function' === typeof _method)\r\n    _super = _method;\r\n\r\n  ctx[name] = function () {\r\n    var result = method(_super).apply(this, arguments);\r\n    return result === undefined ? this : result;\r\n  }\r\n};\r\n\r\n}); // module: chai/utils/overwriteMethod.js\r\n\r\nrequire.register(\"chai/utils/overwriteProperty.js\", function(module, exports, require){\r\n/*!\r\n * Chai - overwriteProperty utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * ### overwriteProperty (ctx, name, fn)\r\n *\r\n * Overwites an already existing property getter and provides\r\n * access to previous value. Must return function to use as getter.\r\n *\r\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\r\n *       return function () {\r\n *         var obj = utils.flag(this, 'object');\r\n *         if (obj instanceof Foo) {\r\n *           new chai.Assertion(obj.name).to.equal('bar');\r\n *         } else {\r\n *           _super.call(this);\r\n *         }\r\n *       }\r\n *     });\r\n *\r\n *\r\n * Can also be accessed directly from `chai.Assertion`.\r\n *\r\n *     chai.Assertion.overwriteProperty('foo', fn);\r\n *\r\n * Then can be used as any other assertion.\r\n *\r\n *     expect(myFoo).to.be.ok;\r\n *\r\n * @param {Object} ctx object whose property is to be overwritten\r\n * @param {String} name of property to overwrite\r\n * @param {Function} getter function that returns a getter function to be used for name\r\n * @name overwriteProperty\r\n * @api public\r\n */\r\n\r\nmodule.exports = function (ctx, name, getter) {\r\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\r\n    , _super = function () {};\r\n\r\n  if (_get && 'function' === typeof _get.get)\r\n    _super = _get.get\r\n\r\n  Object.defineProperty(ctx, name,\r\n    { get: function () {\r\n        var result = getter(_super).call(this);\r\n        return result === undefined ? this : result;\r\n      }\r\n    , configurable: true\r\n  });\r\n};\r\n\r\n}); // module: chai/utils/overwriteProperty.js\r\n\r\nrequire.register(\"chai/utils/test.js\", function(module, exports, require){\r\n/*!\r\n * Chai - test utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/*!\r\n * Module dependancies\r\n */\r\n\r\nvar flag = require('./flag');\r\n\r\n/**\r\n * # test(object, expression)\r\n *\r\n * Test and object for expression.\r\n *\r\n * @param {Object} object (constructed Assertion)\r\n * @param {Arguments} chai.Assertion.prototype.assert arguments\r\n */\r\n\r\nmodule.exports = function (obj, args) {\r\n  var negate = flag(obj, 'negate')\r\n    , expr = args[0];\r\n  return negate ? !expr : expr;\r\n};\r\n\r\n}); // module: chai/utils/test.js\r\n\r\nrequire.register(\"chai/utils/transferFlags.js\", function(module, exports, require){\r\n/*!\r\n * Chai - transferFlags utility\r\n * Copyright(c) 2012 Jake Luer <jake@alogicalparadox.com>\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * ### transferFlags(assertion, object, includeAll = true)\r\n *\r\n * Transfer all the flags for `assertion` to `object`. If\r\n * `includeAll` is set to `false`, then the base Chai\r\n * assertion flags (namely `object`, `ssfi`, and `message`)\r\n * will not be transferred.\r\n *\r\n *\r\n *     var newAssertion = new Assertion();\r\n *     utils.transferFlags(assertion, newAssertion);\r\n *\r\n *     var anotherAsseriton = new Assertion(myObj);\r\n *     utils.transferFlags(assertion, anotherAssertion, false);\r\n *\r\n * @param {Assertion} assertion the assertion to transfer the flags from\r\n * @param {Object} object the object to transfer the flags too; usually a new assertion\r\n * @param {Boolean} includeAll\r\n * @name getAllFlags\r\n * @api private\r\n */\r\n\r\nmodule.exports = function (assertion, object, includeAll) {\r\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\r\n\r\n  if (!object.__flags) {\r\n    object.__flags = Object.create(null);\r\n  }\r\n\r\n  includeAll = arguments.length === 3 ? includeAll : true;\r\n\r\n  for (var flag in flags) {\r\n    if (includeAll ||\r\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\r\n      object.__flags[flag] = flags[flag];\r\n    }\r\n  }\r\n};\r\n\r\n}); // module: chai/utils/transferFlags.js\r\n\r\n\r\n  return require('chai');\r\n});",";(function(){\r\n\r\n// CommonJS require()\r\n\r\nfunction require(p){\r\n    var path = require.resolve(p)\r\n      , mod = require.modules[path];\r\n    if (!mod) throw new Error('failed to require \"' + p + '\"');\r\n    if (!mod.exports) {\r\n      mod.exports = {};\r\n      mod.call(mod.exports, mod, mod.exports, require.relative(path));\r\n    }\r\n    return mod.exports;\r\n  }\r\n\r\nrequire.modules = {};\r\n\r\nrequire.resolve = function (path){\r\n    var orig = path\r\n      , reg = path + '.js'\r\n      , index = path + '/index.js';\r\n    return require.modules[reg] && reg\r\n      || require.modules[index] && index\r\n      || orig;\r\n  };\r\n\r\nrequire.register = function (path, fn){\r\n    require.modules[path] = fn;\r\n  };\r\n\r\nrequire.relative = function (parent) {\r\n    return function(p){\r\n      if ('.' != p.charAt(0)) return require(p);\r\n\r\n      var path = parent.split('/')\r\n        , segs = p.split('/');\r\n      path.pop();\r\n\r\n      for (var i = 0; i < segs.length; i++) {\r\n        var seg = segs[i];\r\n        if ('..' == seg) path.pop();\r\n        else if ('.' != seg) path.push(seg);\r\n      }\r\n\r\n      return require(path.join('/'));\r\n    };\r\n  };\r\n\r\n\r\nrequire.register(\"browser/debug.js\", function(module, exports, require){\r\nmodule.exports = function(type){\r\n  return function(){\r\n  }\r\n};\r\n\r\n}); // module: browser/debug.js\r\n\r\nrequire.register(\"browser/diff.js\", function(module, exports, require){\r\n/* See LICENSE file for terms of use */\r\n\r\n/*\r\n * Text diff implementation.\r\n *\r\n * This library supports the following APIS:\r\n * JsDiff.diffChars: Character by character diff\r\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace\r\n * JsDiff.diffLines: Line based diff\r\n *\r\n * JsDiff.diffCss: Diff targeted at CSS content\r\n *\r\n * These methods are based on the implementation proposed in\r\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\r\n */\r\nvar JsDiff = (function() {\r\n  /*jshint maxparams: 5*/\r\n  function clonePath(path) {\r\n    return { newPos: path.newPos, components: path.components.slice(0) };\r\n  }\r\n  function removeEmpty(array) {\r\n    var ret = [];\r\n    for (var i = 0; i < array.length; i++) {\r\n      if (array[i]) {\r\n        ret.push(array[i]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n  function escapeHTML(s) {\r\n    var n = s;\r\n    n = n.replace(/&/g, '&amp;');\r\n    n = n.replace(/</g, '&lt;');\r\n    n = n.replace(/>/g, '&gt;');\r\n    n = n.replace(/\"/g, '&quot;');\r\n\r\n    return n;\r\n  }\r\n\r\n  var Diff = function(ignoreWhitespace) {\r\n    this.ignoreWhitespace = ignoreWhitespace;\r\n  };\r\n  Diff.prototype = {\r\n      diff: function(oldString, newString) {\r\n        // Handle the identity case (this is due to unrolling editLength == 0\r\n        if (newString === oldString) {\r\n          return [{ value: newString }];\r\n        }\r\n        if (!newString) {\r\n          return [{ value: oldString, removed: true }];\r\n        }\r\n        if (!oldString) {\r\n          return [{ value: newString, added: true }];\r\n        }\r\n\r\n        newString = this.tokenize(newString);\r\n        oldString = this.tokenize(oldString);\r\n\r\n        var newLen = newString.length, oldLen = oldString.length;\r\n        var maxEditLength = newLen + oldLen;\r\n        var bestPath = [{ newPos: -1, components: [] }];\r\n\r\n        // Seed editLength = 0\r\n        var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\r\n        if (bestPath[0].newPos+1 >= newLen && oldPos+1 >= oldLen) {\r\n          return bestPath[0].components;\r\n        }\r\n\r\n        for (var editLength = 1; editLength <= maxEditLength; editLength++) {\r\n          for (var diagonalPath = -1*editLength; diagonalPath <= editLength; diagonalPath+=2) {\r\n            var basePath;\r\n            var addPath = bestPath[diagonalPath-1],\r\n                removePath = bestPath[diagonalPath+1];\r\n            oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\r\n            if (addPath) {\r\n              // No one else is going to attempt to use this value, clear it\r\n              bestPath[diagonalPath-1] = undefined;\r\n            }\r\n\r\n            var canAdd = addPath && addPath.newPos+1 < newLen;\r\n            var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\r\n            if (!canAdd && !canRemove) {\r\n              bestPath[diagonalPath] = undefined;\r\n              continue;\r\n            }\r\n\r\n            // Select the diagonal that we want to branch from. We select the prior\r\n            // path whose position in the new string is the farthest from the origin\r\n            // and does not pass the bounds of the diff graph\r\n            if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {\r\n              basePath = clonePath(removePath);\r\n              this.pushComponent(basePath.components, oldString[oldPos], undefined, true);\r\n            } else {\r\n              basePath = clonePath(addPath);\r\n              basePath.newPos++;\r\n              this.pushComponent(basePath.components, newString[basePath.newPos], true, undefined);\r\n            }\r\n\r\n            var oldPos = this.extractCommon(basePath, newString, oldString, diagonalPath);\r\n\r\n            if (basePath.newPos+1 >= newLen && oldPos+1 >= oldLen) {\r\n              return basePath.components;\r\n            } else {\r\n              bestPath[diagonalPath] = basePath;\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      pushComponent: function(components, value, added, removed) {\r\n        var last = components[components.length-1];\r\n        if (last && last.added === added && last.removed === removed) {\r\n          // We need to clone here as the component clone operation is just\r\n          // as shallow array clone\r\n          components[components.length-1] =\r\n            {value: this.join(last.value, value), added: added, removed: removed };\r\n        } else {\r\n          components.push({value: value, added: added, removed: removed });\r\n        }\r\n      },\r\n      extractCommon: function(basePath, newString, oldString, diagonalPath) {\r\n        var newLen = newString.length,\r\n            oldLen = oldString.length,\r\n            newPos = basePath.newPos,\r\n            oldPos = newPos - diagonalPath;\r\n        while (newPos+1 < newLen && oldPos+1 < oldLen && this.equals(newString[newPos+1], oldString[oldPos+1])) {\r\n          newPos++;\r\n          oldPos++;\r\n\r\n          this.pushComponent(basePath.components, newString[newPos], undefined, undefined);\r\n        }\r\n        basePath.newPos = newPos;\r\n        return oldPos;\r\n      },\r\n\r\n      equals: function(left, right) {\r\n        var reWhitespace = /\\S/;\r\n        if (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right)) {\r\n          return true;\r\n        } else {\r\n          return left === right;\r\n        }\r\n      },\r\n      join: function(left, right) {\r\n        return left + right;\r\n      },\r\n      tokenize: function(value) {\r\n        return value;\r\n      }\r\n  };\r\n\r\n  var CharDiff = new Diff();\r\n\r\n  var WordDiff = new Diff(true);\r\n  var WordWithSpaceDiff = new Diff();\r\n  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {\r\n    return removeEmpty(value.split(/(\\s+|\\b)/));\r\n  };\r\n\r\n  var CssDiff = new Diff(true);\r\n  CssDiff.tokenize = function(value) {\r\n    return removeEmpty(value.split(/([{}:;,]|\\s+)/));\r\n  };\r\n\r\n  var LineDiff = new Diff();\r\n  LineDiff.tokenize = function(value) {\r\n    var retLines = [],\r\n        lines = value.split(/^/m);\r\n\r\n    for(var i = 0; i < lines.length; i++) {\r\n      var line = lines[i],\r\n          lastLine = lines[i - 1];\r\n\r\n      // Merge lines that may contain windows new lines\r\n      if (line == '\\n' && lastLine && lastLine[lastLine.length - 1] === '\\r') {\r\n        retLines[retLines.length - 1] += '\\n';\r\n      } else if (line) {\r\n        retLines.push(line);\r\n      }\r\n    }\r\n\r\n    return retLines;\r\n  };\r\n\r\n  return {\r\n    Diff: Diff,\r\n\r\n    diffChars: function(oldStr, newStr) { return CharDiff.diff(oldStr, newStr); },\r\n    diffWords: function(oldStr, newStr) { return WordDiff.diff(oldStr, newStr); },\r\n    diffWordsWithSpace: function(oldStr, newStr) { return WordWithSpaceDiff.diff(oldStr, newStr); },\r\n    diffLines: function(oldStr, newStr) { return LineDiff.diff(oldStr, newStr); },\r\n\r\n    diffCss: function(oldStr, newStr) { return CssDiff.diff(oldStr, newStr); },\r\n\r\n    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {\r\n      var ret = [];\r\n\r\n      ret.push('Index: ' + fileName);\r\n      ret.push('===================================================================');\r\n      ret.push('--- ' + fileName + (typeof oldHeader === 'undefined' ? '' : '\\t' + oldHeader));\r\n      ret.push('+++ ' + fileName + (typeof newHeader === 'undefined' ? '' : '\\t' + newHeader));\r\n\r\n      var diff = LineDiff.diff(oldStr, newStr);\r\n      if (!diff[diff.length-1].value) {\r\n        diff.pop();   // Remove trailing newline add\r\n      }\r\n      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier\r\n\r\n      function contextLines(lines) {\r\n        return lines.map(function(entry) { return ' ' + entry; });\r\n      }\r\n      function eofNL(curRange, i, current) {\r\n        var last = diff[diff.length-2],\r\n            isLast = i === diff.length-2,\r\n            isLastOfType = i === diff.length-3 && (current.added !== last.added || current.removed !== last.removed);\r\n\r\n        // Figure out if this is the last line for the given file and missing NL\r\n        if (!/\\n$/.test(current.value) && (isLast || isLastOfType)) {\r\n          curRange.push('\\\\ No newline at end of file');\r\n        }\r\n      }\r\n\r\n      var oldRangeStart = 0, newRangeStart = 0, curRange = [],\r\n          oldLine = 1, newLine = 1;\r\n      for (var i = 0; i < diff.length; i++) {\r\n        var current = diff[i],\r\n            lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\r\n        current.lines = lines;\r\n\r\n        if (current.added || current.removed) {\r\n          if (!oldRangeStart) {\r\n            var prev = diff[i-1];\r\n            oldRangeStart = oldLine;\r\n            newRangeStart = newLine;\r\n\r\n            if (prev) {\r\n              curRange = contextLines(prev.lines.slice(-4));\r\n              oldRangeStart -= curRange.length;\r\n              newRangeStart -= curRange.length;\r\n            }\r\n          }\r\n          curRange.push.apply(curRange, lines.map(function(entry) { return (current.added?'+':'-') + entry; }));\r\n          eofNL(curRange, i, current);\r\n\r\n          if (current.added) {\r\n            newLine += lines.length;\r\n          } else {\r\n            oldLine += lines.length;\r\n          }\r\n        } else {\r\n          if (oldRangeStart) {\r\n            // Close out any changes that have been output (or join overlapping)\r\n            if (lines.length <= 8 && i < diff.length-2) {\r\n              // Overlapping\r\n              curRange.push.apply(curRange, contextLines(lines));\r\n            } else {\r\n              // end the range and output\r\n              var contextSize = Math.min(lines.length, 4);\r\n              ret.push(\r\n                  '@@ -' + oldRangeStart + ',' + (oldLine-oldRangeStart+contextSize)\r\n                  + ' +' + newRangeStart + ',' + (newLine-newRangeStart+contextSize)\r\n                  + ' @@');\r\n              ret.push.apply(ret, curRange);\r\n              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));\r\n              if (lines.length <= 4) {\r\n                eofNL(ret, i, current);\r\n              }\r\n\r\n              oldRangeStart = 0;  newRangeStart = 0; curRange = [];\r\n            }\r\n          }\r\n          oldLine += lines.length;\r\n          newLine += lines.length;\r\n        }\r\n      }\r\n\r\n      return ret.join('\\n') + '\\n';\r\n    },\r\n\r\n    applyPatch: function(oldStr, uniDiff) {\r\n      var diffstr = uniDiff.split('\\n');\r\n      var diff = [];\r\n      var remEOFNL = false,\r\n          addEOFNL = false;\r\n\r\n      for (var i = (diffstr[0][0]==='I'?4:0); i < diffstr.length; i++) {\r\n        if(diffstr[i][0] === '@') {\r\n          var meh = diffstr[i].split(/@@ -(\\d+),(\\d+) \\+(\\d+),(\\d+) @@/);\r\n          diff.unshift({\r\n            start:meh[3],\r\n            oldlength:meh[2],\r\n            oldlines:[],\r\n            newlength:meh[4],\r\n            newlines:[]\r\n          });\r\n        } else if(diffstr[i][0] === '+') {\r\n          diff[0].newlines.push(diffstr[i].substr(1));\r\n        } else if(diffstr[i][0] === '-') {\r\n          diff[0].oldlines.push(diffstr[i].substr(1));\r\n        } else if(diffstr[i][0] === ' ') {\r\n          diff[0].newlines.push(diffstr[i].substr(1));\r\n          diff[0].oldlines.push(diffstr[i].substr(1));\r\n        } else if(diffstr[i][0] === '\\\\') {\r\n          if (diffstr[i-1][0] === '+') {\r\n            remEOFNL = true;\r\n          } else if(diffstr[i-1][0] === '-') {\r\n            addEOFNL = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      var str = oldStr.split('\\n');\r\n      for (var i = diff.length - 1; i >= 0; i--) {\r\n        var d = diff[i];\r\n        for (var j = 0; j < d.oldlength; j++) {\r\n          if(str[d.start-1+j] !== d.oldlines[j]) {\r\n            return false;\r\n          }\r\n        }\r\n        Array.prototype.splice.apply(str,[d.start-1,+d.oldlength].concat(d.newlines));\r\n      }\r\n\r\n      if (remEOFNL) {\r\n        while (!str[str.length-1]) {\r\n          str.pop();\r\n        }\r\n      } else if (addEOFNL) {\r\n        str.push('');\r\n      }\r\n      return str.join('\\n');\r\n    },\r\n\r\n    convertChangesToXML: function(changes){\r\n      var ret = [];\r\n      for ( var i = 0; i < changes.length; i++) {\r\n        var change = changes[i];\r\n        if (change.added) {\r\n          ret.push('<ins>');\r\n        } else if (change.removed) {\r\n          ret.push('<del>');\r\n        }\r\n\r\n        ret.push(escapeHTML(change.value));\r\n\r\n        if (change.added) {\r\n          ret.push('</ins>');\r\n        } else if (change.removed) {\r\n          ret.push('</del>');\r\n        }\r\n      }\r\n      return ret.join('');\r\n    },\r\n\r\n    // See: http://code.google.com/p/google-diff-match-patch/wiki/API\r\n    convertChangesToDMP: function(changes){\r\n      var ret = [], change;\r\n      for ( var i = 0; i < changes.length; i++) {\r\n        change = changes[i];\r\n        ret.push([(change.added ? 1 : change.removed ? -1 : 0), change.value]);\r\n      }\r\n      return ret;\r\n    }\r\n  };\r\n})();\r\n\r\nif (typeof module !== 'undefined') {\r\n    module.exports = JsDiff;\r\n}\r\n\r\n}); // module: browser/diff.js\r\n\r\nrequire.register(\"browser/escape-string-regexp.js\", function(module, exports, require){\r\n'use strict';\r\n\r\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\r\n\r\nmodule.exports = function (str) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('Expected a string');\r\n  }\r\n\r\n  return str.replace(matchOperatorsRe,  '\\\\$&');\r\n};\r\n\r\n}); // module: browser/escape-string-regexp.js\r\n\r\nrequire.register(\"browser/events.js\", function(module, exports, require){\r\n/**\r\n * Module exports.\r\n */\r\n\r\nexports.EventEmitter = EventEmitter;\r\n\r\n/**\r\n * Check if `obj` is an array.\r\n */\r\n\r\nfunction isArray(obj) {\r\n  return '[object Array]' == {}.toString.call(obj);\r\n}\r\n\r\n/**\r\n * Event emitter constructor.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction EventEmitter(){};\r\n\r\n/**\r\n * Adds a listener.\r\n *\r\n * @api public\r\n */\r\n\r\nEventEmitter.prototype.on = function (name, fn) {\r\n  if (!this.$events) {\r\n    this.$events = {};\r\n  }\r\n\r\n  if (!this.$events[name]) {\r\n    this.$events[name] = fn;\r\n  } else if (isArray(this.$events[name])) {\r\n    this.$events[name].push(fn);\r\n  } else {\r\n    this.$events[name] = [this.$events[name], fn];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\r\n\r\n/**\r\n * Adds a volatile listener.\r\n *\r\n * @api public\r\n */\r\n\r\nEventEmitter.prototype.once = function (name, fn) {\r\n  var self = this;\r\n\r\n  function on () {\r\n    self.removeListener(name, on);\r\n    fn.apply(this, arguments);\r\n  };\r\n\r\n  on.listener = fn;\r\n  this.on(name, on);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Removes a listener.\r\n *\r\n * @api public\r\n */\r\n\r\nEventEmitter.prototype.removeListener = function (name, fn) {\r\n  if (this.$events && this.$events[name]) {\r\n    var list = this.$events[name];\r\n\r\n    if (isArray(list)) {\r\n      var pos = -1;\r\n\r\n      for (var i = 0, l = list.length; i < l; i++) {\r\n        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\r\n          pos = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (pos < 0) {\r\n        return this;\r\n      }\r\n\r\n      list.splice(pos, 1);\r\n\r\n      if (!list.length) {\r\n        delete this.$events[name];\r\n      }\r\n    } else if (list === fn || (list.listener && list.listener === fn)) {\r\n      delete this.$events[name];\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Removes all listeners for an event.\r\n *\r\n * @api public\r\n */\r\n\r\nEventEmitter.prototype.removeAllListeners = function (name) {\r\n  if (name === undefined) {\r\n    this.$events = {};\r\n    return this;\r\n  }\r\n\r\n  if (this.$events && this.$events[name]) {\r\n    this.$events[name] = null;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Gets all listeners for a certain event.\r\n *\r\n * @api public\r\n */\r\n\r\nEventEmitter.prototype.listeners = function (name) {\r\n  if (!this.$events) {\r\n    this.$events = {};\r\n  }\r\n\r\n  if (!this.$events[name]) {\r\n    this.$events[name] = [];\r\n  }\r\n\r\n  if (!isArray(this.$events[name])) {\r\n    this.$events[name] = [this.$events[name]];\r\n  }\r\n\r\n  return this.$events[name];\r\n};\r\n\r\n/**\r\n * Emits an event.\r\n *\r\n * @api public\r\n */\r\n\r\nEventEmitter.prototype.emit = function (name) {\r\n  if (!this.$events) {\r\n    return false;\r\n  }\r\n\r\n  var handler = this.$events[name];\r\n\r\n  if (!handler) {\r\n    return false;\r\n  }\r\n\r\n  var args = [].slice.call(arguments, 1);\r\n\r\n  if ('function' == typeof handler) {\r\n    handler.apply(this, args);\r\n  } else if (isArray(handler)) {\r\n    var listeners = handler.slice();\r\n\r\n    for (var i = 0, l = listeners.length; i < l; i++) {\r\n      listeners[i].apply(this, args);\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n}); // module: browser/events.js\r\n\r\nrequire.register(\"browser/fs.js\", function(module, exports, require){\r\n\r\n}); // module: browser/fs.js\r\n\r\nrequire.register(\"browser/glob.js\", function(module, exports, require){\r\n\r\n}); // module: browser/glob.js\r\n\r\nrequire.register(\"browser/path.js\", function(module, exports, require){\r\n\r\n}); // module: browser/path.js\r\n\r\nrequire.register(\"browser/progress.js\", function(module, exports, require){\r\n/**\r\n * Expose `Progress`.\r\n */\r\n\r\nmodule.exports = Progress;\r\n\r\n/**\r\n * Initialize a new `Progress` indicator.\r\n */\r\n\r\nfunction Progress() {\r\n  this.percent = 0;\r\n  this.size(0);\r\n  this.fontSize(11);\r\n  this.font('helvetica, arial, sans-serif');\r\n}\r\n\r\n/**\r\n * Set progress size to `n`.\r\n *\r\n * @param {Number} n\r\n * @return {Progress} for chaining\r\n * @api public\r\n */\r\n\r\nProgress.prototype.size = function(n){\r\n  this._size = n;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set text to `str`.\r\n *\r\n * @param {String} str\r\n * @return {Progress} for chaining\r\n * @api public\r\n */\r\n\r\nProgress.prototype.text = function(str){\r\n  this._text = str;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set font size to `n`.\r\n *\r\n * @param {Number} n\r\n * @return {Progress} for chaining\r\n * @api public\r\n */\r\n\r\nProgress.prototype.fontSize = function(n){\r\n  this._fontSize = n;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set font `family`.\r\n *\r\n * @param {String} family\r\n * @return {Progress} for chaining\r\n */\r\n\r\nProgress.prototype.font = function(family){\r\n  this._font = family;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Update percentage to `n`.\r\n *\r\n * @param {Number} n\r\n * @return {Progress} for chaining\r\n */\r\n\r\nProgress.prototype.update = function(n){\r\n  this.percent = n;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Draw on `ctx`.\r\n *\r\n * @param {CanvasRenderingContext2d} ctx\r\n * @return {Progress} for chaining\r\n */\r\n\r\nProgress.prototype.draw = function(ctx){\r\n  try {\r\n    var percent = Math.min(this.percent, 100)\r\n      , size = this._size\r\n      , half = size / 2\r\n      , x = half\r\n      , y = half\r\n      , rad = half - 1\r\n      , fontSize = this._fontSize;\r\n\r\n    ctx.font = fontSize + 'px ' + this._font;\r\n\r\n    var angle = Math.PI * 2 * (percent / 100);\r\n    ctx.clearRect(0, 0, size, size);\r\n\r\n    // outer circle\r\n    ctx.strokeStyle = '#9f9f9f';\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, rad, 0, angle, false);\r\n    ctx.stroke();\r\n\r\n    // inner circle\r\n    ctx.strokeStyle = '#eee';\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, rad - 1, 0, angle, true);\r\n    ctx.stroke();\r\n\r\n    // text\r\n    var text = this._text || (percent | 0) + '%'\r\n      , w = ctx.measureText(text).width;\r\n\r\n    ctx.fillText(\r\n        text\r\n      , x - w / 2 + 1\r\n      , y + fontSize / 2 - 1);\r\n  } catch (ex) {} //don't fail if we can't render progress\r\n  return this;\r\n};\r\n\r\n}); // module: browser/progress.js\r\n\r\nrequire.register(\"browser/tty.js\", function(module, exports, require){\r\nexports.isatty = function(){\r\n  return true;\r\n};\r\n\r\nexports.getWindowSize = function(){\r\n  if ('innerHeight' in global) {\r\n    return [global.innerHeight, global.innerWidth];\r\n  } else {\r\n    // In a Web Worker, the DOM Window is not available.\r\n    return [640, 480];\r\n  }\r\n};\r\n\r\n}); // module: browser/tty.js\r\n\r\nrequire.register(\"context.js\", function(module, exports, require){\r\n/**\r\n * Expose `Context`.\r\n */\r\n\r\nmodule.exports = Context;\r\n\r\n/**\r\n * Initialize a new `Context`.\r\n *\r\n * @api private\r\n */\r\n\r\nfunction Context(){}\r\n\r\n/**\r\n * Set or get the context `Runnable` to `runnable`.\r\n *\r\n * @param {Runnable} runnable\r\n * @return {Context}\r\n * @api private\r\n */\r\n\r\nContext.prototype.runnable = function(runnable){\r\n  if (0 == arguments.length) return this._runnable;\r\n  this.test = this._runnable = runnable;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set test timeout `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {Context} self\r\n * @api private\r\n */\r\n\r\nContext.prototype.timeout = function(ms){\r\n  if (arguments.length === 0) return this.runnable().timeout();\r\n  this.runnable().timeout(ms);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set test timeout `enabled`.\r\n *\r\n * @param {Boolean} enabled\r\n * @return {Context} self\r\n * @api private\r\n */\r\n\r\nContext.prototype.enableTimeouts = function (enabled) {\r\n  this.runnable().enableTimeouts(enabled);\r\n  return this;\r\n};\r\n\r\n\r\n/**\r\n * Set test slowness threshold `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {Context} self\r\n * @api private\r\n */\r\n\r\nContext.prototype.slow = function(ms){\r\n  this.runnable().slow(ms);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Inspect the context void of `._runnable`.\r\n *\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nContext.prototype.inspect = function(){\r\n  return JSON.stringify(this, function(key, val){\r\n    if ('_runnable' == key) return;\r\n    if ('test' == key) return;\r\n    return val;\r\n  }, 2);\r\n};\r\n\r\n}); // module: context.js\r\n\r\nrequire.register(\"hook.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Runnable = require('./runnable');\r\n\r\n/**\r\n * Expose `Hook`.\r\n */\r\n\r\nmodule.exports = Hook;\r\n\r\n/**\r\n * Initialize a new `Hook` with the given `title` and callback `fn`.\r\n *\r\n * @param {String} title\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nfunction Hook(title, fn) {\r\n  Runnable.call(this, title, fn);\r\n  this.type = 'hook';\r\n}\r\n\r\n/**\r\n * Inherit from `Runnable.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = Runnable.prototype;\r\nHook.prototype = new F;\r\nHook.prototype.constructor = Hook;\r\n\r\n\r\n/**\r\n * Get or set the test `err`.\r\n *\r\n * @param {Error} err\r\n * @return {Error}\r\n * @api public\r\n */\r\n\r\nHook.prototype.error = function(err){\r\n  if (0 == arguments.length) {\r\n    var err = this._error;\r\n    this._error = null;\r\n    return err;\r\n  }\r\n\r\n  this._error = err;\r\n};\r\n\r\n}); // module: hook.js\r\n\r\nrequire.register(\"interfaces/bdd.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Suite = require('../suite')\r\n  , Test = require('../test')\r\n  , utils = require('../utils')\r\n  , escapeRe = require('browser/escape-string-regexp');\r\n\r\n/**\r\n * BDD-style interface:\r\n *\r\n *      describe('Array', function(){\r\n *        describe('#indexOf()', function(){\r\n *          it('should return -1 when not present', function(){\r\n *\r\n *          });\r\n *\r\n *          it('should return the index when present', function(){\r\n *\r\n *          });\r\n *        });\r\n *      });\r\n *\r\n */\r\n\r\nmodule.exports = function(suite){\r\n  var suites = [suite];\r\n\r\n  suite.on('pre-require', function(context, file, mocha){\r\n\r\n    /**\r\n     * Execute before running tests.\r\n     */\r\n\r\n    context.before = function(name, fn){\r\n      suites[0].beforeAll(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Execute after running tests.\r\n     */\r\n\r\n    context.after = function(name, fn){\r\n      suites[0].afterAll(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Execute before each test case.\r\n     */\r\n\r\n    context.beforeEach = function(name, fn){\r\n      suites[0].beforeEach(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Execute after each test case.\r\n     */\r\n\r\n    context.afterEach = function(name, fn){\r\n      suites[0].afterEach(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Describe a \"suite\" with the given `title`\r\n     * and callback `fn` containing nested suites\r\n     * and/or tests.\r\n     */\r\n\r\n    context.describe = context.context = function(title, fn){\r\n      var suite = Suite.create(suites[0], title);\r\n      suite.file = file;\r\n      suites.unshift(suite);\r\n      fn.call(suite);\r\n      suites.shift();\r\n      return suite;\r\n    };\r\n\r\n    /**\r\n     * Pending describe.\r\n     */\r\n\r\n    context.xdescribe =\r\n    context.xcontext =\r\n    context.describe.skip = function(title, fn){\r\n      var suite = Suite.create(suites[0], title);\r\n      suite.pending = true;\r\n      suites.unshift(suite);\r\n      fn.call(suite);\r\n      suites.shift();\r\n    };\r\n\r\n    /**\r\n     * Exclusive suite.\r\n     */\r\n\r\n    context.describe.only = function(title, fn){\r\n      var suite = context.describe(title, fn);\r\n      mocha.grep(suite.fullTitle());\r\n      return suite;\r\n    };\r\n\r\n    /**\r\n     * Describe a specification or test-case\r\n     * with the given `title` and callback `fn`\r\n     * acting as a thunk.\r\n     */\r\n\r\n    context.it = context.specify = function(title, fn){\r\n      var suite = suites[0];\r\n      if (suite.pending) fn = null;\r\n      var test = new Test(title, fn);\r\n      test.file = file;\r\n      suite.addTest(test);\r\n      return test;\r\n    };\r\n\r\n    /**\r\n     * Exclusive test-case.\r\n     */\r\n\r\n    context.it.only = function(title, fn){\r\n      var test = context.it(title, fn);\r\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\r\n      mocha.grep(new RegExp(reString));\r\n      return test;\r\n    };\r\n\r\n    /**\r\n     * Pending test case.\r\n     */\r\n\r\n    context.xit =\r\n    context.xspecify =\r\n    context.it.skip = function(title){\r\n      context.it(title);\r\n    };\r\n  });\r\n};\r\n\r\n}); // module: interfaces/bdd.js\r\n\r\nrequire.register(\"interfaces/exports.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Suite = require('../suite')\r\n  , Test = require('../test');\r\n\r\n/**\r\n * TDD-style interface:\r\n *\r\n *     exports.Array = {\r\n *       '#indexOf()': {\r\n *         'should return -1 when the value is not present': function(){\r\n *\r\n *         },\r\n *\r\n *         'should return the correct index when the value is present': function(){\r\n *\r\n *         }\r\n *       }\r\n *     };\r\n *\r\n */\r\n\r\nmodule.exports = function(suite){\r\n  var suites = [suite];\r\n\r\n  suite.on('require', visit);\r\n\r\n  function visit(obj, file) {\r\n    var suite;\r\n    for (var key in obj) {\r\n      if ('function' == typeof obj[key]) {\r\n        var fn = obj[key];\r\n        switch (key) {\r\n          case 'before':\r\n            suites[0].beforeAll(fn);\r\n            break;\r\n          case 'after':\r\n            suites[0].afterAll(fn);\r\n            break;\r\n          case 'beforeEach':\r\n            suites[0].beforeEach(fn);\r\n            break;\r\n          case 'afterEach':\r\n            suites[0].afterEach(fn);\r\n            break;\r\n          default:\r\n            var test = new Test(key, fn);\r\n            test.file = file;\r\n            suites[0].addTest(test);\r\n        }\r\n      } else {\r\n        suite = Suite.create(suites[0], key);\r\n        suites.unshift(suite);\r\n        visit(obj[key]);\r\n        suites.shift();\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n}); // module: interfaces/exports.js\r\n\r\nrequire.register(\"interfaces/index.js\", function(module, exports, require){\r\nexports.bdd = require('./bdd');\r\nexports.tdd = require('./tdd');\r\nexports.qunit = require('./qunit');\r\nexports.exports = require('./exports');\r\n\r\n}); // module: interfaces/index.js\r\n\r\nrequire.register(\"interfaces/qunit.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Suite = require('../suite')\r\n  , Test = require('../test')\r\n  , escapeRe = require('browser/escape-string-regexp')\r\n  , utils = require('../utils');\r\n\r\n/**\r\n * QUnit-style interface:\r\n *\r\n *     suite('Array');\r\n *\r\n *     test('#length', function(){\r\n *       var arr = [1,2,3];\r\n *       ok(arr.length == 3);\r\n *     });\r\n *\r\n *     test('#indexOf()', function(){\r\n *       var arr = [1,2,3];\r\n *       ok(arr.indexOf(1) == 0);\r\n *       ok(arr.indexOf(2) == 1);\r\n *       ok(arr.indexOf(3) == 2);\r\n *     });\r\n *\r\n *     suite('String');\r\n *\r\n *     test('#length', function(){\r\n *       ok('foo'.length == 3);\r\n *     });\r\n *\r\n */\r\n\r\nmodule.exports = function(suite){\r\n  var suites = [suite];\r\n\r\n  suite.on('pre-require', function(context, file, mocha){\r\n\r\n    /**\r\n     * Execute before running tests.\r\n     */\r\n\r\n    context.before = function(name, fn){\r\n      suites[0].beforeAll(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Execute after running tests.\r\n     */\r\n\r\n    context.after = function(name, fn){\r\n      suites[0].afterAll(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Execute before each test case.\r\n     */\r\n\r\n    context.beforeEach = function(name, fn){\r\n      suites[0].beforeEach(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Execute after each test case.\r\n     */\r\n\r\n    context.afterEach = function(name, fn){\r\n      suites[0].afterEach(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Describe a \"suite\" with the given `title`.\r\n     */\r\n\r\n    context.suite = function(title){\r\n      if (suites.length > 1) suites.shift();\r\n      var suite = Suite.create(suites[0], title);\r\n      suite.file = file;\r\n      suites.unshift(suite);\r\n      return suite;\r\n    };\r\n\r\n    /**\r\n     * Exclusive test-case.\r\n     */\r\n\r\n    context.suite.only = function(title, fn){\r\n      var suite = context.suite(title, fn);\r\n      mocha.grep(suite.fullTitle());\r\n    };\r\n\r\n    /**\r\n     * Describe a specification or test-case\r\n     * with the given `title` and callback `fn`\r\n     * acting as a thunk.\r\n     */\r\n\r\n    context.test = function(title, fn){\r\n      var test = new Test(title, fn);\r\n      test.file = file;\r\n      suites[0].addTest(test);\r\n      return test;\r\n    };\r\n\r\n    /**\r\n     * Exclusive test-case.\r\n     */\r\n\r\n    context.test.only = function(title, fn){\r\n      var test = context.test(title, fn);\r\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\r\n      mocha.grep(new RegExp(reString));\r\n    };\r\n\r\n    /**\r\n     * Pending test case.\r\n     */\r\n\r\n    context.test.skip = function(title){\r\n      context.test(title);\r\n    };\r\n  });\r\n};\r\n\r\n}); // module: interfaces/qunit.js\r\n\r\nrequire.register(\"interfaces/tdd.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Suite = require('../suite')\r\n  , Test = require('../test')\r\n  , escapeRe = require('browser/escape-string-regexp')\r\n  , utils = require('../utils');\r\n\r\n/**\r\n * TDD-style interface:\r\n *\r\n *      suite('Array', function(){\r\n *        suite('#indexOf()', function(){\r\n *          suiteSetup(function(){\r\n *\r\n *          });\r\n *\r\n *          test('should return -1 when not present', function(){\r\n *\r\n *          });\r\n *\r\n *          test('should return the index when present', function(){\r\n *\r\n *          });\r\n *\r\n *          suiteTeardown(function(){\r\n *\r\n *          });\r\n *        });\r\n *      });\r\n *\r\n */\r\n\r\nmodule.exports = function(suite){\r\n  var suites = [suite];\r\n\r\n  suite.on('pre-require', function(context, file, mocha){\r\n\r\n    /**\r\n     * Execute before each test case.\r\n     */\r\n\r\n    context.setup = function(name, fn){\r\n      suites[0].beforeEach(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Execute after each test case.\r\n     */\r\n\r\n    context.teardown = function(name, fn){\r\n      suites[0].afterEach(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Execute before the suite.\r\n     */\r\n\r\n    context.suiteSetup = function(name, fn){\r\n      suites[0].beforeAll(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Execute after the suite.\r\n     */\r\n\r\n    context.suiteTeardown = function(name, fn){\r\n      suites[0].afterAll(name, fn);\r\n    };\r\n\r\n    /**\r\n     * Describe a \"suite\" with the given `title`\r\n     * and callback `fn` containing nested suites\r\n     * and/or tests.\r\n     */\r\n\r\n    context.suite = function(title, fn){\r\n      var suite = Suite.create(suites[0], title);\r\n      suite.file = file;\r\n      suites.unshift(suite);\r\n      fn.call(suite);\r\n      suites.shift();\r\n      return suite;\r\n    };\r\n\r\n    /**\r\n     * Pending suite.\r\n     */\r\n    context.suite.skip = function(title, fn) {\r\n      var suite = Suite.create(suites[0], title);\r\n      suite.pending = true;\r\n      suites.unshift(suite);\r\n      fn.call(suite);\r\n      suites.shift();\r\n    };\r\n\r\n    /**\r\n     * Exclusive test-case.\r\n     */\r\n\r\n    context.suite.only = function(title, fn){\r\n      var suite = context.suite(title, fn);\r\n      mocha.grep(suite.fullTitle());\r\n    };\r\n\r\n    /**\r\n     * Describe a specification or test-case\r\n     * with the given `title` and callback `fn`\r\n     * acting as a thunk.\r\n     */\r\n\r\n    context.test = function(title, fn){\r\n      var suite = suites[0];\r\n      if (suite.pending) fn = null;\r\n      var test = new Test(title, fn);\r\n      test.file = file;\r\n      suite.addTest(test);\r\n      return test;\r\n    };\r\n\r\n    /**\r\n     * Exclusive test-case.\r\n     */\r\n\r\n    context.test.only = function(title, fn){\r\n      var test = context.test(title, fn);\r\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\r\n      mocha.grep(new RegExp(reString));\r\n    };\r\n\r\n    /**\r\n     * Pending test case.\r\n     */\r\n\r\n    context.test.skip = function(title){\r\n      context.test(title);\r\n    };\r\n  });\r\n};\r\n\r\n}); // module: interfaces/tdd.js\r\n\r\nrequire.register(\"mocha.js\", function(module, exports, require){\r\n/*!\r\n * mocha\r\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar path = require('browser/path')\r\n  , escapeRe = require('browser/escape-string-regexp')\r\n  , utils = require('./utils');\r\n\r\n/**\r\n * Expose `Mocha`.\r\n */\r\n\r\nexports = module.exports = Mocha;\r\n\r\n/**\r\n * To require local UIs and reporters when running in node.\r\n */\r\n\r\nif (typeof process !== 'undefined' && typeof process.cwd === 'function') {\r\n  var join = path.join\r\n    , cwd = process.cwd();\r\n  module.paths.push(cwd, join(cwd, 'node_modules'));\r\n}\r\n\r\n/**\r\n * Expose internals.\r\n */\r\n\r\nexports.utils = utils;\r\nexports.interfaces = require('./interfaces');\r\nexports.reporters = require('./reporters');\r\nexports.Runnable = require('./runnable');\r\nexports.Context = require('./context');\r\nexports.Runner = require('./runner');\r\nexports.Suite = require('./suite');\r\nexports.Hook = require('./hook');\r\nexports.Test = require('./test');\r\n\r\n/**\r\n * Return image `name` path.\r\n *\r\n * @param {String} name\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction image(name) {\r\n  return __dirname + '/../images/' + name + '.png';\r\n}\r\n\r\n/**\r\n * Setup mocha with `options`.\r\n *\r\n * Options:\r\n *\r\n *   - `ui` name \"bdd\", \"tdd\", \"exports\" etc\r\n *   - `reporter` reporter instance, defaults to `mocha.reporters.spec`\r\n *   - `globals` array of accepted globals\r\n *   - `timeout` timeout in milliseconds\r\n *   - `bail` bail on the first test failure\r\n *   - `slow` milliseconds to wait before considering a test slow\r\n *   - `ignoreLeaks` ignore global leaks\r\n *   - `grep` string or regexp to filter tests with\r\n *\r\n * @param {Object} options\r\n * @api public\r\n */\r\n\r\nfunction Mocha(options) {\r\n  options = options || {};\r\n  this.files = [];\r\n  this.options = options;\r\n  this.grep(options.grep);\r\n  this.suite = new exports.Suite('', new exports.Context);\r\n  this.ui(options.ui);\r\n  this.bail(options.bail);\r\n  this.reporter(options.reporter, options.reporterOptions);\r\n  if (null != options.timeout) this.timeout(options.timeout);\r\n  this.useColors(options.useColors)\r\n  if (options.enableTimeouts !== null) this.enableTimeouts(options.enableTimeouts);\r\n  if (options.slow) this.slow(options.slow);\r\n\r\n  this.suite.on('pre-require', function (context) {\r\n    exports.afterEach = context.afterEach || context.teardown;\r\n    exports.after = context.after || context.suiteTeardown;\r\n    exports.beforeEach = context.beforeEach || context.setup;\r\n    exports.before = context.before || context.suiteSetup;\r\n    exports.describe = context.describe || context.suite;\r\n    exports.it = context.it || context.test;\r\n    exports.setup = context.setup || context.beforeEach;\r\n    exports.suiteSetup = context.suiteSetup || context.before;\r\n    exports.suiteTeardown = context.suiteTeardown || context.after;\r\n    exports.suite = context.suite || context.describe;\r\n    exports.teardown = context.teardown || context.afterEach;\r\n    exports.test = context.test || context.it;\r\n  });\r\n}\r\n\r\n/**\r\n * Enable or disable bailing on the first failure.\r\n *\r\n * @param {Boolean} [bail]\r\n * @api public\r\n */\r\n\r\nMocha.prototype.bail = function(bail){\r\n  if (0 == arguments.length) bail = true;\r\n  this.suite.bail(bail);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Add test `file`.\r\n *\r\n * @param {String} file\r\n * @api public\r\n */\r\n\r\nMocha.prototype.addFile = function(file){\r\n  this.files.push(file);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set reporter to `reporter`, defaults to \"spec\".\r\n *\r\n * @param {String|Function} reporter name or constructor\r\n * @param {Object} reporterOptions optional options\r\n * @api public\r\n */\r\nMocha.prototype.reporter = function(reporter, reporterOptions){\r\n  if ('function' == typeof reporter) {\r\n    this._reporter = reporter;\r\n  } else {\r\n    reporter = reporter || 'spec';\r\n    var _reporter;\r\n    try { _reporter = require('./reporters/' + reporter); } catch (err) {};\r\n    if (!_reporter) try { _reporter = require(reporter); } catch (err) {};\r\n    if (!_reporter && reporter === 'teamcity')\r\n      console.warn('The Teamcity reporter was moved to a package named ' +\r\n        'mocha-teamcity-reporter ' +\r\n        '(https://npmjs.org/package/mocha-teamcity-reporter).');\r\n    if (!_reporter) throw new Error('invalid reporter \"' + reporter + '\"');\r\n    this._reporter = _reporter;\r\n  }\r\n  this.options.reporterOptions = reporterOptions;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set test UI `name`, defaults to \"bdd\".\r\n *\r\n * @param {String} bdd\r\n * @api public\r\n */\r\n\r\nMocha.prototype.ui = function(name){\r\n  name = name || 'bdd';\r\n  this._ui = exports.interfaces[name];\r\n  if (!this._ui) try { this._ui = require(name); } catch (err) {};\r\n  if (!this._ui) throw new Error('invalid interface \"' + name + '\"');\r\n  this._ui = this._ui(this.suite);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Load registered files.\r\n *\r\n * @api private\r\n */\r\n\r\nMocha.prototype.loadFiles = function(fn){\r\n  var self = this;\r\n  var suite = this.suite;\r\n  var pending = this.files.length;\r\n  this.files.forEach(function(file){\r\n    file = path.resolve(file);\r\n    suite.emit('pre-require', global, file, self);\r\n    suite.emit('require', require(file), file, self);\r\n    suite.emit('post-require', global, file, self);\r\n    --pending || (fn && fn());\r\n  });\r\n};\r\n\r\n/**\r\n * Enable growl support.\r\n *\r\n * @api private\r\n */\r\n\r\nMocha.prototype._growl = function(runner, reporter) {\r\n  var notify = require('growl');\r\n\r\n  runner.on('end', function(){\r\n    var stats = reporter.stats;\r\n    if (stats.failures) {\r\n      var msg = stats.failures + ' of ' + runner.total + ' tests failed';\r\n      notify(msg, { name: 'mocha', title: 'Failed', image: image('error') });\r\n    } else {\r\n      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {\r\n          name: 'mocha'\r\n        , title: 'Passed'\r\n        , image: image('ok')\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Add regexp to grep, if `re` is a string it is escaped.\r\n *\r\n * @param {RegExp|String} re\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.grep = function(re){\r\n  this.options.grep = 'string' == typeof re\r\n    ? new RegExp(escapeRe(re))\r\n    : re;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Invert `.grep()` matches.\r\n *\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.invert = function(){\r\n  this.options.invert = true;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Ignore global leaks.\r\n *\r\n * @param {Boolean} ignore\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.ignoreLeaks = function(ignore){\r\n  this.options.ignoreLeaks = !!ignore;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Enable global leak checking.\r\n *\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.checkLeaks = function(){\r\n  this.options.ignoreLeaks = false;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Enable growl support.\r\n *\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.growl = function(){\r\n  this.options.growl = true;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Ignore `globals` array or string.\r\n *\r\n * @param {Array|String} globals\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.globals = function(globals){\r\n  this.options.globals = (this.options.globals || []).concat(globals);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit color output.\r\n *\r\n * @param {Boolean} colors\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.useColors = function(colors){\r\n  if (colors !== undefined) {\r\n    this.options.useColors = colors;\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Use inline diffs rather than +/-.\r\n *\r\n * @param {Boolean} inlineDiffs\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.useInlineDiffs = function(inlineDiffs) {\r\n  this.options.useInlineDiffs = arguments.length && inlineDiffs != undefined\r\n  ? inlineDiffs\r\n  : false;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set the timeout in milliseconds.\r\n *\r\n * @param {Number} timeout\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.timeout = function(timeout){\r\n  this.suite.timeout(timeout);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set slowness threshold in milliseconds.\r\n *\r\n * @param {Number} slow\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.slow = function(slow){\r\n  this.suite.slow(slow);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Enable timeouts.\r\n *\r\n * @param {Boolean} enabled\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.enableTimeouts = function(enabled) {\r\n  this.suite.enableTimeouts(arguments.length && enabled !== undefined\r\n    ? enabled\r\n    : true);\r\n  return this\r\n};\r\n\r\n/**\r\n * Makes all tests async (accepting a callback)\r\n *\r\n * @return {Mocha}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.asyncOnly = function(){\r\n  this.options.asyncOnly = true;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Disable syntax highlighting (in browser).\r\n * @returns {Mocha}\r\n * @api public\r\n */\r\nMocha.prototype.noHighlighting = function() {\r\n  this.options.noHighlighting = true;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Run tests and invoke `fn()` when complete.\r\n *\r\n * @param {Function} fn\r\n * @return {Runner}\r\n * @api public\r\n */\r\n\r\nMocha.prototype.run = function(fn){\r\n  if (this.files.length) this.loadFiles();\r\n  var suite = this.suite;\r\n  var options = this.options;\r\n  options.files = this.files;\r\n  var runner = new exports.Runner(suite);\r\n  var reporter = new this._reporter(runner, options);\r\n  runner.ignoreLeaks = false !== options.ignoreLeaks;\r\n  runner.asyncOnly = options.asyncOnly;\r\n  if (options.grep) runner.grep(options.grep, options.invert);\r\n  if (options.globals) runner.globals(options.globals);\r\n  if (options.growl) this._growl(runner, reporter);\r\n  if (options.useColors !== undefined) {\r\n    exports.reporters.Base.useColors = options.useColors;\r\n  }\r\n  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;\r\n\r\n  function done(failures) {\r\n      if (reporter.done) {\r\n          reporter.done(failures, fn);\r\n      } else {\r\n          fn(failures);\r\n      }\r\n  }\r\n\r\n  return runner.run(done);\r\n};\r\n\r\n}); // module: mocha.js\r\n\r\nrequire.register(\"ms.js\", function(module, exports, require){\r\n/**\r\n * Helpers.\r\n */\r\n\r\nvar s = 1000;\r\nvar m = s * 60;\r\nvar h = m * 60;\r\nvar d = h * 24;\r\nvar y = d * 365.25;\r\n\r\n/**\r\n * Parse or format the given `val`.\r\n *\r\n * Options:\r\n *\r\n *  - `long` verbose formatting [false]\r\n *\r\n * @param {String|Number} val\r\n * @param {Object} options\r\n * @return {String|Number}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function(val, options){\r\n  options = options || {};\r\n  if ('string' == typeof val) return parse(val);\r\n  return options['long'] ? longFormat(val) : shortFormat(val);\r\n};\r\n\r\n/**\r\n * Parse the given `str` and return milliseconds.\r\n *\r\n * @param {String} str\r\n * @return {Number}\r\n * @api private\r\n */\r\n\r\nfunction parse(str) {\r\n  var match = /^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);\r\n  if (!match) return;\r\n  var n = parseFloat(match[1]);\r\n  var type = (match[2] || 'ms').toLowerCase();\r\n  switch (type) {\r\n    case 'years':\r\n    case 'year':\r\n    case 'y':\r\n      return n * y;\r\n    case 'days':\r\n    case 'day':\r\n    case 'd':\r\n      return n * d;\r\n    case 'hours':\r\n    case 'hour':\r\n    case 'h':\r\n      return n * h;\r\n    case 'minutes':\r\n    case 'minute':\r\n    case 'm':\r\n      return n * m;\r\n    case 'seconds':\r\n    case 'second':\r\n    case 's':\r\n      return n * s;\r\n    case 'ms':\r\n      return n;\r\n  }\r\n}\r\n\r\n/**\r\n * Short format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction shortFormat(ms) {\r\n  if (ms >= d) return Math.round(ms / d) + 'd';\r\n  if (ms >= h) return Math.round(ms / h) + 'h';\r\n  if (ms >= m) return Math.round(ms / m) + 'm';\r\n  if (ms >= s) return Math.round(ms / s) + 's';\r\n  return ms + 'ms';\r\n}\r\n\r\n/**\r\n * Long format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction longFormat(ms) {\r\n  return plural(ms, d, 'day')\r\n    || plural(ms, h, 'hour')\r\n    || plural(ms, m, 'minute')\r\n    || plural(ms, s, 'second')\r\n    || ms + ' ms';\r\n}\r\n\r\n/**\r\n * Pluralization helper.\r\n */\r\n\r\nfunction plural(ms, n, name) {\r\n  if (ms < n) return;\r\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\r\n  return Math.ceil(ms / n) + ' ' + name + 's';\r\n}\r\n\r\n}); // module: ms.js\r\n\r\nrequire.register(\"reporters/base.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar tty = require('browser/tty')\r\n  , diff = require('browser/diff')\r\n  , ms = require('../ms')\r\n  , utils = require('../utils');\r\n\r\n/**\r\n * Save timer references to avoid Sinon interfering (see GH-237).\r\n */\r\n\r\nvar Date = global.Date\r\n  , setTimeout = global.setTimeout\r\n  , setInterval = global.setInterval\r\n  , clearTimeout = global.clearTimeout\r\n  , clearInterval = global.clearInterval;\r\n\r\n/**\r\n * Check if both stdio streams are associated with a tty.\r\n */\r\n\r\nvar isatty = tty.isatty(1) && tty.isatty(2);\r\n\r\n/**\r\n * Expose `Base`.\r\n */\r\n\r\nexports = module.exports = Base;\r\n\r\n/**\r\n * Enable coloring by default.\r\n */\r\n\r\nexports.useColors = isatty || (process.env.MOCHA_COLORS !== undefined);\r\n\r\n/**\r\n * Inline diffs instead of +/-\r\n */\r\n\r\nexports.inlineDiffs = false;\r\n\r\n/**\r\n * Default color map.\r\n */\r\n\r\nexports.colors = {\r\n    'pass': 90\r\n  , 'fail': 31\r\n  , 'bright pass': 92\r\n  , 'bright fail': 91\r\n  , 'bright yellow': 93\r\n  , 'pending': 36\r\n  , 'suite': 0\r\n  , 'error title': 0\r\n  , 'error message': 31\r\n  , 'error stack': 90\r\n  , 'checkmark': 32\r\n  , 'fast': 90\r\n  , 'medium': 33\r\n  , 'slow': 31\r\n  , 'green': 32\r\n  , 'light': 90\r\n  , 'diff gutter': 90\r\n  , 'diff added': 42\r\n  , 'diff removed': 41\r\n};\r\n\r\n/**\r\n * Default symbol map.\r\n */\r\n\r\nexports.symbols = {\r\n  ok: '✓',\r\n  err: '✖',\r\n  dot: '․'\r\n};\r\n\r\n// With node.js on Windows: use symbols available in terminal default fonts\r\nif ('win32' == process.platform) {\r\n  exports.symbols.ok = '\\u221A';\r\n  exports.symbols.err = '\\u00D7';\r\n  exports.symbols.dot = '.';\r\n}\r\n\r\n/**\r\n * Color `str` with the given `type`,\r\n * allowing colors to be disabled,\r\n * as well as user-defined color\r\n * schemes.\r\n *\r\n * @param {String} type\r\n * @param {String} str\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nvar color = exports.color = function(type, str) {\r\n  if (!exports.useColors) return String(str);\r\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\r\n};\r\n\r\n/**\r\n * Expose term window size, with some\r\n * defaults for when stderr is not a tty.\r\n */\r\n\r\nexports.window = {\r\n  width: isatty\r\n    ? process.stdout.getWindowSize\r\n      ? process.stdout.getWindowSize(1)[0]\r\n      : tty.getWindowSize()[1]\r\n    : 75\r\n};\r\n\r\n/**\r\n * Expose some basic cursor interactions\r\n * that are common among reporters.\r\n */\r\n\r\nexports.cursor = {\r\n  hide: function(){\r\n    isatty && process.stdout.write('\\u001b[?25l');\r\n  },\r\n\r\n  show: function(){\r\n    isatty && process.stdout.write('\\u001b[?25h');\r\n  },\r\n\r\n  deleteLine: function(){\r\n    isatty && process.stdout.write('\\u001b[2K');\r\n  },\r\n\r\n  beginningOfLine: function(){\r\n    isatty && process.stdout.write('\\u001b[0G');\r\n  },\r\n\r\n  CR: function(){\r\n    if (isatty) {\r\n      exports.cursor.deleteLine();\r\n      exports.cursor.beginningOfLine();\r\n    } else {\r\n      process.stdout.write('\\r');\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Outut the given `failures` as a list.\r\n *\r\n * @param {Array} failures\r\n * @api public\r\n */\r\n\r\nexports.list = function(failures){\r\n  console.log();\r\n  failures.forEach(function(test, i){\r\n    // format\r\n    var fmt = color('error title', '  %s) %s:\\n')\r\n      + color('error message', '     %s')\r\n      + color('error stack', '\\n%s\\n');\r\n\r\n    // msg\r\n    var err = test.err\r\n      , message = err.message || ''\r\n      , stack = err.stack || message\r\n      , index = stack.indexOf(message) + message.length\r\n      , msg = stack.slice(0, index)\r\n      , actual = err.actual\r\n      , expected = err.expected\r\n      , escape = true;\r\n\r\n    // uncaught\r\n    if (err.uncaught) {\r\n      msg = 'Uncaught ' + msg;\r\n    }\r\n\r\n    // explicitly show diff\r\n    if (err.showDiff && sameType(actual, expected)) {\r\n\r\n      if ('string' !== typeof actual) {\r\n        escape = false;\r\n        err.actual = actual = utils.stringify(actual);\r\n        err.expected = expected = utils.stringify(expected);\r\n      }\r\n\r\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\r\n      var match = message.match(/^([^:]+): expected/);\r\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\r\n\r\n      if (exports.inlineDiffs) {\r\n        msg += inlineDiff(err, escape);\r\n      } else {\r\n        msg += unifiedDiff(err, escape);\r\n      }\r\n    }\r\n\r\n    // indent stack trace without msg\r\n    stack = stack.slice(index ? index + 1 : index)\r\n      .replace(/^/gm, '  ');\r\n\r\n    console.log(fmt, (i + 1), test.fullTitle(), msg, stack);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize a new `Base` reporter.\r\n *\r\n * All other reporters generally\r\n * inherit from this reporter, providing\r\n * stats such as test duration, number\r\n * of tests passed / failed etc.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction Base(runner) {\r\n  var self = this\r\n    , stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 }\r\n    , failures = this.failures = [];\r\n\r\n  if (!runner) return;\r\n  this.runner = runner;\r\n\r\n  runner.stats = stats;\r\n\r\n  runner.on('start', function(){\r\n    stats.start = new Date;\r\n  });\r\n\r\n  runner.on('suite', function(suite){\r\n    stats.suites = stats.suites || 0;\r\n    suite.root || stats.suites++;\r\n  });\r\n\r\n  runner.on('test end', function(test){\r\n    stats.tests = stats.tests || 0;\r\n    stats.tests++;\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    stats.passes = stats.passes || 0;\r\n\r\n    var medium = test.slow() / 2;\r\n    test.speed = test.duration > test.slow()\r\n      ? 'slow'\r\n      : test.duration > medium\r\n        ? 'medium'\r\n        : 'fast';\r\n\r\n    stats.passes++;\r\n  });\r\n\r\n  runner.on('fail', function(test, err){\r\n    stats.failures = stats.failures || 0;\r\n    stats.failures++;\r\n    test.err = err;\r\n    failures.push(test);\r\n  });\r\n\r\n  runner.on('end', function(){\r\n    stats.end = new Date;\r\n    stats.duration = new Date - stats.start;\r\n  });\r\n\r\n  runner.on('pending', function(){\r\n    stats.pending++;\r\n  });\r\n}\r\n\r\n/**\r\n * Output common epilogue used by many of\r\n * the bundled reporters.\r\n *\r\n * @api public\r\n */\r\n\r\nBase.prototype.epilogue = function(){\r\n  var stats = this.stats;\r\n  var tests;\r\n  var fmt;\r\n\r\n  console.log();\r\n\r\n  // passes\r\n  fmt = color('bright pass', ' ')\r\n    + color('green', ' %d passing')\r\n    + color('light', ' (%s)');\r\n\r\n  console.log(fmt,\r\n    stats.passes || 0,\r\n    ms(stats.duration));\r\n\r\n  // pending\r\n  if (stats.pending) {\r\n    fmt = color('pending', ' ')\r\n      + color('pending', ' %d pending');\r\n\r\n    console.log(fmt, stats.pending);\r\n  }\r\n\r\n  // failures\r\n  if (stats.failures) {\r\n    fmt = color('fail', '  %d failing');\r\n\r\n    console.log(fmt, stats.failures);\r\n\r\n    Base.list(this.failures);\r\n    console.log();\r\n  }\r\n\r\n  console.log();\r\n};\r\n\r\n/**\r\n * Pad the given `str` to `len`.\r\n *\r\n * @param {String} str\r\n * @param {String} len\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction pad(str, len) {\r\n  str = String(str);\r\n  return Array(len - str.length + 1).join(' ') + str;\r\n}\r\n\r\n\r\n/**\r\n * Returns an inline diff between 2 strings with coloured ANSI output\r\n *\r\n * @param {Error} Error with actual/expected\r\n * @return {String} Diff\r\n * @api private\r\n */\r\n\r\nfunction inlineDiff(err, escape) {\r\n  var msg = errorDiff(err, 'WordsWithSpace', escape);\r\n\r\n  // linenos\r\n  var lines = msg.split('\\n');\r\n  if (lines.length > 4) {\r\n    var width = String(lines.length).length;\r\n    msg = lines.map(function(str, i){\r\n      return pad(++i, width) + ' |' + ' ' + str;\r\n    }).join('\\n');\r\n  }\r\n\r\n  // legend\r\n  msg = '\\n'\r\n    + color('diff removed', 'actual')\r\n    + ' '\r\n    + color('diff added', 'expected')\r\n    + '\\n\\n'\r\n    + msg\r\n    + '\\n';\r\n\r\n  // indent\r\n  msg = msg.replace(/^/gm, '      ');\r\n  return msg;\r\n}\r\n\r\n/**\r\n * Returns a unified diff between 2 strings\r\n *\r\n * @param {Error} Error with actual/expected\r\n * @return {String} Diff\r\n * @api private\r\n */\r\n\r\nfunction unifiedDiff(err, escape) {\r\n  var indent = '      ';\r\n  function cleanUp(line) {\r\n    if (escape) {\r\n      line = escapeInvisibles(line);\r\n    }\r\n    if (line[0] === '+') return indent + colorLines('diff added', line);\r\n    if (line[0] === '-') return indent + colorLines('diff removed', line);\r\n    if (line.match(/\\@\\@/)) return null;\r\n    if (line.match(/\\\\ No newline/)) return null;\r\n    else return indent + line;\r\n  }\r\n  function notBlank(line) {\r\n    return line != null;\r\n  }\r\n  msg = diff.createPatch('string', err.actual, err.expected);\r\n  var lines = msg.split('\\n').splice(4);\r\n  return '\\n      '\r\n         + colorLines('diff added',   '+ expected') + ' '\r\n         + colorLines('diff removed', '- actual')\r\n         + '\\n\\n'\r\n         + lines.map(cleanUp).filter(notBlank).join('\\n');\r\n}\r\n\r\n/**\r\n * Return a character diff for `err`.\r\n *\r\n * @param {Error} err\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction errorDiff(err, type, escape) {\r\n  var actual   = escape ? escapeInvisibles(err.actual)   : err.actual;\r\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;\r\n  return diff['diff' + type](actual, expected).map(function(str){\r\n    if (str.added) return colorLines('diff added', str.value);\r\n    if (str.removed) return colorLines('diff removed', str.value);\r\n    return str.value;\r\n  }).join('');\r\n}\r\n\r\n/**\r\n * Returns a string with all invisible characters in plain text\r\n *\r\n * @param {String} line\r\n * @return {String}\r\n * @api private\r\n */\r\nfunction escapeInvisibles(line) {\r\n    return line.replace(/\\t/g, '<tab>')\r\n               .replace(/\\r/g, '<CR>')\r\n               .replace(/\\n/g, '<LF>\\n');\r\n}\r\n\r\n/**\r\n * Color lines for `str`, using the color `name`.\r\n *\r\n * @param {String} name\r\n * @param {String} str\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction colorLines(name, str) {\r\n  return str.split('\\n').map(function(str){\r\n    return color(name, str);\r\n  }).join('\\n');\r\n}\r\n\r\n/**\r\n * Check that a / b have the same type.\r\n *\r\n * @param {Object} a\r\n * @param {Object} b\r\n * @return {Boolean}\r\n * @api private\r\n */\r\n\r\nfunction sameType(a, b) {\r\n  a = Object.prototype.toString.call(a);\r\n  b = Object.prototype.toString.call(b);\r\n  return a == b;\r\n}\r\n\r\n}); // module: reporters/base.js\r\n\r\nrequire.register(\"reporters/doc.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , utils = require('../utils');\r\n\r\n/**\r\n * Expose `Doc`.\r\n */\r\n\r\nexports = module.exports = Doc;\r\n\r\n/**\r\n * Initialize a new `Doc` reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction Doc(runner) {\r\n  Base.call(this, runner);\r\n\r\n  var self = this\r\n    , stats = this.stats\r\n    , total = runner.total\r\n    , indents = 2;\r\n\r\n  function indent() {\r\n    return Array(indents).join('  ');\r\n  }\r\n\r\n  runner.on('suite', function(suite){\r\n    if (suite.root) return;\r\n    ++indents;\r\n    console.log('%s<section class=\"suite\">', indent());\r\n    ++indents;\r\n    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));\r\n    console.log('%s<dl>', indent());\r\n  });\r\n\r\n  runner.on('suite end', function(suite){\r\n    if (suite.root) return;\r\n    console.log('%s</dl>', indent());\r\n    --indents;\r\n    console.log('%s</section>', indent());\r\n    --indents;\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));\r\n    var code = utils.escape(utils.clean(test.fn.toString()));\r\n    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);\r\n  });\r\n\r\n  runner.on('fail', function(test, err){\r\n    console.log('%s  <dt class=\"error\">%s</dt>', indent(), utils.escape(test.title));\r\n    var code = utils.escape(utils.clean(test.fn.toString()));\r\n    console.log('%s  <dd class=\"error\"><pre><code>%s</code></pre></dd>', indent(), code);\r\n    console.log('%s  <dd class=\"error\">%s</dd>', indent(), utils.escape(err));\r\n  });\r\n}\r\n\r\n}); // module: reporters/doc.js\r\n\r\nrequire.register(\"reporters/dot.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , color = Base.color;\r\n\r\n/**\r\n * Expose `Dot`.\r\n */\r\n\r\nexports = module.exports = Dot;\r\n\r\n/**\r\n * Initialize a new `Dot` matrix test reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction Dot(runner) {\r\n  Base.call(this, runner);\r\n\r\n  var self = this\r\n    , stats = this.stats\r\n    , width = Base.window.width * .75 | 0\r\n    , n = -1;\r\n\r\n  runner.on('start', function(){\r\n    process.stdout.write('\\n  ');\r\n  });\r\n\r\n  runner.on('pending', function(test){\r\n    if (++n % width == 0) process.stdout.write('\\n  ');\r\n    process.stdout.write(color('pending', Base.symbols.dot));\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    if (++n % width == 0) process.stdout.write('\\n  ');\r\n    if ('slow' == test.speed) {\r\n      process.stdout.write(color('bright yellow', Base.symbols.dot));\r\n    } else {\r\n      process.stdout.write(color(test.speed, Base.symbols.dot));\r\n    }\r\n  });\r\n\r\n  runner.on('fail', function(test, err){\r\n    if (++n % width == 0) process.stdout.write('\\n  ');\r\n    process.stdout.write(color('fail', Base.symbols.dot));\r\n  });\r\n\r\n  runner.on('end', function(){\r\n    console.log();\r\n    self.epilogue();\r\n  });\r\n}\r\n\r\n/**\r\n * Inherit from `Base.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = Base.prototype;\r\nDot.prototype = new F;\r\nDot.prototype.constructor = Dot;\r\n\r\n\r\n}); // module: reporters/dot.js\r\n\r\nrequire.register(\"reporters/html-cov.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar JSONCov = require('./json-cov')\r\n  , fs = require('browser/fs');\r\n\r\n/**\r\n * Expose `HTMLCov`.\r\n */\r\n\r\nexports = module.exports = HTMLCov;\r\n\r\n/**\r\n * Initialize a new `JsCoverage` reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction HTMLCov(runner) {\r\n  var jade = require('jade')\r\n    , file = __dirname + '/templates/coverage.jade'\r\n    , str = fs.readFileSync(file, 'utf8')\r\n    , fn = jade.compile(str, { filename: file })\r\n    , self = this;\r\n\r\n  JSONCov.call(this, runner, false);\r\n\r\n  runner.on('end', function(){\r\n    process.stdout.write(fn({\r\n        cov: self.cov\r\n      , coverageClass: coverageClass\r\n    }));\r\n  });\r\n}\r\n\r\n/**\r\n * Return coverage class for `n`.\r\n *\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction coverageClass(n) {\r\n  if (n >= 75) return 'high';\r\n  if (n >= 50) return 'medium';\r\n  if (n >= 25) return 'low';\r\n  return 'terrible';\r\n}\r\n\r\n}); // module: reporters/html-cov.js\r\n\r\nrequire.register(\"reporters/html.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , utils = require('../utils')\r\n  , Progress = require('../browser/progress')\r\n  , escape = utils.escape;\r\n\r\n/**\r\n * Save timer references to avoid Sinon interfering (see GH-237).\r\n */\r\n\r\nvar Date = global.Date\r\n  , setTimeout = global.setTimeout\r\n  , setInterval = global.setInterval\r\n  , clearTimeout = global.clearTimeout\r\n  , clearInterval = global.clearInterval;\r\n\r\n/**\r\n * Expose `HTML`.\r\n */\r\n\r\nexports = module.exports = HTML;\r\n\r\n/**\r\n * Stats template.\r\n */\r\n\r\nvar statsTemplate = '<ul id=\"mocha-stats\">'\r\n  + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>'\r\n  + '<li class=\"passes\"><a href=\"#\">passes:</a> <em>0</em></li>'\r\n  + '<li class=\"failures\"><a href=\"#\">failures:</a> <em>0</em></li>'\r\n  + '<li class=\"duration\">duration: <em>0</em>s</li>'\r\n  + '</ul>';\r\n\r\n/**\r\n * Initialize a new `HTML` reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction HTML(runner) {\r\n  Base.call(this, runner);\r\n\r\n  var self = this\r\n    , stats = this.stats\r\n    , total = runner.total\r\n    , stat = fragment(statsTemplate)\r\n    , items = stat.getElementsByTagName('li')\r\n    , passes = items[1].getElementsByTagName('em')[0]\r\n    , passesLink = items[1].getElementsByTagName('a')[0]\r\n    , failures = items[2].getElementsByTagName('em')[0]\r\n    , failuresLink = items[2].getElementsByTagName('a')[0]\r\n    , duration = items[3].getElementsByTagName('em')[0]\r\n    , canvas = stat.getElementsByTagName('canvas')[0]\r\n    , report = fragment('<ul id=\"mocha-report\"></ul>')\r\n    , stack = [report]\r\n    , progress\r\n    , ctx\r\n    , root = document.getElementById('mocha');\r\n\r\n  if (canvas.getContext) {\r\n    var ratio = window.devicePixelRatio || 1;\r\n    canvas.style.width = canvas.width;\r\n    canvas.style.height = canvas.height;\r\n    canvas.width *= ratio;\r\n    canvas.height *= ratio;\r\n    ctx = canvas.getContext('2d');\r\n    ctx.scale(ratio, ratio);\r\n    progress = new Progress;\r\n  }\r\n\r\n  if (!root) return error('#mocha div missing, add it to your document');\r\n\r\n  // pass toggle\r\n  on(passesLink, 'click', function(){\r\n    unhide();\r\n    var name = /pass/.test(report.className) ? '' : ' pass';\r\n    report.className = report.className.replace(/fail|pass/g, '') + name;\r\n    if (report.className.trim()) hideSuitesWithout('test pass');\r\n  });\r\n\r\n  // failure toggle\r\n  on(failuresLink, 'click', function(){\r\n    unhide();\r\n    var name = /fail/.test(report.className) ? '' : ' fail';\r\n    report.className = report.className.replace(/fail|pass/g, '') + name;\r\n    if (report.className.trim()) hideSuitesWithout('test fail');\r\n  });\r\n\r\n  root.appendChild(stat);\r\n  root.appendChild(report);\r\n\r\n  if (progress) progress.size(40);\r\n\r\n  runner.on('suite', function(suite){\r\n    if (suite.root) return;\r\n\r\n    // suite\r\n    var url = self.suiteURL(suite);\r\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title));\r\n\r\n    // container\r\n    stack[0].appendChild(el);\r\n    stack.unshift(document.createElement('ul'));\r\n    el.appendChild(stack[0]);\r\n  });\r\n\r\n  runner.on('suite end', function(suite){\r\n    if (suite.root) return;\r\n    stack.shift();\r\n  });\r\n\r\n  runner.on('fail', function(test, err){\r\n    if ('hook' == test.type) runner.emit('test end', test);\r\n  });\r\n\r\n  runner.on('test end', function(test){\r\n    // TODO: add to stats\r\n    var percent = stats.tests / this.total * 100 | 0;\r\n    if (progress) progress.update(percent).draw(ctx);\r\n\r\n    // update stats\r\n    var ms = new Date - stats.start;\r\n    text(passes, stats.passes);\r\n    text(failures, stats.failures);\r\n    text(duration, (ms / 1000).toFixed(2));\r\n\r\n    // test\r\n    if ('passed' == test.state) {\r\n      var url = self.testURL(test);\r\n      var el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\r\n    } else if (test.pending) {\r\n      var el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);\r\n    } else {\r\n      var el = fragment('<li class=\"test fail\"><h2>%e <a href=\"%e\" class=\"replay\">‣</a></h2></li>', test.title, self.testURL(test));\r\n      var str = test.err.stack || test.err.toString();\r\n\r\n      // FF / Opera do not add the message\r\n      if (!~str.indexOf(test.err.message)) {\r\n        str = test.err.message + '\\n' + str;\r\n      }\r\n\r\n      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we\r\n      // check for the result of the stringifying.\r\n      if ('[object Error]' == str) str = test.err.message;\r\n\r\n      // Safari doesn't give you a stack. Let's at least provide a source line.\r\n      if (!test.err.stack && test.err.sourceURL && test.err.line !== undefined) {\r\n        str += \"\\n(\" + test.err.sourceURL + \":\" + test.err.line + \")\";\r\n      }\r\n\r\n      el.appendChild(fragment('<pre class=\"error\">%e</pre>', str));\r\n    }\r\n\r\n    // toggle code\r\n    // TODO: defer\r\n    if (!test.pending) {\r\n      var h2 = el.getElementsByTagName('h2')[0];\r\n\r\n      on(h2, 'click', function(){\r\n        pre.style.display = 'none' == pre.style.display\r\n          ? 'block'\r\n          : 'none';\r\n      });\r\n\r\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.fn.toString()));\r\n      el.appendChild(pre);\r\n      pre.style.display = 'none';\r\n    }\r\n\r\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.\r\n    if (stack[0]) stack[0].appendChild(el);\r\n  });\r\n}\r\n\r\n/**\r\n * Makes a URL, preserving querystring (\"search\") parameters.\r\n * @param {string} s\r\n * @returns {string} your new URL\r\n */\r\nvar makeUrl = function makeUrl(s) {\r\n  var search = window.location.search;\r\n  return window.location.pathname + (search ? search + '&' : '?' ) + 'grep=' + encodeURIComponent(s);\r\n};\r\n\r\n/**\r\n * Provide suite URL\r\n *\r\n * @param {Object} [suite]\r\n */\r\nHTML.prototype.suiteURL = function(suite){\r\n  return makeUrl(suite.fullTitle());\r\n};\r\n\r\n/**\r\n * Provide test URL\r\n *\r\n * @param {Object} [test]\r\n */\r\n\r\nHTML.prototype.testURL = function(test){\r\n  return makeUrl(test.fullTitle());\r\n};\r\n\r\n/**\r\n * Display error `msg`.\r\n */\r\n\r\nfunction error(msg) {\r\n  document.body.appendChild(fragment('<div id=\"mocha-error\">%s</div>', msg));\r\n}\r\n\r\n/**\r\n * Return a DOM fragment from `html`.\r\n */\r\n\r\nfunction fragment(html) {\r\n  var args = arguments\r\n    , div = document.createElement('div')\r\n    , i = 1;\r\n\r\n  div.innerHTML = html.replace(/%([se])/g, function(_, type){\r\n    switch (type) {\r\n      case 's': return String(args[i++]);\r\n      case 'e': return escape(args[i++]);\r\n    }\r\n  });\r\n\r\n  return div.firstChild;\r\n}\r\n\r\n/**\r\n * Check for suites that do not have elements\r\n * with `classname`, and hide them.\r\n */\r\n\r\nfunction hideSuitesWithout(classname) {\r\n  var suites = document.getElementsByClassName('suite');\r\n  for (var i = 0; i < suites.length; i++) {\r\n    var els = suites[i].getElementsByClassName(classname);\r\n    if (0 == els.length) suites[i].className += ' hidden';\r\n  }\r\n}\r\n\r\n/**\r\n * Unhide .hidden suites.\r\n */\r\n\r\nfunction unhide() {\r\n  var els = document.getElementsByClassName('suite hidden');\r\n  for (var i = 0; i < els.length; ++i) {\r\n    els[i].className = els[i].className.replace('suite hidden', 'suite');\r\n  }\r\n}\r\n\r\n/**\r\n * Set `el` text to `str`.\r\n */\r\n\r\nfunction text(el, str) {\r\n  if (el.textContent) {\r\n    el.textContent = str;\r\n  } else {\r\n    el.innerText = str;\r\n  }\r\n}\r\n\r\n/**\r\n * Listen on `event` with callback `fn`.\r\n */\r\n\r\nfunction on(el, event, fn) {\r\n  if (el.addEventListener) {\r\n    el.addEventListener(event, fn, false);\r\n  } else {\r\n    el.attachEvent('on' + event, fn);\r\n  }\r\n}\r\n\r\n}); // module: reporters/html.js\r\n\r\nrequire.register(\"reporters/index.js\", function(module, exports, require){\r\nexports.Base = require('./base');\r\nexports.Dot = require('./dot');\r\nexports.Doc = require('./doc');\r\nexports.TAP = require('./tap');\r\nexports.JSON = require('./json');\r\nexports.HTML = require('./html');\r\nexports.List = require('./list');\r\nexports.Min = require('./min');\r\nexports.Spec = require('./spec');\r\nexports.Nyan = require('./nyan');\r\nexports.XUnit = require('./xunit');\r\nexports.Markdown = require('./markdown');\r\nexports.Progress = require('./progress');\r\nexports.Landing = require('./landing');\r\nexports.JSONCov = require('./json-cov');\r\nexports.HTMLCov = require('./html-cov');\r\nexports.JSONStream = require('./json-stream');\r\n\r\n}); // module: reporters/index.js\r\n\r\nrequire.register(\"reporters/json-cov.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base');\r\n\r\n/**\r\n * Expose `JSONCov`.\r\n */\r\n\r\nexports = module.exports = JSONCov;\r\n\r\n/**\r\n * Initialize a new `JsCoverage` reporter.\r\n *\r\n * @param {Runner} runner\r\n * @param {Boolean} output\r\n * @api public\r\n */\r\n\r\nfunction JSONCov(runner, output) {\r\n  var self = this\r\n    , output = 1 == arguments.length ? true : output;\r\n\r\n  Base.call(this, runner);\r\n\r\n  var tests = []\r\n    , failures = []\r\n    , passes = [];\r\n\r\n  runner.on('test end', function(test){\r\n    tests.push(test);\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    passes.push(test);\r\n  });\r\n\r\n  runner.on('fail', function(test){\r\n    failures.push(test);\r\n  });\r\n\r\n  runner.on('end', function(){\r\n    var cov = global._$jscoverage || {};\r\n    var result = self.cov = map(cov);\r\n    result.stats = self.stats;\r\n    result.tests = tests.map(clean);\r\n    result.failures = failures.map(clean);\r\n    result.passes = passes.map(clean);\r\n    if (!output) return;\r\n    process.stdout.write(JSON.stringify(result, null, 2 ));\r\n  });\r\n}\r\n\r\n/**\r\n * Map jscoverage data to a JSON structure\r\n * suitable for reporting.\r\n *\r\n * @param {Object} cov\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction map(cov) {\r\n  var ret = {\r\n      instrumentation: 'node-jscoverage'\r\n    , sloc: 0\r\n    , hits: 0\r\n    , misses: 0\r\n    , coverage: 0\r\n    , files: []\r\n  };\r\n\r\n  for (var filename in cov) {\r\n    var data = coverage(filename, cov[filename]);\r\n    ret.files.push(data);\r\n    ret.hits += data.hits;\r\n    ret.misses += data.misses;\r\n    ret.sloc += data.sloc;\r\n  }\r\n\r\n  ret.files.sort(function(a, b) {\r\n    return a.filename.localeCompare(b.filename);\r\n  });\r\n\r\n  if (ret.sloc > 0) {\r\n    ret.coverage = (ret.hits / ret.sloc) * 100;\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Map jscoverage data for a single source file\r\n * to a JSON structure suitable for reporting.\r\n *\r\n * @param {String} filename name of the source file\r\n * @param {Object} data jscoverage coverage data\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction coverage(filename, data) {\r\n  var ret = {\r\n    filename: filename,\r\n    coverage: 0,\r\n    hits: 0,\r\n    misses: 0,\r\n    sloc: 0,\r\n    source: {}\r\n  };\r\n\r\n  data.source.forEach(function(line, num){\r\n    num++;\r\n\r\n    if (data[num] === 0) {\r\n      ret.misses++;\r\n      ret.sloc++;\r\n    } else if (data[num] !== undefined) {\r\n      ret.hits++;\r\n      ret.sloc++;\r\n    }\r\n\r\n    ret.source[num] = {\r\n        source: line\r\n      , coverage: data[num] === undefined\r\n        ? ''\r\n        : data[num]\r\n    };\r\n  });\r\n\r\n  ret.coverage = ret.hits / ret.sloc * 100;\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Return a plain-object representation of `test`\r\n * free of cyclic properties etc.\r\n *\r\n * @param {Object} test\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction clean(test) {\r\n  return {\r\n      title: test.title\r\n    , fullTitle: test.fullTitle()\r\n    , duration: test.duration\r\n  }\r\n}\r\n\r\n}); // module: reporters/json-cov.js\r\n\r\nrequire.register(\"reporters/json-stream.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , color = Base.color;\r\n\r\n/**\r\n * Expose `List`.\r\n */\r\n\r\nexports = module.exports = List;\r\n\r\n/**\r\n * Initialize a new `List` test reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction List(runner) {\r\n  Base.call(this, runner);\r\n\r\n  var self = this\r\n    , stats = this.stats\r\n    , total = runner.total;\r\n\r\n  runner.on('start', function(){\r\n    console.log(JSON.stringify(['start', { total: total }]));\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    console.log(JSON.stringify(['pass', clean(test)]));\r\n  });\r\n\r\n  runner.on('fail', function(test, err){\r\n    test = clean(test);\r\n    test.err = err.message;\r\n    console.log(JSON.stringify(['fail', test]));\r\n  });\r\n\r\n  runner.on('end', function(){\r\n    process.stdout.write(JSON.stringify(['end', self.stats]));\r\n  });\r\n}\r\n\r\n/**\r\n * Return a plain-object representation of `test`\r\n * free of cyclic properties etc.\r\n *\r\n * @param {Object} test\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction clean(test) {\r\n  return {\r\n      title: test.title\r\n    , fullTitle: test.fullTitle()\r\n    , duration: test.duration\r\n  }\r\n}\r\n\r\n}); // module: reporters/json-stream.js\r\n\r\nrequire.register(\"reporters/json.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , cursor = Base.cursor\r\n  , color = Base.color;\r\n\r\n/**\r\n * Expose `JSON`.\r\n */\r\n\r\nexports = module.exports = JSONReporter;\r\n\r\n/**\r\n * Initialize a new `JSON` reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction JSONReporter(runner) {\r\n  var self = this;\r\n  Base.call(this, runner);\r\n\r\n  var tests = []\r\n    , pending = []\r\n    , failures = []\r\n    , passes = [];\r\n\r\n  runner.on('test end', function(test){\r\n    tests.push(test);\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    passes.push(test);\r\n  });\r\n\r\n  runner.on('fail', function(test){\r\n    failures.push(test);\r\n  });\r\n\r\n  runner.on('pending', function(test){\r\n    pending.push(test);\r\n  });\r\n\r\n  runner.on('end', function(){\r\n    var obj = {\r\n      stats: self.stats,\r\n      tests: tests.map(clean),\r\n      pending: pending.map(clean),\r\n      failures: failures.map(clean),\r\n      passes: passes.map(clean)\r\n    };\r\n\r\n    runner.testResults = obj;\r\n\r\n    process.stdout.write(JSON.stringify(obj, null, 2));\r\n  });\r\n}\r\n\r\n/**\r\n * Return a plain-object representation of `test`\r\n * free of cyclic properties etc.\r\n *\r\n * @param {Object} test\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction clean(test) {\r\n  return {\r\n    title: test.title,\r\n    fullTitle: test.fullTitle(),\r\n    duration: test.duration,\r\n    err: errorJSON(test.err || {})\r\n  }\r\n}\r\n\r\n/**\r\n * Transform `error` into a JSON object.\r\n * @param {Error} err\r\n * @return {Object}\r\n */\r\n\r\nfunction errorJSON(err) {\r\n  var res = {};\r\n  Object.getOwnPropertyNames(err).forEach(function(key) {\r\n    res[key] = err[key];\r\n  }, err);\r\n  return res;\r\n}\r\n\r\n}); // module: reporters/json.js\r\n\r\nrequire.register(\"reporters/landing.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , cursor = Base.cursor\r\n  , color = Base.color;\r\n\r\n/**\r\n * Expose `Landing`.\r\n */\r\n\r\nexports = module.exports = Landing;\r\n\r\n/**\r\n * Airplane color.\r\n */\r\n\r\nBase.colors.plane = 0;\r\n\r\n/**\r\n * Airplane crash color.\r\n */\r\n\r\nBase.colors['plane crash'] = 31;\r\n\r\n/**\r\n * Runway color.\r\n */\r\n\r\nBase.colors.runway = 90;\r\n\r\n/**\r\n * Initialize a new `Landing` reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction Landing(runner) {\r\n  Base.call(this, runner);\r\n\r\n  var self = this\r\n    , stats = this.stats\r\n    , width = Base.window.width * .75 | 0\r\n    , total = runner.total\r\n    , stream = process.stdout\r\n    , plane = color('plane', '✈')\r\n    , crashed = -1\r\n    , n = 0;\r\n\r\n  function runway() {\r\n    var buf = Array(width).join('-');\r\n    return '  ' + color('runway', buf);\r\n  }\r\n\r\n  runner.on('start', function(){\r\n    stream.write('\\n\\n\\n  ');\r\n    cursor.hide();\r\n  });\r\n\r\n  runner.on('test end', function(test){\r\n    // check if the plane crashed\r\n    var col = -1 == crashed\r\n      ? width * ++n / total | 0\r\n      : crashed;\r\n\r\n    // show the crash\r\n    if ('failed' == test.state) {\r\n      plane = color('plane crash', '✈');\r\n      crashed = col;\r\n    }\r\n\r\n    // render landing strip\r\n    stream.write('\\u001b['+(width+1)+'D\\u001b[2A');\r\n    stream.write(runway());\r\n    stream.write('\\n  ');\r\n    stream.write(color('runway', Array(col).join('⋅')));\r\n    stream.write(plane)\r\n    stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));\r\n    stream.write(runway());\r\n    stream.write('\\u001b[0m');\r\n  });\r\n\r\n  runner.on('end', function(){\r\n    cursor.show();\r\n    console.log();\r\n    self.epilogue();\r\n  });\r\n}\r\n\r\n/**\r\n * Inherit from `Base.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = Base.prototype;\r\nLanding.prototype = new F;\r\nLanding.prototype.constructor = Landing;\r\n\r\n\r\n}); // module: reporters/landing.js\r\n\r\nrequire.register(\"reporters/list.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , cursor = Base.cursor\r\n  , color = Base.color;\r\n\r\n/**\r\n * Expose `List`.\r\n */\r\n\r\nexports = module.exports = List;\r\n\r\n/**\r\n * Initialize a new `List` test reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction List(runner) {\r\n  Base.call(this, runner);\r\n\r\n  var self = this\r\n    , stats = this.stats\r\n    , n = 0;\r\n\r\n  runner.on('start', function(){\r\n    console.log();\r\n  });\r\n\r\n  runner.on('test', function(test){\r\n    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));\r\n  });\r\n\r\n  runner.on('pending', function(test){\r\n    var fmt = color('checkmark', '  -')\r\n      + color('pending', ' %s');\r\n    console.log(fmt, test.fullTitle());\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    var fmt = color('checkmark', '  '+Base.symbols.dot)\r\n      + color('pass', ' %s: ')\r\n      + color(test.speed, '%dms');\r\n    cursor.CR();\r\n    console.log(fmt, test.fullTitle(), test.duration);\r\n  });\r\n\r\n  runner.on('fail', function(test, err){\r\n    cursor.CR();\r\n    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());\r\n  });\r\n\r\n  runner.on('end', self.epilogue.bind(self));\r\n}\r\n\r\n/**\r\n * Inherit from `Base.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = Base.prototype;\r\nList.prototype = new F;\r\nList.prototype.constructor = List;\r\n\r\n\r\n}); // module: reporters/list.js\r\n\r\nrequire.register(\"reporters/markdown.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , utils = require('../utils');\r\n\r\n/**\r\n * Constants\r\n */\r\n\r\nvar SUITE_PREFIX = '$';\r\n\r\n/**\r\n * Expose `Markdown`.\r\n */\r\n\r\nexports = module.exports = Markdown;\r\n\r\n/**\r\n * Initialize a new `Markdown` reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction Markdown(runner) {\r\n  Base.call(this, runner);\r\n\r\n  var self = this\r\n    , stats = this.stats\r\n    , level = 0\r\n    , buf = '';\r\n\r\n  function title(str) {\r\n    return Array(level).join('#') + ' ' + str;\r\n  }\r\n\r\n  function indent() {\r\n    return Array(level).join('  ');\r\n  }\r\n\r\n  function mapTOC(suite, obj) {\r\n    var ret = obj,\r\n        key = SUITE_PREFIX + suite.title;\r\n    obj = obj[key] = obj[key] || { suite: suite };\r\n    suite.suites.forEach(function(suite){\r\n      mapTOC(suite, obj);\r\n    });\r\n    return ret;\r\n  }\r\n\r\n  function stringifyTOC(obj, level) {\r\n    ++level;\r\n    var buf = '';\r\n    var link;\r\n    for (var key in obj) {\r\n      if ('suite' == key) continue;\r\n      if (key !== SUITE_PREFIX) {\r\n        link = ' - [' + key.substring(1) + ']';\r\n        link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';\r\n        buf += Array(level).join('  ') + link;\r\n      }\r\n      buf += stringifyTOC(obj[key], level);\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  function generateTOC(suite) {\r\n    var obj = mapTOC(suite, {});\r\n    return stringifyTOC(obj, 0);\r\n  }\r\n\r\n  generateTOC(runner.suite);\r\n\r\n  runner.on('suite', function(suite){\r\n    ++level;\r\n    var slug = utils.slug(suite.fullTitle());\r\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';\r\n    buf += title(suite.title) + '\\n';\r\n  });\r\n\r\n  runner.on('suite end', function(suite){\r\n    --level;\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    var code = utils.clean(test.fn.toString());\r\n    buf += test.title + '.\\n';\r\n    buf += '\\n```js\\n';\r\n    buf += code + '\\n';\r\n    buf += '```\\n\\n';\r\n  });\r\n\r\n  runner.on('end', function(){\r\n    process.stdout.write('# TOC\\n');\r\n    process.stdout.write(generateTOC(runner.suite));\r\n    process.stdout.write(buf);\r\n  });\r\n}\r\n\r\n}); // module: reporters/markdown.js\r\n\r\nrequire.register(\"reporters/min.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base');\r\n\r\n/**\r\n * Expose `Min`.\r\n */\r\n\r\nexports = module.exports = Min;\r\n\r\n/**\r\n * Initialize a new `Min` minimal test reporter (best used with --watch).\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction Min(runner) {\r\n  Base.call(this, runner);\r\n\r\n  runner.on('start', function(){\r\n    // clear screen\r\n    process.stdout.write('\\u001b[2J');\r\n    // set cursor position\r\n    process.stdout.write('\\u001b[1;3H');\r\n  });\r\n\r\n  runner.on('end', this.epilogue.bind(this));\r\n}\r\n\r\n/**\r\n * Inherit from `Base.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = Base.prototype;\r\nMin.prototype = new F;\r\nMin.prototype.constructor = Min;\r\n\r\n\r\n}); // module: reporters/min.js\r\n\r\nrequire.register(\"reporters/nyan.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base');\r\n\r\n/**\r\n * Expose `Dot`.\r\n */\r\n\r\nexports = module.exports = NyanCat;\r\n\r\n/**\r\n * Initialize a new `Dot` matrix test reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction NyanCat(runner) {\r\n  Base.call(this, runner);\r\n  var self = this\r\n    , stats = this.stats\r\n    , width = Base.window.width * .75 | 0\r\n    , rainbowColors = this.rainbowColors = self.generateColors()\r\n    , colorIndex = this.colorIndex = 0\r\n    , numerOfLines = this.numberOfLines = 4\r\n    , trajectories = this.trajectories = [[], [], [], []]\r\n    , nyanCatWidth = this.nyanCatWidth = 11\r\n    , trajectoryWidthMax = this.trajectoryWidthMax = (width - nyanCatWidth)\r\n    , scoreboardWidth = this.scoreboardWidth = 5\r\n    , tick = this.tick = 0\r\n    , n = 0;\r\n\r\n  runner.on('start', function(){\r\n    Base.cursor.hide();\r\n    self.draw();\r\n  });\r\n\r\n  runner.on('pending', function(test){\r\n    self.draw();\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    self.draw();\r\n  });\r\n\r\n  runner.on('fail', function(test, err){\r\n    self.draw();\r\n  });\r\n\r\n  runner.on('end', function(){\r\n    Base.cursor.show();\r\n    for (var i = 0; i < self.numberOfLines; i++) write('\\n');\r\n    self.epilogue();\r\n  });\r\n}\r\n\r\n/**\r\n * Draw the nyan cat\r\n *\r\n * @api private\r\n */\r\n\r\nNyanCat.prototype.draw = function(){\r\n  this.appendRainbow();\r\n  this.drawScoreboard();\r\n  this.drawRainbow();\r\n  this.drawNyanCat();\r\n  this.tick = !this.tick;\r\n};\r\n\r\n/**\r\n * Draw the \"scoreboard\" showing the number\r\n * of passes, failures and pending tests.\r\n *\r\n * @api private\r\n */\r\n\r\nNyanCat.prototype.drawScoreboard = function(){\r\n  var stats = this.stats;\r\n\r\n  function draw(type, n) {\r\n    write(' ');\r\n    write(Base.color(type, n));\r\n    write('\\n');\r\n  }\r\n\r\n  draw('green', stats.passes);\r\n  draw('fail', stats.failures);\r\n  draw('pending', stats.pending);\r\n  write('\\n');\r\n\r\n  this.cursorUp(this.numberOfLines);\r\n};\r\n\r\n/**\r\n * Append the rainbow.\r\n *\r\n * @api private\r\n */\r\n\r\nNyanCat.prototype.appendRainbow = function(){\r\n  var segment = this.tick ? '_' : '-';\r\n  var rainbowified = this.rainbowify(segment);\r\n\r\n  for (var index = 0; index < this.numberOfLines; index++) {\r\n    var trajectory = this.trajectories[index];\r\n    if (trajectory.length >= this.trajectoryWidthMax) trajectory.shift();\r\n    trajectory.push(rainbowified);\r\n  }\r\n};\r\n\r\n/**\r\n * Draw the rainbow.\r\n *\r\n * @api private\r\n */\r\n\r\nNyanCat.prototype.drawRainbow = function(){\r\n  var self = this;\r\n\r\n  this.trajectories.forEach(function(line, index) {\r\n    write('\\u001b[' + self.scoreboardWidth + 'C');\r\n    write(line.join(''));\r\n    write('\\n');\r\n  });\r\n\r\n  this.cursorUp(this.numberOfLines);\r\n};\r\n\r\n/**\r\n * Draw the nyan cat\r\n *\r\n * @api private\r\n */\r\n\r\nNyanCat.prototype.drawNyanCat = function() {\r\n  var self = this;\r\n  var startWidth = this.scoreboardWidth + this.trajectories[0].length;\r\n  var dist = '\\u001b[' + startWidth + 'C';\r\n  var padding = '';\r\n\r\n  write(dist);\r\n  write('_,------,');\r\n  write('\\n');\r\n\r\n  write(dist);\r\n  padding = self.tick ? '  ' : '   ';\r\n  write('_|' + padding + '/\\\\_/\\\\ ');\r\n  write('\\n');\r\n\r\n  write(dist);\r\n  padding = self.tick ? '_' : '__';\r\n  var tail = self.tick ? '~' : '^';\r\n  var face;\r\n  write(tail + '|' + padding + this.face() + ' ');\r\n  write('\\n');\r\n\r\n  write(dist);\r\n  padding = self.tick ? ' ' : '  ';\r\n  write(padding + '\"\"  \"\" ');\r\n  write('\\n');\r\n\r\n  this.cursorUp(this.numberOfLines);\r\n};\r\n\r\n/**\r\n * Draw nyan cat face.\r\n *\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nNyanCat.prototype.face = function() {\r\n  var stats = this.stats;\r\n  if (stats.failures) {\r\n    return '( x .x)';\r\n  } else if (stats.pending) {\r\n    return '( o .o)';\r\n  } else if(stats.passes) {\r\n    return '( ^ .^)';\r\n  } else {\r\n    return '( - .-)';\r\n  }\r\n};\r\n\r\n/**\r\n * Move cursor up `n`.\r\n *\r\n * @param {Number} n\r\n * @api private\r\n */\r\n\r\nNyanCat.prototype.cursorUp = function(n) {\r\n  write('\\u001b[' + n + 'A');\r\n};\r\n\r\n/**\r\n * Move cursor down `n`.\r\n *\r\n * @param {Number} n\r\n * @api private\r\n */\r\n\r\nNyanCat.prototype.cursorDown = function(n) {\r\n  write('\\u001b[' + n + 'B');\r\n};\r\n\r\n/**\r\n * Generate rainbow colors.\r\n *\r\n * @return {Array}\r\n * @api private\r\n */\r\n\r\nNyanCat.prototype.generateColors = function(){\r\n  var colors = [];\r\n\r\n  for (var i = 0; i < (6 * 7); i++) {\r\n    var pi3 = Math.floor(Math.PI / 3);\r\n    var n = (i * (1.0 / 6));\r\n    var r = Math.floor(3 * Math.sin(n) + 3);\r\n    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);\r\n    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);\r\n    colors.push(36 * r + 6 * g + b + 16);\r\n  }\r\n\r\n  return colors;\r\n};\r\n\r\n/**\r\n * Apply rainbow to the given `str`.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nNyanCat.prototype.rainbowify = function(str){\r\n  if (!Base.useColors)\r\n    return str;\r\n  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];\r\n  this.colorIndex += 1;\r\n  return '\\u001b[38;5;' + color + 'm' + str + '\\u001b[0m';\r\n};\r\n\r\n/**\r\n * Stdout helper.\r\n */\r\n\r\nfunction write(string) {\r\n  process.stdout.write(string);\r\n}\r\n\r\n/**\r\n * Inherit from `Base.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = Base.prototype;\r\nNyanCat.prototype = new F;\r\nNyanCat.prototype.constructor = NyanCat;\r\n\r\n\r\n}); // module: reporters/nyan.js\r\n\r\nrequire.register(\"reporters/progress.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , cursor = Base.cursor\r\n  , color = Base.color;\r\n\r\n/**\r\n * Expose `Progress`.\r\n */\r\n\r\nexports = module.exports = Progress;\r\n\r\n/**\r\n * General progress bar color.\r\n */\r\n\r\nBase.colors.progress = 90;\r\n\r\n/**\r\n * Initialize a new `Progress` bar test reporter.\r\n *\r\n * @param {Runner} runner\r\n * @param {Object} options\r\n * @api public\r\n */\r\n\r\nfunction Progress(runner, options) {\r\n  Base.call(this, runner);\r\n\r\n  var self = this\r\n    , options = options || {}\r\n    , stats = this.stats\r\n    , width = Base.window.width * .50 | 0\r\n    , total = runner.total\r\n    , complete = 0\r\n    , max = Math.max\r\n    , lastN = -1;\r\n\r\n  // default chars\r\n  options.open = options.open || '[';\r\n  options.complete = options.complete || '▬';\r\n  options.incomplete = options.incomplete || Base.symbols.dot;\r\n  options.close = options.close || ']';\r\n  options.verbose = false;\r\n\r\n  // tests started\r\n  runner.on('start', function(){\r\n    console.log();\r\n    cursor.hide();\r\n  });\r\n\r\n  // tests complete\r\n  runner.on('test end', function(){\r\n    complete++;\r\n    var incomplete = total - complete\r\n      , percent = complete / total\r\n      , n = width * percent | 0\r\n      , i = width - n;\r\n\r\n    if (lastN === n && !options.verbose) {\r\n      // Don't re-render the line if it hasn't changed\r\n      return;\r\n    }\r\n    lastN = n;\r\n\r\n    cursor.CR();\r\n    process.stdout.write('\\u001b[J');\r\n    process.stdout.write(color('progress', '  ' + options.open));\r\n    process.stdout.write(Array(n).join(options.complete));\r\n    process.stdout.write(Array(i).join(options.incomplete));\r\n    process.stdout.write(color('progress', options.close));\r\n    if (options.verbose) {\r\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));\r\n    }\r\n  });\r\n\r\n  // tests are complete, output some stats\r\n  // and the failures if any\r\n  runner.on('end', function(){\r\n    cursor.show();\r\n    console.log();\r\n    self.epilogue();\r\n  });\r\n}\r\n\r\n/**\r\n * Inherit from `Base.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = Base.prototype;\r\nProgress.prototype = new F;\r\nProgress.prototype.constructor = Progress;\r\n\r\n\r\n}); // module: reporters/progress.js\r\n\r\nrequire.register(\"reporters/spec.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , cursor = Base.cursor\r\n  , color = Base.color;\r\n\r\n/**\r\n * Expose `Spec`.\r\n */\r\n\r\nexports = module.exports = Spec;\r\n\r\n/**\r\n * Initialize a new `Spec` test reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction Spec(runner) {\r\n  Base.call(this, runner);\r\n\r\n  var self = this\r\n    , stats = this.stats\r\n    , indents = 0\r\n    , n = 0;\r\n\r\n  function indent() {\r\n    return Array(indents).join('  ')\r\n  }\r\n\r\n  runner.on('start', function(){\r\n    console.log();\r\n  });\r\n\r\n  runner.on('suite', function(suite){\r\n    ++indents;\r\n    console.log(color('suite', '%s%s'), indent(), suite.title);\r\n  });\r\n\r\n  runner.on('suite end', function(suite){\r\n    --indents;\r\n    if (1 == indents) console.log();\r\n  });\r\n\r\n  runner.on('pending', function(test){\r\n    var fmt = indent() + color('pending', '  - %s');\r\n    console.log(fmt, test.title);\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    if ('fast' == test.speed) {\r\n      var fmt = indent()\r\n        + color('checkmark', '  ' + Base.symbols.ok)\r\n        + color('pass', ' %s ');\r\n      cursor.CR();\r\n      console.log(fmt, test.title);\r\n    } else {\r\n      var fmt = indent()\r\n        + color('checkmark', '  ' + Base.symbols.ok)\r\n        + color('pass', ' %s ')\r\n        + color(test.speed, '(%dms)');\r\n      cursor.CR();\r\n      console.log(fmt, test.title, test.duration);\r\n    }\r\n  });\r\n\r\n  runner.on('fail', function(test, err){\r\n    cursor.CR();\r\n    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);\r\n  });\r\n\r\n  runner.on('end', self.epilogue.bind(self));\r\n}\r\n\r\n/**\r\n * Inherit from `Base.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = Base.prototype;\r\nSpec.prototype = new F;\r\nSpec.prototype.constructor = Spec;\r\n\r\n\r\n}); // module: reporters/spec.js\r\n\r\nrequire.register(\"reporters/tap.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , cursor = Base.cursor\r\n  , color = Base.color;\r\n\r\n/**\r\n * Expose `TAP`.\r\n */\r\n\r\nexports = module.exports = TAP;\r\n\r\n/**\r\n * Initialize a new `TAP` reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction TAP(runner) {\r\n  Base.call(this, runner);\r\n\r\n  var self = this\r\n    , stats = this.stats\r\n    , n = 1\r\n    , passes = 0\r\n    , failures = 0;\r\n\r\n  runner.on('start', function(){\r\n    var total = runner.grepTotal(runner.suite);\r\n    console.log('%d..%d', 1, total);\r\n  });\r\n\r\n  runner.on('test end', function(){\r\n    ++n;\r\n  });\r\n\r\n  runner.on('pending', function(test){\r\n    console.log('ok %d %s # SKIP -', n, title(test));\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    passes++;\r\n    console.log('ok %d %s', n, title(test));\r\n  });\r\n\r\n  runner.on('fail', function(test, err){\r\n    failures++;\r\n    console.log('not ok %d %s', n, title(test));\r\n    if (err.stack) console.log(err.stack.replace(/^/gm, '  '));\r\n  });\r\n\r\n  runner.on('end', function(){\r\n    console.log('# tests ' + (passes + failures));\r\n    console.log('# pass ' + passes);\r\n    console.log('# fail ' + failures);\r\n  });\r\n}\r\n\r\n/**\r\n * Return a TAP-safe title of `test`\r\n *\r\n * @param {Object} test\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction title(test) {\r\n  return test.fullTitle().replace(/#/g, '');\r\n}\r\n\r\n}); // module: reporters/tap.js\r\n\r\nrequire.register(\"reporters/xunit.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Base = require('./base')\r\n  , utils = require('../utils')\r\n  , fs = require('browser/fs')\r\n  , escape = utils.escape;\r\n\r\n/**\r\n * Save timer references to avoid Sinon interfering (see GH-237).\r\n */\r\n\r\nvar Date = global.Date\r\n  , setTimeout = global.setTimeout\r\n  , setInterval = global.setInterval\r\n  , clearTimeout = global.clearTimeout\r\n  , clearInterval = global.clearInterval;\r\n\r\n/**\r\n * Expose `XUnit`.\r\n */\r\n\r\nexports = module.exports = XUnit;\r\n\r\n/**\r\n * Initialize a new `XUnit` reporter.\r\n *\r\n * @param {Runner} runner\r\n * @api public\r\n */\r\n\r\nfunction XUnit(runner, options) {\r\n  Base.call(this, runner);\r\n  var stats = this.stats\r\n    , tests = []\r\n    , self = this;\r\n\r\n  if (options.reporterOptions && options.reporterOptions.output) {\r\n      if (! fs.createWriteStream) {\r\n          throw new Error('file output not supported in browser');\r\n      }\r\n      self.fileStream = fs.createWriteStream(options.reporterOptions.output);\r\n  }\r\n\r\n  runner.on('pending', function(test){\r\n    tests.push(test);\r\n  });\r\n\r\n  runner.on('pass', function(test){\r\n    tests.push(test);\r\n  });\r\n\r\n  runner.on('fail', function(test){\r\n    tests.push(test);\r\n  });\r\n\r\n  runner.on('end', function(){\r\n    self.write(tag('testsuite', {\r\n        name: 'Mocha Tests'\r\n      , tests: stats.tests\r\n      , failures: stats.failures\r\n      , errors: stats.failures\r\n      , skipped: stats.tests - stats.failures - stats.passes\r\n      , timestamp: (new Date).toUTCString()\r\n      , time: (stats.duration / 1000) || 0\r\n    }, false));\r\n\r\n    tests.forEach(function(t) { self.test(t); });\r\n    self.write('</testsuite>');\r\n  });\r\n}\r\n\r\n/**\r\n * Override done to close the stream (if it's a file).\r\n */\r\nXUnit.prototype.done = function(failures, fn) {\r\n    if (this.fileStream) {\r\n        this.fileStream.end(function() {\r\n            fn(failures);\r\n        });\r\n    } else {\r\n        fn(failures);\r\n    }\r\n};\r\n\r\n/**\r\n * Inherit from `Base.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = Base.prototype;\r\nXUnit.prototype = new F;\r\nXUnit.prototype.constructor = XUnit;\r\n\r\n\r\n/**\r\n * Write out the given line\r\n */\r\nXUnit.prototype.write = function(line) {\r\n    if (this.fileStream) {\r\n        this.fileStream.write(line + '\\n');\r\n    } else {\r\n        console.log(line);\r\n    }\r\n};\r\n\r\n/**\r\n * Output tag for the given `test.`\r\n */\r\n\r\nXUnit.prototype.test = function(test, ostream) {\r\n  var attrs = {\r\n      classname: test.parent.fullTitle()\r\n    , name: test.title\r\n    , time: (test.duration / 1000) || 0\r\n  };\r\n\r\n  if ('failed' == test.state) {\r\n    var err = test.err;\r\n    this.write(tag('testcase', attrs, false, tag('failure', {}, false, cdata(escape(err.message) + \"\\n\" + err.stack))));\r\n  } else if (test.pending) {\r\n    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));\r\n  } else {\r\n    this.write(tag('testcase', attrs, true) );\r\n  }\r\n};\r\n\r\n/**\r\n * HTML tag helper.\r\n */\r\n\r\nfunction tag(name, attrs, close, content) {\r\n  var end = close ? '/>' : '>'\r\n    , pairs = []\r\n    , tag;\r\n\r\n  for (var key in attrs) {\r\n    pairs.push(key + '=\"' + escape(attrs[key]) + '\"');\r\n  }\r\n\r\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\r\n  if (content) tag += content + '</' + name + end;\r\n  return tag;\r\n}\r\n\r\n/**\r\n * Return cdata escaped CDATA `str`.\r\n */\r\n\r\nfunction cdata(str) {\r\n  return '<![CDATA[' + escape(str) + ']]>';\r\n}\r\n\r\n}); // module: reporters/xunit.js\r\n\r\nrequire.register(\"runnable.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar EventEmitter = require('browser/events').EventEmitter\r\n  , debug = require('browser/debug')('mocha:runnable')\r\n  , milliseconds = require('./ms')\r\n  , utils = require('./utils');\r\n\r\n/**\r\n * Save timer references to avoid Sinon interfering (see GH-237).\r\n */\r\n\r\nvar Date = global.Date\r\n  , setTimeout = global.setTimeout\r\n  , setInterval = global.setInterval\r\n  , clearTimeout = global.clearTimeout\r\n  , clearInterval = global.clearInterval;\r\n\r\n/**\r\n * Object#toString().\r\n */\r\n\r\nvar toString = Object.prototype.toString;\r\n\r\n/**\r\n * Expose `Runnable`.\r\n */\r\n\r\nmodule.exports = Runnable;\r\n\r\n/**\r\n * Initialize a new `Runnable` with the given `title` and callback `fn`.\r\n *\r\n * @param {String} title\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nfunction Runnable(title, fn) {\r\n  this.title = title;\r\n  this.fn = fn;\r\n  this.async = fn && fn.length;\r\n  this.sync = ! this.async;\r\n  this._timeout = 2000;\r\n  this._slow = 75;\r\n  this._enableTimeouts = true;\r\n  this.timedOut = false;\r\n  this._trace = new Error('done() called multiple times')\r\n}\r\n\r\n/**\r\n * Inherit from `EventEmitter.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = EventEmitter.prototype;\r\nRunnable.prototype = new F;\r\nRunnable.prototype.constructor = Runnable;\r\n\r\n\r\n/**\r\n * Set & get timeout `ms`.\r\n *\r\n * @param {Number|String} ms\r\n * @return {Runnable|Number} ms or self\r\n * @api private\r\n */\r\n\r\nRunnable.prototype.timeout = function(ms){\r\n  if (0 == arguments.length) return this._timeout;\r\n  if (ms === 0) this._enableTimeouts = false;\r\n  if ('string' == typeof ms) ms = milliseconds(ms);\r\n  debug('timeout %d', ms);\r\n  this._timeout = ms;\r\n  if (this.timer) this.resetTimeout();\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set & get slow `ms`.\r\n *\r\n * @param {Number|String} ms\r\n * @return {Runnable|Number} ms or self\r\n * @api private\r\n */\r\n\r\nRunnable.prototype.slow = function(ms){\r\n  if (0 === arguments.length) return this._slow;\r\n  if ('string' == typeof ms) ms = milliseconds(ms);\r\n  debug('timeout %d', ms);\r\n  this._slow = ms;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set and & get timeout `enabled`.\r\n *\r\n * @param {Boolean} enabled\r\n * @return {Runnable|Boolean} enabled or self\r\n * @api private\r\n */\r\n\r\nRunnable.prototype.enableTimeouts = function(enabled){\r\n  if (arguments.length === 0) return this._enableTimeouts;\r\n  debug('enableTimeouts %s', enabled);\r\n  this._enableTimeouts = enabled;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return the full title generated by recursively\r\n * concatenating the parent's full title.\r\n *\r\n * @return {String}\r\n * @api public\r\n */\r\n\r\nRunnable.prototype.fullTitle = function(){\r\n  return this.parent.fullTitle() + ' ' + this.title;\r\n};\r\n\r\n/**\r\n * Clear the timeout.\r\n *\r\n * @api private\r\n */\r\n\r\nRunnable.prototype.clearTimeout = function(){\r\n  clearTimeout(this.timer);\r\n};\r\n\r\n/**\r\n * Inspect the runnable void of private properties.\r\n *\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nRunnable.prototype.inspect = function(){\r\n  return JSON.stringify(this, function(key, val){\r\n    if ('_' == key[0]) return;\r\n    if ('parent' == key) return '#<Suite>';\r\n    if ('ctx' == key) return '#<Context>';\r\n    return val;\r\n  }, 2);\r\n};\r\n\r\n/**\r\n * Reset the timeout.\r\n *\r\n * @api private\r\n */\r\n\r\nRunnable.prototype.resetTimeout = function(){\r\n  var self = this;\r\n  var ms = this.timeout() || 1e9;\r\n\r\n  if (!this._enableTimeouts) return;\r\n  this.clearTimeout();\r\n  this.timer = setTimeout(function(){\r\n    if (!self._enableTimeouts) return;\r\n    self.callback(new Error('timeout of ' + ms + 'ms exceeded'));\r\n    self.timedOut = true;\r\n  }, ms);\r\n};\r\n\r\n/**\r\n * Whitelist these globals for this test run\r\n *\r\n * @api private\r\n */\r\nRunnable.prototype.globals = function(arr){\r\n  var self = this;\r\n  this._allowedGlobals = arr;\r\n};\r\n\r\n/**\r\n * Run the test and invoke `fn(err)`.\r\n *\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nRunnable.prototype.run = function(fn){\r\n  var self = this\r\n    , start = new Date\r\n    , ctx = this.ctx\r\n    , finished\r\n    , emitted;\r\n\r\n  // Some times the ctx exists but it is not runnable\r\n  if (ctx && ctx.runnable) ctx.runnable(this);\r\n\r\n  // called multiple times\r\n  function multiple(err) {\r\n    if (emitted) return;\r\n    emitted = true;\r\n    self.emit('error', err || new Error('done() called multiple times; stacktrace may be inaccurate'));\r\n  }\r\n\r\n  // finished\r\n  function done(err) {\r\n    var ms = self.timeout();\r\n    if (self.timedOut) return;\r\n    if (finished) return multiple(err || self._trace);\r\n    self.clearTimeout();\r\n    self.duration = new Date - start;\r\n    finished = true;\r\n    if (!err && self.duration > ms && self._enableTimeouts) err = new Error('timeout of ' + ms + 'ms exceeded');\r\n    fn(err);\r\n  }\r\n\r\n  // for .resetTimeout()\r\n  this.callback = done;\r\n\r\n  // explicit async with `done` argument\r\n  if (this.async) {\r\n    this.resetTimeout();\r\n\r\n    try {\r\n      this.fn.call(ctx, function(err){\r\n        if (err instanceof Error || toString.call(err) === \"[object Error]\") return done(err);\r\n        if (null != err) {\r\n          if (Object.prototype.toString.call(err) === '[object Object]') {\r\n            return done(new Error('done() invoked with non-Error: ' + JSON.stringify(err)));\r\n          } else {\r\n            return done(new Error('done() invoked with non-Error: ' + err));\r\n          }\r\n        }\r\n        done();\r\n      });\r\n    } catch (err) {\r\n      done(utils.getError(err));\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (this.asyncOnly) {\r\n    return done(new Error('--async-only option in use without declaring `done()`'));\r\n  }\r\n\r\n  // sync or promise-returning\r\n  try {\r\n    if (this.pending) {\r\n      done();\r\n    } else {\r\n      callFn(this.fn);\r\n    }\r\n  } catch (err) {\r\n    done(utils.getError(err));\r\n  }\r\n\r\n  function callFn(fn) {\r\n    var result = fn.call(ctx);\r\n    if (result && typeof result.then === 'function') {\r\n      self.resetTimeout();\r\n      result\r\n        .then(function() {\r\n          done()\r\n        },\r\n        function(reason) {\r\n          done(reason || new Error('Promise rejected with no or falsy reason'))\r\n        });\r\n    } else {\r\n      done();\r\n    }\r\n  }\r\n};\r\n\r\n}); // module: runnable.js\r\n\r\nrequire.register(\"runner.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar EventEmitter = require('browser/events').EventEmitter\r\n  , debug = require('browser/debug')('mocha:runner')\r\n  , Test = require('./test')\r\n  , utils = require('./utils')\r\n  , filter = utils.filter\r\n  , keys = utils.keys;\r\n\r\n/**\r\n * Non-enumerable globals.\r\n */\r\n\r\nvar globals = [\r\n  'setTimeout',\r\n  'clearTimeout',\r\n  'setInterval',\r\n  'clearInterval',\r\n  'XMLHttpRequest',\r\n  'Date',\r\n  'setImmediate',\r\n  'clearImmediate'\r\n];\r\n\r\n/**\r\n * Expose `Runner`.\r\n */\r\n\r\nmodule.exports = Runner;\r\n\r\n/**\r\n * Initialize a `Runner` for the given `suite`.\r\n *\r\n * Events:\r\n *\r\n *   - `start`  execution started\r\n *   - `end`  execution complete\r\n *   - `suite`  (suite) test suite execution started\r\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\r\n *   - `test`  (test) test execution started\r\n *   - `test end`  (test) test completed\r\n *   - `hook`  (hook) hook execution started\r\n *   - `hook end`  (hook) hook complete\r\n *   - `pass`  (test) test passed\r\n *   - `fail`  (test, err) test failed\r\n *   - `pending`  (test) test pending\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Runner(suite) {\r\n  var self = this;\r\n  this._globals = [];\r\n  this._abort = false;\r\n  this.suite = suite;\r\n  this.total = suite.total();\r\n  this.failures = 0;\r\n  this.on('test end', function(test){ self.checkGlobals(test); });\r\n  this.on('hook end', function(hook){ self.checkGlobals(hook); });\r\n  this.grep(/.*/);\r\n  this.globals(this.globalProps().concat(extraGlobals()));\r\n}\r\n\r\n/**\r\n * Wrapper for setImmediate, process.nextTick, or browser polyfill.\r\n *\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nRunner.immediately = global.setImmediate || process.nextTick;\r\n\r\n/**\r\n * Inherit from `EventEmitter.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = EventEmitter.prototype;\r\nRunner.prototype = new F;\r\nRunner.prototype.constructor = Runner;\r\n\r\n\r\n/**\r\n * Run tests with full titles matching `re`. Updates runner.total\r\n * with number of tests matched.\r\n *\r\n * @param {RegExp} re\r\n * @param {Boolean} invert\r\n * @return {Runner} for chaining\r\n * @api public\r\n */\r\n\r\nRunner.prototype.grep = function(re, invert){\r\n  debug('grep %s', re);\r\n  this._grep = re;\r\n  this._invert = invert;\r\n  this.total = this.grepTotal(this.suite);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Returns the number of tests matching the grep search for the\r\n * given suite.\r\n *\r\n * @param {Suite} suite\r\n * @return {Number}\r\n * @api public\r\n */\r\n\r\nRunner.prototype.grepTotal = function(suite) {\r\n  var self = this;\r\n  var total = 0;\r\n\r\n  suite.eachTest(function(test){\r\n    var match = self._grep.test(test.fullTitle());\r\n    if (self._invert) match = !match;\r\n    if (match) total++;\r\n  });\r\n\r\n  return total;\r\n};\r\n\r\n/**\r\n * Return a list of global properties.\r\n *\r\n * @return {Array}\r\n * @api private\r\n */\r\n\r\nRunner.prototype.globalProps = function() {\r\n  var props = utils.keys(global);\r\n\r\n  // non-enumerables\r\n  for (var i = 0; i < globals.length; ++i) {\r\n    if (~utils.indexOf(props, globals[i])) continue;\r\n    props.push(globals[i]);\r\n  }\r\n\r\n  return props;\r\n};\r\n\r\n/**\r\n * Allow the given `arr` of globals.\r\n *\r\n * @param {Array} arr\r\n * @return {Runner} for chaining\r\n * @api public\r\n */\r\n\r\nRunner.prototype.globals = function(arr){\r\n  if (0 == arguments.length) return this._globals;\r\n  debug('globals %j', arr);\r\n  this._globals = this._globals.concat(arr);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Check for global variable leaks.\r\n *\r\n * @api private\r\n */\r\n\r\nRunner.prototype.checkGlobals = function(test){\r\n  if (this.ignoreLeaks) return;\r\n  var ok = this._globals;\r\n\r\n  var globals = this.globalProps();\r\n  var leaks;\r\n\r\n  if (test) {\r\n    ok = ok.concat(test._allowedGlobals || []);\r\n  }\r\n\r\n  if(this.prevGlobalsLength == globals.length) return;\r\n  this.prevGlobalsLength = globals.length;\r\n\r\n  leaks = filterLeaks(ok, globals);\r\n  this._globals = this._globals.concat(leaks);\r\n\r\n  if (leaks.length > 1) {\r\n    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));\r\n  } else if (leaks.length) {\r\n    this.fail(test, new Error('global leak detected: ' + leaks[0]));\r\n  }\r\n};\r\n\r\n/**\r\n * Fail the given `test`.\r\n *\r\n * @param {Test} test\r\n * @param {Error} err\r\n * @api private\r\n */\r\n\r\nRunner.prototype.fail = function(test, err){\r\n  ++this.failures;\r\n  test.state = 'failed';\r\n\r\n  if ('string' == typeof err) {\r\n    err = new Error('the string \"' + err + '\" was thrown, throw an Error :)');\r\n  }\r\n\r\n  this.emit('fail', test, err);\r\n};\r\n\r\n/**\r\n * Fail the given `hook` with `err`.\r\n *\r\n * Hook failures work in the following pattern:\r\n * - If bail, then exit\r\n * - Failed `before` hook skips all tests in a suite and subsuites,\r\n *   but jumps to corresponding `after` hook\r\n * - Failed `before each` hook skips remaining tests in a\r\n *   suite and jumps to corresponding `after each` hook,\r\n *   which is run only once\r\n * - Failed `after` hook does not alter\r\n *   execution order\r\n * - Failed `after each` hook skips remaining tests in a\r\n *   suite and subsuites, but executes other `after each`\r\n *   hooks\r\n *\r\n * @param {Hook} hook\r\n * @param {Error} err\r\n * @api private\r\n */\r\n\r\nRunner.prototype.failHook = function(hook, err){\r\n  this.fail(hook, err);\r\n  if (this.suite.bail()) {\r\n    this.emit('end');\r\n  }\r\n};\r\n\r\n/**\r\n * Run hook `name` callbacks and then invoke `fn()`.\r\n *\r\n * @param {String} name\r\n * @param {Function} function\r\n * @api private\r\n */\r\n\r\nRunner.prototype.hook = function(name, fn){\r\n  var suite = this.suite\r\n    , hooks = suite['_' + name]\r\n    , self = this\r\n    , timer;\r\n\r\n  function next(i) {\r\n    var hook = hooks[i];\r\n    if (!hook) return fn();\r\n    self.currentRunnable = hook;\r\n\r\n    hook.ctx.currentTest = self.test;\r\n\r\n    self.emit('hook', hook);\r\n\r\n    hook.on('error', function(err){\r\n      self.failHook(hook, err);\r\n    });\r\n\r\n    hook.run(function(err){\r\n      hook.removeAllListeners('error');\r\n      var testError = hook.error();\r\n      if (testError) self.fail(self.test, testError);\r\n      if (err) {\r\n        self.failHook(hook, err);\r\n\r\n        // stop executing hooks, notify callee of hook err\r\n        return fn(err);\r\n      }\r\n      self.emit('hook end', hook);\r\n      delete hook.ctx.currentTest;\r\n      next(++i);\r\n    });\r\n  }\r\n\r\n  Runner.immediately(function(){\r\n    next(0);\r\n  });\r\n};\r\n\r\n/**\r\n * Run hook `name` for the given array of `suites`\r\n * in order, and callback `fn(err, errSuite)`.\r\n *\r\n * @param {String} name\r\n * @param {Array} suites\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nRunner.prototype.hooks = function(name, suites, fn){\r\n  var self = this\r\n    , orig = this.suite;\r\n\r\n  function next(suite) {\r\n    self.suite = suite;\r\n\r\n    if (!suite) {\r\n      self.suite = orig;\r\n      return fn();\r\n    }\r\n\r\n    self.hook(name, function(err){\r\n      if (err) {\r\n        var errSuite = self.suite;\r\n        self.suite = orig;\r\n        return fn(err, errSuite);\r\n      }\r\n\r\n      next(suites.pop());\r\n    });\r\n  }\r\n\r\n  next(suites.pop());\r\n};\r\n\r\n/**\r\n * Run hooks from the top level down.\r\n *\r\n * @param {String} name\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nRunner.prototype.hookUp = function(name, fn){\r\n  var suites = [this.suite].concat(this.parents()).reverse();\r\n  this.hooks(name, suites, fn);\r\n};\r\n\r\n/**\r\n * Run hooks from the bottom up.\r\n *\r\n * @param {String} name\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nRunner.prototype.hookDown = function(name, fn){\r\n  var suites = [this.suite].concat(this.parents());\r\n  this.hooks(name, suites, fn);\r\n};\r\n\r\n/**\r\n * Return an array of parent Suites from\r\n * closest to furthest.\r\n *\r\n * @return {Array}\r\n * @api private\r\n */\r\n\r\nRunner.prototype.parents = function(){\r\n  var suite = this.suite\r\n    , suites = [];\r\n  while (suite = suite.parent) suites.push(suite);\r\n  return suites;\r\n};\r\n\r\n/**\r\n * Run the current test and callback `fn(err)`.\r\n *\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nRunner.prototype.runTest = function(fn){\r\n  var test = this.test\r\n    , self = this;\r\n\r\n  if (this.asyncOnly) test.asyncOnly = true;\r\n\r\n  try {\r\n    test.on('error', function(err){\r\n      self.fail(test, err);\r\n    });\r\n    test.run(fn);\r\n  } catch (err) {\r\n    fn(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Run tests in the given `suite` and invoke\r\n * the callback `fn()` when complete.\r\n *\r\n * @param {Suite} suite\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nRunner.prototype.runTests = function(suite, fn){\r\n  var self = this\r\n    , tests = suite.tests.slice()\r\n    , test;\r\n\r\n\r\n  function hookErr(err, errSuite, after) {\r\n    // before/after Each hook for errSuite failed:\r\n    var orig = self.suite;\r\n\r\n    // for failed 'after each' hook start from errSuite parent,\r\n    // otherwise start from errSuite itself\r\n    self.suite = after ? errSuite.parent : errSuite;\r\n\r\n    if (self.suite) {\r\n      // call hookUp afterEach\r\n      self.hookUp('afterEach', function(err2, errSuite2) {\r\n        self.suite = orig;\r\n        // some hooks may fail even now\r\n        if (err2) return hookErr(err2, errSuite2, true);\r\n        // report error suite\r\n        fn(errSuite);\r\n      });\r\n    } else {\r\n      // there is no need calling other 'after each' hooks\r\n      self.suite = orig;\r\n      fn(errSuite);\r\n    }\r\n  }\r\n\r\n  function next(err, errSuite) {\r\n    // if we bail after first err\r\n    if (self.failures && suite._bail) return fn();\r\n\r\n    if (self._abort) return fn();\r\n\r\n    if (err) return hookErr(err, errSuite, true);\r\n\r\n    // next test\r\n    test = tests.shift();\r\n\r\n    // all done\r\n    if (!test) return fn();\r\n\r\n    // grep\r\n    var match = self._grep.test(test.fullTitle());\r\n    if (self._invert) match = !match;\r\n    if (!match) return next();\r\n\r\n    // pending\r\n    if (test.pending) {\r\n      self.emit('pending', test);\r\n      self.emit('test end', test);\r\n      return next();\r\n    }\r\n\r\n    // execute test and hook(s)\r\n    self.emit('test', self.test = test);\r\n    self.hookDown('beforeEach', function(err, errSuite){\r\n\r\n      if (err) return hookErr(err, errSuite, false);\r\n\r\n      self.currentRunnable = self.test;\r\n      self.runTest(function(err){\r\n        test = self.test;\r\n\r\n        if (err) {\r\n          self.fail(test, err);\r\n          self.emit('test end', test);\r\n          return self.hookUp('afterEach', next);\r\n        }\r\n\r\n        test.state = 'passed';\r\n        self.emit('pass', test);\r\n        self.emit('test end', test);\r\n        self.hookUp('afterEach', next);\r\n      });\r\n    });\r\n  }\r\n\r\n  this.next = next;\r\n  next();\r\n};\r\n\r\n/**\r\n * Run the given `suite` and invoke the\r\n * callback `fn()` when complete.\r\n *\r\n * @param {Suite} suite\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nRunner.prototype.runSuite = function(suite, fn){\r\n  var total = this.grepTotal(suite)\r\n    , self = this\r\n    , i = 0;\r\n\r\n  debug('run suite %s', suite.fullTitle());\r\n\r\n  if (!total) return fn();\r\n\r\n  this.emit('suite', this.suite = suite);\r\n\r\n  function next(errSuite) {\r\n    if (errSuite) {\r\n      // current suite failed on a hook from errSuite\r\n      if (errSuite == suite) {\r\n        // if errSuite is current suite\r\n        // continue to the next sibling suite\r\n        return done();\r\n      } else {\r\n        // errSuite is among the parents of current suite\r\n        // stop execution of errSuite and all sub-suites\r\n        return done(errSuite);\r\n      }\r\n    }\r\n\r\n    if (self._abort) return done();\r\n\r\n    var curr = suite.suites[i++];\r\n    if (!curr) return done();\r\n    self.runSuite(curr, next);\r\n  }\r\n\r\n  function done(errSuite) {\r\n    self.suite = suite;\r\n    self.hook('afterAll', function(){\r\n      self.emit('suite end', suite);\r\n      fn(errSuite);\r\n    });\r\n  }\r\n\r\n  this.hook('beforeAll', function(err){\r\n    if (err) return done();\r\n    self.runTests(suite, next);\r\n  });\r\n};\r\n\r\n/**\r\n * Handle uncaught exceptions.\r\n *\r\n * @param {Error} err\r\n * @api private\r\n */\r\n\r\nRunner.prototype.uncaught = function(err){\r\n  if (err) {\r\n    debug('uncaught exception %s', err !== function () {\r\n      return this;\r\n    }.call(err) ? err : ( err.message || err ));\r\n  } else {\r\n    debug('uncaught undefined exception');\r\n    err = utils.undefinedError();\r\n  }\r\n  err.uncaught = true;\r\n\r\n  var runnable = this.currentRunnable;\r\n  if (!runnable) return;\r\n\r\n  var wasAlreadyDone = runnable.state;\r\n  this.fail(runnable, err);\r\n\r\n  runnable.clearTimeout();\r\n\r\n  if (wasAlreadyDone) return;\r\n\r\n  // recover from test\r\n  if ('test' == runnable.type) {\r\n    this.emit('test end', runnable);\r\n    this.hookUp('afterEach', this.next);\r\n    return;\r\n  }\r\n\r\n  // bail on hooks\r\n  this.emit('end');\r\n};\r\n\r\n/**\r\n * Run the root suite and invoke `fn(failures)`\r\n * on completion.\r\n *\r\n * @param {Function} fn\r\n * @return {Runner} for chaining\r\n * @api public\r\n */\r\n\r\nRunner.prototype.run = function(fn){\r\n  var self = this\r\n    , fn = fn || function(){};\r\n\r\n  function uncaught(err){\r\n    self.uncaught(err);\r\n  }\r\n\r\n  debug('start');\r\n\r\n  // callback\r\n  this.on('end', function(){\r\n    debug('end');\r\n    process.removeListener('uncaughtException', uncaught);\r\n    fn(self.failures);\r\n  });\r\n\r\n  // run suites\r\n  this.emit('start');\r\n  this.runSuite(this.suite, function(){\r\n    debug('finished running');\r\n    self.emit('end');\r\n  });\r\n\r\n  // uncaught exception\r\n  process.on('uncaughtException', uncaught);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Cleanly abort execution\r\n *\r\n * @return {Runner} for chaining\r\n * @api public\r\n */\r\nRunner.prototype.abort = function(){\r\n  debug('aborting');\r\n  this._abort = true;\r\n};\r\n\r\n/**\r\n * Filter leaks with the given globals flagged as `ok`.\r\n *\r\n * @param {Array} ok\r\n * @param {Array} globals\r\n * @return {Array}\r\n * @api private\r\n */\r\n\r\nfunction filterLeaks(ok, globals) {\r\n  return filter(globals, function(key){\r\n    // Firefox and Chrome exposes iframes as index inside the window object\r\n    if (/^d+/.test(key)) return false;\r\n\r\n    // in firefox\r\n    // if runner runs in an iframe, this iframe's window.getInterface method not init at first\r\n    // it is assigned in some seconds\r\n    if (global.navigator && /^getInterface/.test(key)) return false;\r\n\r\n    // an iframe could be approached by window[iframeIndex]\r\n    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak\r\n    if (global.navigator && /^\\d+/.test(key)) return false;\r\n\r\n    // Opera and IE expose global variables for HTML element IDs (issue #243)\r\n    if (/^mocha-/.test(key)) return false;\r\n\r\n    var matched = filter(ok, function(ok){\r\n      if (~ok.indexOf('*')) return 0 == key.indexOf(ok.split('*')[0]);\r\n      return key == ok;\r\n    });\r\n    return matched.length == 0 && (!global.navigator || 'onerror' !== key);\r\n  });\r\n}\r\n\r\n/**\r\n * Array of globals dependent on the environment.\r\n *\r\n * @return {Array}\r\n * @api private\r\n */\r\n\r\n function extraGlobals() {\r\n  if (typeof(process) === 'object' &&\r\n      typeof(process.version) === 'string') {\r\n\r\n    var nodeVersion = process.version.split('.').reduce(function(a, v) {\r\n      return a << 8 | v;\r\n    });\r\n\r\n    // 'errno' was renamed to process._errno in v0.9.11.\r\n\r\n    if (nodeVersion < 0x00090B) {\r\n      return ['errno'];\r\n    }\r\n  }\r\n\r\n  return [];\r\n }\r\n\r\n}); // module: runner.js\r\n\r\nrequire.register(\"suite.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar EventEmitter = require('browser/events').EventEmitter\r\n  , debug = require('browser/debug')('mocha:suite')\r\n  , milliseconds = require('./ms')\r\n  , utils = require('./utils')\r\n  , Hook = require('./hook');\r\n\r\n/**\r\n * Expose `Suite`.\r\n */\r\n\r\nexports = module.exports = Suite;\r\n\r\n/**\r\n * Create a new `Suite` with the given `title`\r\n * and parent `Suite`. When a suite with the\r\n * same title is already present, that suite\r\n * is returned to provide nicer reporter\r\n * and more flexible meta-testing.\r\n *\r\n * @param {Suite} parent\r\n * @param {String} title\r\n * @return {Suite}\r\n * @api public\r\n */\r\n\r\nexports.create = function(parent, title){\r\n  var suite = new Suite(title, parent.ctx);\r\n  suite.parent = parent;\r\n  if (parent.pending) suite.pending = true;\r\n  title = suite.fullTitle();\r\n  parent.addSuite(suite);\r\n  return suite;\r\n};\r\n\r\n/**\r\n * Initialize a new `Suite` with the given\r\n * `title` and `ctx`.\r\n *\r\n * @param {String} title\r\n * @param {Context} ctx\r\n * @api private\r\n */\r\n\r\nfunction Suite(title, parentContext) {\r\n  this.title = title;\r\n  var context = function() {};\r\n  context.prototype = parentContext;\r\n  this.ctx = new context();\r\n  this.suites = [];\r\n  this.tests = [];\r\n  this.pending = false;\r\n  this._beforeEach = [];\r\n  this._beforeAll = [];\r\n  this._afterEach = [];\r\n  this._afterAll = [];\r\n  this.root = !title;\r\n  this._timeout = 2000;\r\n  this._enableTimeouts = true;\r\n  this._slow = 75;\r\n  this._bail = false;\r\n}\r\n\r\n/**\r\n * Inherit from `EventEmitter.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = EventEmitter.prototype;\r\nSuite.prototype = new F;\r\nSuite.prototype.constructor = Suite;\r\n\r\n\r\n/**\r\n * Return a clone of this `Suite`.\r\n *\r\n * @return {Suite}\r\n * @api private\r\n */\r\n\r\nSuite.prototype.clone = function(){\r\n  var suite = new Suite(this.title);\r\n  debug('clone');\r\n  suite.ctx = this.ctx;\r\n  suite.timeout(this.timeout());\r\n  suite.enableTimeouts(this.enableTimeouts());\r\n  suite.slow(this.slow());\r\n  suite.bail(this.bail());\r\n  return suite;\r\n};\r\n\r\n/**\r\n * Set timeout `ms` or short-hand such as \"2s\".\r\n *\r\n * @param {Number|String} ms\r\n * @return {Suite|Number} for chaining\r\n * @api private\r\n */\r\n\r\nSuite.prototype.timeout = function(ms){\r\n  if (0 == arguments.length) return this._timeout;\r\n  if (ms.toString() === '0') this._enableTimeouts = false;\r\n  if ('string' == typeof ms) ms = milliseconds(ms);\r\n  debug('timeout %d', ms);\r\n  this._timeout = parseInt(ms, 10);\r\n  return this;\r\n};\r\n\r\n/**\r\n  * Set timeout `enabled`.\r\n  *\r\n  * @param {Boolean} enabled\r\n  * @return {Suite|Boolean} self or enabled\r\n  * @api private\r\n  */\r\n\r\nSuite.prototype.enableTimeouts = function(enabled){\r\n  if (arguments.length === 0) return this._enableTimeouts;\r\n  debug('enableTimeouts %s', enabled);\r\n  this._enableTimeouts = enabled;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set slow `ms` or short-hand such as \"2s\".\r\n *\r\n * @param {Number|String} ms\r\n * @return {Suite|Number} for chaining\r\n * @api private\r\n */\r\n\r\nSuite.prototype.slow = function(ms){\r\n  if (0 === arguments.length) return this._slow;\r\n  if ('string' == typeof ms) ms = milliseconds(ms);\r\n  debug('slow %d', ms);\r\n  this._slow = ms;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets whether to bail after first error.\r\n *\r\n * @param {Boolean} bail\r\n * @return {Suite|Number} for chaining\r\n * @api private\r\n */\r\n\r\nSuite.prototype.bail = function(bail){\r\n  if (0 == arguments.length) return this._bail;\r\n  debug('bail %s', bail);\r\n  this._bail = bail;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Run `fn(test[, done])` before running tests.\r\n *\r\n * @param {Function} fn\r\n * @return {Suite} for chaining\r\n * @api private\r\n */\r\n\r\nSuite.prototype.beforeAll = function(title, fn){\r\n  if (this.pending) return this;\r\n  if ('function' === typeof title) {\r\n    fn = title;\r\n    title = fn.name;\r\n  }\r\n  title = '\"before all\" hook' + (title ? ': ' + title : '');\r\n\r\n  var hook = new Hook(title, fn);\r\n  hook.parent = this;\r\n  hook.timeout(this.timeout());\r\n  hook.enableTimeouts(this.enableTimeouts());\r\n  hook.slow(this.slow());\r\n  hook.ctx = this.ctx;\r\n  this._beforeAll.push(hook);\r\n  this.emit('beforeAll', hook);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Run `fn(test[, done])` after running tests.\r\n *\r\n * @param {Function} fn\r\n * @return {Suite} for chaining\r\n * @api private\r\n */\r\n\r\nSuite.prototype.afterAll = function(title, fn){\r\n  if (this.pending) return this;\r\n  if ('function' === typeof title) {\r\n    fn = title;\r\n    title = fn.name;\r\n  }\r\n  title = '\"after all\" hook' + (title ? ': ' + title : '');\r\n\r\n  var hook = new Hook(title, fn);\r\n  hook.parent = this;\r\n  hook.timeout(this.timeout());\r\n  hook.enableTimeouts(this.enableTimeouts());\r\n  hook.slow(this.slow());\r\n  hook.ctx = this.ctx;\r\n  this._afterAll.push(hook);\r\n  this.emit('afterAll', hook);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Run `fn(test[, done])` before each test case.\r\n *\r\n * @param {Function} fn\r\n * @return {Suite} for chaining\r\n * @api private\r\n */\r\n\r\nSuite.prototype.beforeEach = function(title, fn){\r\n  if (this.pending) return this;\r\n  if ('function' === typeof title) {\r\n    fn = title;\r\n    title = fn.name;\r\n  }\r\n  title = '\"before each\" hook' + (title ? ': ' + title : '');\r\n\r\n  var hook = new Hook(title, fn);\r\n  hook.parent = this;\r\n  hook.timeout(this.timeout());\r\n  hook.enableTimeouts(this.enableTimeouts());\r\n  hook.slow(this.slow());\r\n  hook.ctx = this.ctx;\r\n  this._beforeEach.push(hook);\r\n  this.emit('beforeEach', hook);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Run `fn(test[, done])` after each test case.\r\n *\r\n * @param {Function} fn\r\n * @return {Suite} for chaining\r\n * @api private\r\n */\r\n\r\nSuite.prototype.afterEach = function(title, fn){\r\n  if (this.pending) return this;\r\n  if ('function' === typeof title) {\r\n    fn = title;\r\n    title = fn.name;\r\n  }\r\n  title = '\"after each\" hook' + (title ? ': ' + title : '');\r\n\r\n  var hook = new Hook(title, fn);\r\n  hook.parent = this;\r\n  hook.timeout(this.timeout());\r\n  hook.enableTimeouts(this.enableTimeouts());\r\n  hook.slow(this.slow());\r\n  hook.ctx = this.ctx;\r\n  this._afterEach.push(hook);\r\n  this.emit('afterEach', hook);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Add a test `suite`.\r\n *\r\n * @param {Suite} suite\r\n * @return {Suite} for chaining\r\n * @api private\r\n */\r\n\r\nSuite.prototype.addSuite = function(suite){\r\n  suite.parent = this;\r\n  suite.timeout(this.timeout());\r\n  suite.enableTimeouts(this.enableTimeouts());\r\n  suite.slow(this.slow());\r\n  suite.bail(this.bail());\r\n  this.suites.push(suite);\r\n  this.emit('suite', suite);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Add a `test` to this suite.\r\n *\r\n * @param {Test} test\r\n * @return {Suite} for chaining\r\n * @api private\r\n */\r\n\r\nSuite.prototype.addTest = function(test){\r\n  test.parent = this;\r\n  test.timeout(this.timeout());\r\n  test.enableTimeouts(this.enableTimeouts());\r\n  test.slow(this.slow());\r\n  test.ctx = this.ctx;\r\n  this.tests.push(test);\r\n  this.emit('test', test);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return the full title generated by recursively\r\n * concatenating the parent's full title.\r\n *\r\n * @return {String}\r\n * @api public\r\n */\r\n\r\nSuite.prototype.fullTitle = function(){\r\n  if (this.parent) {\r\n    var full = this.parent.fullTitle();\r\n    if (full) return full + ' ' + this.title;\r\n  }\r\n  return this.title;\r\n};\r\n\r\n/**\r\n * Return the total number of tests.\r\n *\r\n * @return {Number}\r\n * @api public\r\n */\r\n\r\nSuite.prototype.total = function(){\r\n  return utils.reduce(this.suites, function(sum, suite){\r\n    return sum + suite.total();\r\n  }, 0) + this.tests.length;\r\n};\r\n\r\n/**\r\n * Iterates through each suite recursively to find\r\n * all tests. Applies a function in the format\r\n * `fn(test)`.\r\n *\r\n * @param {Function} fn\r\n * @return {Suite}\r\n * @api private\r\n */\r\n\r\nSuite.prototype.eachTest = function(fn){\r\n  utils.forEach(this.tests, fn);\r\n  utils.forEach(this.suites, function(suite){\r\n    suite.eachTest(fn);\r\n  });\r\n  return this;\r\n};\r\n\r\n}); // module: suite.js\r\n\r\nrequire.register(\"test.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Runnable = require('./runnable');\r\n\r\n/**\r\n * Expose `Test`.\r\n */\r\n\r\nmodule.exports = Test;\r\n\r\n/**\r\n * Initialize a new `Test` with the given `title` and callback `fn`.\r\n *\r\n * @param {String} title\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nfunction Test(title, fn) {\r\n  Runnable.call(this, title, fn);\r\n  this.pending = !fn;\r\n  this.type = 'test';\r\n}\r\n\r\n/**\r\n * Inherit from `Runnable.prototype`.\r\n */\r\n\r\nfunction F(){};\r\nF.prototype = Runnable.prototype;\r\nTest.prototype = new F;\r\nTest.prototype.constructor = Test;\r\n\r\n\r\n}); // module: test.js\r\n\r\nrequire.register(\"utils.js\", function(module, exports, require){\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar fs = require('browser/fs')\r\n  , path = require('browser/path')\r\n  , basename = path.basename\r\n  , exists = fs.existsSync || path.existsSync\r\n  , glob = require('browser/glob')\r\n  , join = path.join\r\n  , debug = require('browser/debug')('mocha:watch');\r\n\r\n/**\r\n * Ignored directories.\r\n */\r\n\r\nvar ignore = ['node_modules', '.git'];\r\n\r\n/**\r\n * Escape special characters in the given string of html.\r\n *\r\n * @param  {String} html\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.escape = function(html){\r\n  return String(html)\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;');\r\n};\r\n\r\n/**\r\n * Array#forEach (<=IE8)\r\n *\r\n * @param {Array} array\r\n * @param {Function} fn\r\n * @param {Object} scope\r\n * @api private\r\n */\r\n\r\nexports.forEach = function(arr, fn, scope){\r\n  for (var i = 0, l = arr.length; i < l; i++)\r\n    fn.call(scope, arr[i], i);\r\n};\r\n\r\n/**\r\n * Array#map (<=IE8)\r\n *\r\n * @param {Array} array\r\n * @param {Function} fn\r\n * @param {Object} scope\r\n * @api private\r\n */\r\n\r\nexports.map = function(arr, fn, scope){\r\n  var result = [];\r\n  for (var i = 0, l = arr.length; i < l; i++)\r\n    result.push(fn.call(scope, arr[i], i));\r\n  return result;\r\n};\r\n\r\n/**\r\n * Array#indexOf (<=IE8)\r\n *\r\n * @parma {Array} arr\r\n * @param {Object} obj to find index of\r\n * @param {Number} start\r\n * @api private\r\n */\r\n\r\nexports.indexOf = function(arr, obj, start){\r\n  for (var i = start || 0, l = arr.length; i < l; i++) {\r\n    if (arr[i] === obj)\r\n      return i;\r\n  }\r\n  return -1;\r\n};\r\n\r\n/**\r\n * Array#reduce (<=IE8)\r\n *\r\n * @param {Array} array\r\n * @param {Function} fn\r\n * @param {Object} initial value\r\n * @api private\r\n */\r\n\r\nexports.reduce = function(arr, fn, val){\r\n  var rval = val;\r\n\r\n  for (var i = 0, l = arr.length; i < l; i++) {\r\n    rval = fn(rval, arr[i], i, arr);\r\n  }\r\n\r\n  return rval;\r\n};\r\n\r\n/**\r\n * Array#filter (<=IE8)\r\n *\r\n * @param {Array} array\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nexports.filter = function(arr, fn){\r\n  var ret = [];\r\n\r\n  for (var i = 0, l = arr.length; i < l; i++) {\r\n    var val = arr[i];\r\n    if (fn(val, i, arr)) ret.push(val);\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\n/**\r\n * Object.keys (<=IE8)\r\n *\r\n * @param {Object} obj\r\n * @return {Array} keys\r\n * @api private\r\n */\r\n\r\nexports.keys = Object.keys || function(obj) {\r\n  var keys = []\r\n    , has = Object.prototype.hasOwnProperty // for `window` on <=IE8\r\n\r\n  for (var key in obj) {\r\n    if (has.call(obj, key)) {\r\n      keys.push(key);\r\n    }\r\n  }\r\n\r\n  return keys;\r\n};\r\n\r\n/**\r\n * Watch the given `files` for changes\r\n * and invoke `fn(file)` on modification.\r\n *\r\n * @param {Array} files\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nexports.watch = function(files, fn){\r\n  var options = { interval: 100 };\r\n  files.forEach(function(file){\r\n    debug('file %s', file);\r\n    fs.watchFile(file, options, function(curr, prev){\r\n      if (prev.mtime < curr.mtime) fn(file);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Ignored files.\r\n */\r\n\r\nfunction ignored(path){\r\n  return !~ignore.indexOf(path);\r\n}\r\n\r\n/**\r\n * Lookup files in the given `dir`.\r\n *\r\n * @return {Array}\r\n * @api private\r\n */\r\n\r\nexports.files = function(dir, ext, ret){\r\n  ret = ret || [];\r\n  ext = ext || ['js'];\r\n\r\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');\r\n\r\n  fs.readdirSync(dir)\r\n  .filter(ignored)\r\n  .forEach(function(path){\r\n    path = join(dir, path);\r\n    if (fs.statSync(path).isDirectory()) {\r\n      exports.files(path, ext, ret);\r\n    } else if (path.match(re)) {\r\n      ret.push(path);\r\n    }\r\n  });\r\n\r\n  return ret;\r\n};\r\n\r\n/**\r\n * Compute a slug from the given `str`.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.slug = function(str){\r\n  return str\r\n    .toLowerCase()\r\n    .replace(/ +/g, '-')\r\n    .replace(/[^-\\w]/g, '');\r\n};\r\n\r\n/**\r\n * Strip the function definition from `str`,\r\n * and re-indent for pre whitespace.\r\n */\r\n\r\nexports.clean = function(str) {\r\n  str = str\r\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, \"\\n\").replace(/^\\uFEFF/, '')\r\n    .replace(/^function *\\(.*\\) *{|\\(.*\\) *=> *{?/, '')\r\n    .replace(/\\s+\\}$/, '');\r\n\r\n  var spaces = str.match(/^\\n?( *)/)[1].length\r\n    , tabs = str.match(/^\\n?(\\t*)/)[1].length\r\n    , re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');\r\n\r\n  str = str.replace(re, '');\r\n\r\n  return exports.trim(str);\r\n};\r\n\r\n/**\r\n * Trim the given `str`.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.trim = function(str){\r\n  return str.replace(/^\\s+|\\s+$/g, '');\r\n};\r\n\r\n/**\r\n * Parse the given `qs`.\r\n *\r\n * @param {String} qs\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nexports.parseQuery = function(qs){\r\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair){\r\n    var i = pair.indexOf('=')\r\n      , key = pair.slice(0, i)\r\n      , val = pair.slice(++i);\r\n\r\n    obj[key] = decodeURIComponent(val);\r\n    return obj;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * Highlight the given string of `js`.\r\n *\r\n * @param {String} js\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction highlight(js) {\r\n  return js\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')\r\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')\r\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')\r\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')\r\n    .replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')\r\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>')\r\n}\r\n\r\n/**\r\n * Highlight the contents of tag `name`.\r\n *\r\n * @param {String} name\r\n * @api private\r\n */\r\n\r\nexports.highlightTags = function(name) {\r\n  var code = document.getElementById('mocha').getElementsByTagName(name);\r\n  for (var i = 0, len = code.length; i < len; ++i) {\r\n    code[i].innerHTML = highlight(code[i].innerHTML);\r\n  }\r\n};\r\n\r\n/**\r\n * If a value could have properties, and has none, this function is called, which returns\r\n * a string representation of the empty value.\r\n *\r\n * Functions w/ no properties return `'[Function]'`\r\n * Arrays w/ length === 0 return `'[]'`\r\n * Objects w/ no properties return `'{}'`\r\n * All else: return result of `value.toString()`\r\n *\r\n * @param {*} value Value to inspect\r\n * @param {string} [type] The type of the value, if known.\r\n * @returns {string}\r\n */\r\nvar emptyRepresentation = function emptyRepresentation(value, type) {\r\n  type = type || exports.type(value);\r\n\r\n  switch(type) {\r\n    case 'function':\r\n      return '[Function]';\r\n    case 'object':\r\n      return '{}';\r\n    case 'array':\r\n      return '[]';\r\n    default:\r\n      return value.toString();\r\n  }\r\n};\r\n\r\n/**\r\n * Takes some variable and asks `{}.toString()` what it thinks it is.\r\n * @param {*} value Anything\r\n * @example\r\n * type({}) // 'object'\r\n * type([]) // 'array'\r\n * type(1) // 'number'\r\n * type(false) // 'boolean'\r\n * type(Infinity) // 'number'\r\n * type(null) // 'null'\r\n * type(new Date()) // 'date'\r\n * type(/foo/) // 'regexp'\r\n * type('type') // 'string'\r\n * type(global) // 'global'\r\n * @api private\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\r\n * @returns {string}\r\n */\r\nexports.type = function type(value) {\r\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\r\n    return 'buffer';\r\n  }\r\n  return Object.prototype.toString.call(value)\r\n    .replace(/^\\[.+\\s(.+?)\\]$/, '$1')\r\n    .toLowerCase();\r\n};\r\n\r\n/**\r\n * @summary Stringify `value`.\r\n * @description Different behavior depending on type of value.\r\n * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.\r\n * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\r\n * - If `value` is an *empty* object, function, or array, return result of function\r\n *   {@link emptyRepresentation}.\r\n * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of\r\n *   JSON.stringify().\r\n *\r\n * @see exports.type\r\n * @param {*} value\r\n * @return {string}\r\n * @api private\r\n */\r\n\r\nexports.stringify = function(value) {\r\n  var prop,\r\n    type = exports.type(value);\r\n\r\n  if (type === 'null' || type === 'undefined') {\r\n    return '[' + type + ']';\r\n  }\r\n\r\n  if (type === 'date') {\r\n    return '[Date: ' + value.toISOString() + ']';\r\n  }\r\n\r\n  if (!~exports.indexOf(['object', 'array', 'function'], type)) {\r\n    return value.toString();\r\n  }\r\n\r\n  for (prop in value) {\r\n    if (value.hasOwnProperty(prop)) {\r\n      return JSON.stringify(exports.canonicalize(value), null, 2).replace(/,(\\n|$)/g, '$1');\r\n    }\r\n  }\r\n\r\n  return emptyRepresentation(value, type);\r\n};\r\n\r\n/**\r\n * Return if obj is a Buffer\r\n * @param {Object} arg\r\n * @return {Boolean}\r\n * @api private\r\n */\r\nexports.isBuffer = function (arg) {\r\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(arg);\r\n};\r\n\r\n/**\r\n * @summary Return a new Thing that has the keys in sorted order.  Recursive.\r\n * @description If the Thing...\r\n * - has already been seen, return string `'[Circular]'`\r\n * - is `undefined`, return string `'[undefined]'`\r\n * - is `null`, return value `null`\r\n * - is some other primitive, return the value\r\n * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\r\n * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.\r\n * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`\r\n *\r\n * @param {*} value Thing to inspect.  May or may not have properties.\r\n * @param {Array} [stack=[]] Stack of seen values\r\n * @return {(Object|Array|Function|string|undefined)}\r\n * @see {@link exports.stringify}\r\n * @api private\r\n */\r\n\r\nexports.canonicalize = function(value, stack) {\r\n  var canonicalizedObj,\r\n    type = exports.type(value),\r\n    prop,\r\n    withStack = function withStack(value, fn) {\r\n      stack.push(value);\r\n      fn();\r\n      stack.pop();\r\n    };\r\n\r\n  stack = stack || [];\r\n\r\n  if (exports.indexOf(stack, value) !== -1) {\r\n    return '[Circular]';\r\n  }\r\n\r\n  switch(type) {\r\n    case 'undefined':\r\n      canonicalizedObj = '[undefined]';\r\n      break;\r\n    case 'buffer':\r\n    case 'null':\r\n      canonicalizedObj = value;\r\n      break;\r\n    case 'array':\r\n      withStack(value, function () {\r\n        canonicalizedObj = exports.map(value, function (item) {\r\n          return exports.canonicalize(item, stack);\r\n        });\r\n      });\r\n      break;\r\n    case 'date':\r\n      canonicalizedObj = '[Date: ' + value.toISOString() + ']';\r\n      break;\r\n    case 'function':\r\n      for (prop in value) {\r\n        canonicalizedObj = {};\r\n        break;\r\n      }\r\n      if (!canonicalizedObj) {\r\n        canonicalizedObj = emptyRepresentation(value, type);\r\n        break;\r\n      }\r\n    /* falls through */\r\n    case 'object':\r\n      canonicalizedObj = canonicalizedObj || {};\r\n      withStack(value, function () {\r\n        exports.forEach(exports.keys(value).sort(), function (key) {\r\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);\r\n        });\r\n      });\r\n      break;\r\n    case 'number':\r\n    case 'boolean':\r\n      canonicalizedObj = value;\r\n      break;\r\n    default:\r\n      canonicalizedObj = value.toString();\r\n  }\r\n\r\n  return canonicalizedObj;\r\n};\r\n\r\n/**\r\n * Lookup file names at the given `path`.\r\n */\r\nexports.lookupFiles = function lookupFiles(path, extensions, recursive) {\r\n  var files = [];\r\n  var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');\r\n\r\n  if (!exists(path)) {\r\n    if (exists(path + '.js')) {\r\n      path += '.js';\r\n    } else {\r\n      files = glob.sync(path);\r\n      if (!files.length) throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");\r\n      return files;\r\n    }\r\n  }\r\n\r\n  try {\r\n    var stat = fs.statSync(path);\r\n    if (stat.isFile()) return path;\r\n  }\r\n  catch (ignored) {\r\n    return;\r\n  }\r\n\r\n  fs.readdirSync(path).forEach(function(file){\r\n    file = join(path, file);\r\n    try {\r\n      var stat = fs.statSync(file);\r\n      if (stat.isDirectory()) {\r\n        if (recursive) {\r\n          files = files.concat(lookupFiles(file, extensions, recursive));\r\n        }\r\n        return;\r\n      }\r\n    }\r\n    catch (ignored) {\r\n      return;\r\n    }\r\n    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') return;\r\n    files.push(file);\r\n  });\r\n\r\n  return files;\r\n};\r\n\r\n/**\r\n * Generate an undefined error with a message warning the user.\r\n *\r\n * @return {Error}\r\n */\r\n\r\nexports.undefinedError = function(){\r\n  return new Error('Caught undefined error, did you throw without specifying what?');\r\n};\r\n\r\n/**\r\n * Generate an undefined error if `err` is not defined.\r\n *\r\n * @param {Error} err\r\n * @return {Error}\r\n */\r\n\r\nexports.getError = function(err){\r\n  return err || exports.undefinedError();\r\n};\r\n\r\n\r\n}); // module: utils.js\r\n// The global object is \"self\" in Web Workers.\r\nvar global = (function() { return this; })();\r\n\r\n/**\r\n * Save timer references to avoid Sinon interfering (see GH-237).\r\n */\r\n\r\nvar Date = global.Date;\r\nvar setTimeout = global.setTimeout;\r\nvar setInterval = global.setInterval;\r\nvar clearTimeout = global.clearTimeout;\r\nvar clearInterval = global.clearInterval;\r\n\r\n/**\r\n * Node shims.\r\n *\r\n * These are meant only to allow\r\n * mocha.js to run untouched, not\r\n * to allow running node code in\r\n * the browser.\r\n */\r\n\r\nvar process = {};\r\nprocess.exit = function(status){};\r\nprocess.stdout = {};\r\n\r\nvar uncaughtExceptionHandlers = [];\r\n\r\nvar originalOnerrorHandler = global.onerror;\r\n\r\n/**\r\n * Remove uncaughtException listener.\r\n * Revert to original onerror handler if previously defined.\r\n */\r\n\r\nprocess.removeListener = function(e, fn){\r\n  if ('uncaughtException' == e) {\r\n    if (originalOnerrorHandler) {\r\n      global.onerror = originalOnerrorHandler;\r\n    } else {\r\n      global.onerror = function() {};\r\n    }\r\n    var i = Mocha.utils.indexOf(uncaughtExceptionHandlers, fn);\r\n    if (i != -1) { uncaughtExceptionHandlers.splice(i, 1); }\r\n  }\r\n};\r\n\r\n/**\r\n * Implements uncaughtException listener.\r\n */\r\n\r\nprocess.on = function(e, fn){\r\n  if ('uncaughtException' == e) {\r\n    global.onerror = function(err, url, line){\r\n      fn(new Error(err + ' (' + url + ':' + line + ')'));\r\n      return true;\r\n    };\r\n    uncaughtExceptionHandlers.push(fn);\r\n  }\r\n};\r\n\r\n/**\r\n * Expose mocha.\r\n */\r\n\r\nvar Mocha = global.Mocha = require('mocha'),\r\n    mocha = global.mocha = new Mocha({ reporter: 'html' });\r\n\r\n// The BDD UI is registered by default, but no UI will be functional in the\r\n// browser without an explicit call to the overridden `mocha.ui` (see below).\r\n// Ensure that this default UI does not expose its methods to the global scope.\r\nmocha.suite.removeAllListeners('pre-require');\r\n\r\nvar immediateQueue = []\r\n  , immediateTimeout;\r\n\r\nfunction timeslice() {\r\n  var immediateStart = new Date().getTime();\r\n  while (immediateQueue.length && (new Date().getTime() - immediateStart) < 100) {\r\n    immediateQueue.shift()();\r\n  }\r\n  if (immediateQueue.length) {\r\n    immediateTimeout = setTimeout(timeslice, 0);\r\n  } else {\r\n    immediateTimeout = null;\r\n  }\r\n}\r\n\r\n/**\r\n * High-performance override of Runner.immediately.\r\n */\r\n\r\nMocha.Runner.immediately = function(callback) {\r\n  immediateQueue.push(callback);\r\n  if (!immediateTimeout) {\r\n    immediateTimeout = setTimeout(timeslice, 0);\r\n  }\r\n};\r\n\r\n/**\r\n * Function to allow assertion libraries to throw errors directly into mocha.\r\n * This is useful when running tests in a browser because window.onerror will\r\n * only receive the 'message' attribute of the Error.\r\n */\r\nmocha.throwError = function(err) {\r\n  Mocha.utils.forEach(uncaughtExceptionHandlers, function (fn) {\r\n    fn(err);\r\n  });\r\n  throw err;\r\n};\r\n\r\n/**\r\n * Override ui to ensure that the ui functions are initialized.\r\n * Normally this would happen in Mocha.prototype.loadFiles.\r\n */\r\n\r\nmocha.ui = function(ui){\r\n  Mocha.prototype.ui.call(this, ui);\r\n  this.suite.emit('pre-require', global, null, this);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Setup mocha with the given setting options.\r\n */\r\n\r\nmocha.setup = function(opts){\r\n  if ('string' == typeof opts) opts = { ui: opts };\r\n  for (var opt in opts) this[opt](opts[opt]);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Run mocha, returning the Runner.\r\n */\r\n\r\nmocha.run = function(fn){\r\n  var options = mocha.options;\r\n  mocha.globals('location');\r\n\r\n  var query = Mocha.utils.parseQuery(global.location.search || '');\r\n  if (query.grep) mocha.grep(query.grep);\r\n  if (query.invert) mocha.invert();\r\n\r\n  return Mocha.prototype.run.call(mocha, function(err){\r\n    // The DOM Document is not available in Web Workers.\r\n    var document = global.document;\r\n    if (document && document.getElementById('mocha') && options.noHighlighting !== true) {\r\n      Mocha.utils.highlightTags('code');\r\n    }\r\n    if (fn) fn(err);\r\n  });\r\n};\r\n\r\n/**\r\n * Expose the process shim.\r\n */\r\n\r\nMocha.process = process;\r\n})();\r\n"]}